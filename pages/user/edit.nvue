<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<yb-nav-bar :bgColor="skinColor.color_theme_1" :frontColor="skinColor.color_4" title="编辑信息"></yb-nav-bar>
		<scroll-view scroll-y="true" style="flex: 1;">
			<view class="list padding-gap" :class="skinMode + '-actived'" :style="{'border-color': skinColor.color_gap_1}" @tap="editShow = true">
				<text class="label" :style="{color: skinColor.color_1}">昵称：</text>
				<text class="value" :style="{color: skinColor.color_2}">{{name}}</text>
			</view>
			<view class="list padding-gap" :class="skinMode + '-actived'" :style="{'border-color': skinColor.color_gap_1}" @tap="chooseImage">
				<text class="label" :style="{color: skinColor.color_1}">头像：</text>
				<yb-avatar enablePreview size="50" :src="avatar"></yb-avatar>
			</view>
		</scroll-view>
		<yb-modal-input
		:visible.sync="editShow"
		title="编辑昵称"
		placeholder="请输入昵称"
		v-model="nickName"
		:bgColor="skinColor.color_bg_2"
		:frontColor="skinColor.color_1"
		:themeColor="skinColor.color_blue"
		:tipColor="skinColor.color_2"
		:gapColor="skinColor.color_gap_1"
		@confirm="updateName"
		@cancel="nickName = ''"></yb-modal-input>
	</yb-page-anime>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	let that
	export default {
		mixins: [appMixin],
		data () {
			return {
				editShow: false,
				nickName: ''
			}
		},
		computed: {
			name () {
				return this.$store.getters['user/getName']
			},
			avatar () {
				return this.$store.getters['user/getAvatar']
			}
		},
		onLoad () {
			that = this
		},
		methods: {
			updateName () {
				if ( !this.nickName ) {
					uni.showToast({
						title: '请输入昵称',
						icon: 'none'
					})
					return
				}
				this.$store.dispatch('user/updateName', this.nickName)
				this.editShow = false
				this.nickName = ''
			},
			chooseImage () {
				uni.chooseImage({
					count: 1,
					sourceType: ['album'],
					success: (res) => {
						uni.saveFile({
							tempFilePath: res.tempFilePaths[0],
							success: (ret) => {
								this.$store.dispatch('user/updateAvatar', ret.savedFilePath)
							}
						 });
					}
				})
			}
		},
		onBackPress (event) {
			if ( that.editShow ) {
				that.editShow = false
				return true
			}
			return false
		}
	}
</script>

<style scoped>
	.list {
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		height: 100rpx;
		border-bottom-width: 1rpx;
	}
	.list .label {
		font-size: 28rpx;
	}
	.list .value {
		font-size: 26rpx;
	}
	.modal-input-box {
		flex-direction: row;
		align-items: center;
	}
	.modal-input-box .input {
		border-bottom-width: 1rpx;
		flex: 1;
		font-size: 24rpx;
	}
	.modal-input-box .tip {
		font-size: 24rpx;
	}
</style>
