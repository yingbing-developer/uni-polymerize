<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<yb-nav-bar :bgColor="skinColor.color_theme_1" :frontColor="skinColor.color_4" title="防盗链设置"></yb-nav-bar>
		<list v-if="list.length > 0">
			<cell v-for="(item, index) in list.slice(0, max)">
				<view class="dict padding-gap" :style="{'border-color': skinColor.color_gap_2}">
					<text class="value" :style="{color: skinColor.color_2}">{{item}}</text>
					<rd-icon enableClick @click="showEdit(item)" name="edit-rect" :color="skinColor.color_2" size="30"></rd-icon>
					<view style="width: 10rpx;"></view>
					<rd-icon enableClick @click="remove(item)" name="dustbin" :color="skinColor.color_2" size="30"></rd-icon>
				</view>
			</cell>
			<cell v-if="currentPage * size >= list.length && list.length > 0">
				<yb-no-more :color="skinColor.color_3"></yb-no-more>
			</cell>
			<yb-pullup v-if="!isLastPage" ref="pullup" :color="skinColor.color_1" @pullup="pullup"></yb-pullup>
		</list>
		<rd-no-data title="暂无数据" v-else />
		<view class="fixed-bottom">
			<yb-button @click="createShow = true" class="button" title="新增防盗链" size="22" round />
		</view>
		<yb-modal-input
		:visible.sync="createShow"
		title="新增防盗链"
		placeholder="请输入域名"
		v-model="domain"
		:bgColor="skinColor.color_bg_2"
		:frontColor="skinColor.color_1"
		:themeColor="skinColor.color_blue"
		:tipColor="skinColor.color_2"
		:gapColor="skinColor.color_gap_1"
		@confirm="createReferer"
		@cancel="onCancel"></yb-modal-input>
		<yb-modal-input
		:visible.sync="editShow"
		title="编辑防盗链"
		placeholder="请输入域名"
		v-model="domain"
		:bgColor="skinColor.color_bg_2"
		:frontColor="skinColor.color_1"
		:themeColor="skinColor.color_blue"
		:tipColor="skinColor.color_2"
		:gapColor="skinColor.color_gap_1"
		@confirm="createReferer"
		@cancel="onCancel"></yb-modal-input>
	</yb-page-anime>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	export default {
		mixins: [appMixin],
		data () {
			return {
				size: 20,
				currentPage: 1,
				createShow: false,
				editShow: false,
				domain: '',
				domainCurrent: ''
			}
		},
		computed: {
			list () {
				return this.$store.getters['referer/get'].reverse()
			},
			max () {
				return this.currentPage * this.size
			},
			isLastPage () {
				return this.max >= this.list.length
			}
		},
		methods: {
			pullup (index) {
				this.currentPage++;
				this.$refs.pullup.success()
			},
			createReferer () {
				if ( !this.domain ) {
					uni.showToast({
						title: '请输入域名',
						icon: 'none'
					})
					return
				}
				if ( this.list.indexOf(this.domain) > -1 ) {
					uni.showToast({
						title: '不能输入重复域名',
						icon: 'none'
					})
					return
				}
				this.$store.dispatch('referer/add', this.domain)
				if ( this.editShow ) {
					this.remove(this.domainCurrent)
				}
				uni.showToast({
					title: this.createShow ? '新增防盗链成功' : '修改防盗链成功',
					icon: 'none'
				})
				this.createShow = false
				this.editShow = false
				this.$nextTick(() => {
					this.domain = ''
					this.domainCurrent = ''
				})
			},
			showEdit (url) {
				this.domain = url
				this.domainCurrent = url
				this.editShow = true
			},
			onCancel () {
				this.domain = ''
				this.domainCurrent = ''
			},
			remove (referer) {
				this.$store.dispatch('referer/remove', referer)
			}
		}
	}
</script>

<style scoped>
	@import url("@/assets/css/app.css");
	.dict {
		flex-direction: row;
		align-items: center;
		border-bottom-width: 2rpx;
		height: 80rpx;
	}
	.dict .value {
		font-size: 30rpx;
		flex: 1;
		lines: 1;
		text-overflow: ellipsis;
		margin-right: 20rpx;
	}
</style>
