<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<yb-nav-bar :bgColor="skinColor.color_theme_1" :frontColor="skinColor.color_4" title="来源设置"></yb-nav-bar>
		<scroll-view scroll-y="true" style="flex: 1;">
			<rd-type gap="30rpx" title="音乐来源"></rd-type>
			<view class="list padding-gap" :style="{'border-color': skinColor.color_gap_1}" v-for="(item, index) in MUSICURL" :key="item.key">
				<text class="label" :style="{color: skinColor.color_1}">{{item.title}}</text>
				<view class="controls">
					<view class="control"
					:style="{'background-color': filterSource(item.key) == i ? skinColor.color_blue : ''}"
					v-for="(href, i) in filterHref(item.href)" :key="i"
					@tap="onTab(item.key, i)">
						<text class="text" :style="{color: filterSource(item.key) == i ? skinColor.color_white : skinColor.color_1}">来源{{i + 1}}</text>
					</view>
					<view class="control" :style="{'background-color': filterSource(item.key) == -1 ? skinColor.color_blue : ''}" @tap="onTab(item.key, -1)">
						<text class="text" :style="{color: filterSource(item.key) == -1 ? skinColor.color_white : skinColor.color_1}">关闭</text>
					</view>
				</view>
			</view>
			<rd-type gap="30rpx" title="小说来源"></rd-type>
			<view class="list padding-gap" :style="{'border-color': skinColor.color_gap_1}" v-for="(item, index) in BOOKURL" :key="item.key">
				<text class="label" :style="{color: skinColor.color_1}">{{item.title}}</text>
				<view class="controls">
					<view class="control"
					:style="{'background-color': filterSource(item.key) == i ? skinColor.color_blue : ''}"
					v-for="(href, i) in filterHref(item.href)" :key="i"
					@tap="onTab(item.key, i)">
						<text class="text" :style="{color: filterSource(item.key) == i ? skinColor.color_white : skinColor.color_1}">来源{{i + 1}}</text>
					</view>
					<view class="control" :style="{'background-color': filterSource(item.key) == -1 ? skinColor.color_blue : ''}" @tap="onTab(item.key, -1)">
						<text class="text" :style="{color: filterSource(item.key) == -1 ? skinColor.color_white : skinColor.color_1}">关闭</text>
					</view>
				</view>
			</view>
			<rd-type gap="30rpx" title="漫画来源"></rd-type>
			<view class="list padding-gap" :style="{'border-color': skinColor.color_gap_1}" v-for="(item, index) in COMICURL" :key="item.key">
				<text class="label" :style="{color: skinColor.color_1}">{{item.title}}</text>
				<view class="controls">
					<view class="control"
					:style="{'background-color': filterSource(item.key) == i ? skinColor.color_blue : ''}"
					v-for="(href, i) in filterHref(item.href)" :key="i"
					@tap="onTab(item.key, i)">
						<text class="text" :style="{color: filterSource(item.key) == i ? skinColor.color_white : skinColor.color_1}">来源{{i + 1}}</text>
					</view>
					<view class="control" :style="{'background-color': filterSource(item.key) == -1 ? skinColor.color_blue : ''}" @tap="onTab(item.key, -1)">
						<text class="text" :style="{color: filterSource(item.key) == -1 ? skinColor.color_white : skinColor.color_1}">关闭</text>
					</view>
				</view>
			</view>
		</scroll-view>
	</yb-page-anime>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	import Source from '@/assets/constructor/source.js'
	export default {
		mixins: [appMixin],
		computed: {
			adult () {
				return this.$store.getters['app/getAdult']
			},
			MUSICURL () {
				return Object.keys(this.app.$config.MUSICURL).map(key => {
					return Object.assign({}, this.app.$config.MUSICURL[key], {
						key: key
					})
				})
			},
			BOOKURL () {
				return Object.keys(this.app.$config.BOOKURL).map(key => {
					if ( !this.adult ) {
						if ( !this.app.$config.BOOKURL[key].isAdult ) {
							return Object.assign({}, this.app.$config.BOOKURL[key], {
								key: key
							})
						}
					} else {
						return Object.assign({}, this.app.$config.BOOKURL[key], {
							key: key
						})
					}
				}).filter(item => item != null)
			},
			COMICURL () {
				return Object.keys(this.app.$config.COMICURL).map(key => {
					if ( !this.adult ) {
						if ( !this.app.$config.COMICURL[key].isAdult ) {
							return Object.assign({}, this.app.$config.COMICURL[key], {
								key: key
							})
						}
					} else {
						return Object.assign({}, this.app.$config.COMICURL[key], {
							key: key
						})
					}
				}).filter(item => item != null)
			}
		},
		methods: {
			filterHref (href) {
				if ( typeof href == 'string' ) {
					return [href]
				} else {
					return href
				}
			},
			onTab (id, key) {
				this.$store.dispatch('source/add', new Source({
					id: id,
					key: key
				}))
			}
		}
	}
</script>

<style scoped>
	.title {
		font-size: 26rpx;
		margin: 20rpx 0;
	}
	.list {
		flex-direction: row;
		align-items: center;
		height: 100rpx;
		border-bottom-width: 1rpx;
	}
	.list .label {
		font-size: 28rpx;
	}
	.list .controls {
		flex: 1;
		flex-direction: row;
		align-items: center;
		justify-content: flex-end;
	}
	.list .controls .control {
		padding: 10rpx 0;
		width: 80rpx;
		align-items: center;
		border-radius: 10rpx;
		margin-left: 10rpx;
		transition: backgroundColor .3s;
	}
	.list .controls .control .text {
		font-size: 22rpx;
		transition: color .3s;
	}
</style>
