<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<yb-nav-bar :bgColor="skinColor.color_theme_1" :frontColor="skinColor.color_4" title="最近听的"></yb-nav-bar>
		<list>
			<cell v-for="(item, index) in list.slice(0, max)">
				<view class="cell-item_2"
				:style="{'border-color': skinColor.color_gap_1}"
				@tap="playSong(item)">
					<text class="index" :style="{color: skinColor.color_red_2}" v-if="index > 2">{{index + 1}}</text>
					<image v-if="index == 0" class="trophy" src="/static/music/trophy_1.png" mode="aspectFill"></image>
					<image v-if="index == 1" class="trophy" src="/static/music/trophy_2.png" mode="aspectFill"></image>
					<image v-if="index == 2" class="trophy" src="/static/music/trophy_3.png" mode="aspectFill"></image>
					<rd-icon name="music-fill" size="30" :color="skinColor.color_green"></rd-icon>
					<view class="info">
						<text class="title" :style="{color: skinColor.color_1}">{{item.title}}</text>
						<text class="label" :style="{color: skinColor.color_3}">{{item.singer}}</text>
					</view>
					<rd-icon enableClick @click="musicPanel(item)" class="more opac-actived" name="more-vertical" :color="skinColor.color_3"></rd-icon>
					<rd-icon enableClick @click="removeRecord(item)" class="more opac-actived" name="dustbin" :color="skinColor.color_3"></rd-icon>
				</view>
			</cell>
			<yb-page-anime-fixed>
				<yb-list-no-data :color="skinColor.color_3" v-if="list.length == 0"></yb-list-no-data>
			</yb-page-anime-fixed>
			<view class="fixed-bottom">
				<yb-button @click="playAlbum(list)" v-if="list.length > 0" class="button" title="播放全部" size="22" round />
			</view>
			<cell v-if="isLastPage && list.length > 0">
				<yb-no-more :color="skinColor.color_3"></yb-no-more>
			</cell>
			<yb-pullup ref="pullup" :color="skinColor.color_1" @pullup="pullup" v-if="!isLastPage"></yb-pullup>
		</list>
	</yb-page-anime>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	export default {
		mixins: [appMixin],
		data () {
			return {
				page: 1,
				size: 20
			}
		},
		computed: {
			list () {
				return this.$store.getters['record/getRecord'].filter(record => record.type == 'song').reverse()
			},
			max () {
				return this.page * this.size
			},
			isLastPage () {
				return this.max >= this.list.length
			}
		},
		methods: {
			pullup () {
				this.page++
				this.$refs.pullup.success()
			}
		}
	}
</script>

<style>
	@import url("@/assets/css/app.css");
</style>
