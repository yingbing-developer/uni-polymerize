<template>
	<yb-page-anime ref="ybPageAnime" tabbar :bgColor="skinColor.color_bg_1">
		<list class="list">
			<yb-pulldown ref="pulldown" :color="skinColor.color_1" @pulldown="pulldown"></yb-pulldown>
			<cell>
				<swiper
				v-if="banners.length > 0"
				:style="{'height': (statusBarHeight + 100) + 'px'}"
				class="ad-swiper"
				circular
				:indicator-dots="true"
				:indicator-color="skinColor.color_bg_1"
				:indicator-active-color="skinColor.color_actived_1"
				:autoplay="true"
				:interval="3000"
				:duration="1000">
					<swiper-item v-for="(item, index) in banners" :key="index" @tap="goDetail(item)">
						<rd-image lazyLoad class="ad" :src="item.cover" mode="aspectFill"></rd-image>
					</swiper-item>
				</swiper>
			</cell>
			<cell>
				<view class="singer-line opac-actived" :style="{'background-color': skinColor.color_theme_2}" @tap="app.$Router.push({path: '/pages/music/search'})">
					<view class="singer-left">
						<rd-icon name="search" color="#ffa916" size="50"></rd-icon>
						<text class="singer-text" :style="{color: skinColor.color_1}">搜索歌曲/歌手</text>
					</view>
					<view class="go">
						<text class="go-text">GO</text>
					</view>
				</view>
			</cell>
			<cell>
				<view class="padding-gap">
					<rd-title title="热门歌手" moreText="更多"
					@more="app.$Router.push({
						path: '/pages/music/singer'
					})"></rd-title>
					<yb-swiper-list
					style="height: 700rpx;"
					type="card"
					:size="24"
					:column="tabs.length < 5 ? tabs.length : 'auto'"
					:tabs="tabs"
					:frontColor="skinColor.color_white"
					:activedColor="skinColor.color_red">
						<template v-slot="{swiperSlot}">
							<yb-gap></yb-gap>
							<yb-grid :data="hotSingers.filter(singer => singer.source == tabs[swiperSlot.index].source)" :count="8" :column="4">
								<template v-slot="{gridItem}">
									<view class="singer" @tap="goDetail(gridItem.detail)">
										<rd-image lazyLoad border-radius="12" class="cover" :src="gridItem.detail.cover" mode="aspectFill"></rd-image>
										<text class="name" :style="{color: skinColor.color_1}">{{gridItem.detail.title}}</text>
										<text class="source" :style="{color: skinColor.color_1}">（{{filterSource(gridItem.detail.source)}})</text>
									</view>
								</template>
							</yb-grid>
						</template>
					</yb-swiper-list>
				</view>
				<yb-gap :color="skinColor.color_gap_2"></yb-gap>
			</cell>
			<cell>
				<view class="padding-gap">
					<rd-title title="排行榜" moreText="更多"
					@more="app.$Router.push({
						path: '/pages/music/rank',
						query: {
							title: '最近更新',
							tabs: encodeURIComponent(JSON.stringify(tabs)),
							list: encodeURIComponent(JSON.stringify(hotTops))
						}
					})"></rd-title>
					<yb-swiper-list
					style="height: 700rpx;"
					type="card"
					:size="24"
					:column="tabs.length < 5 ? tabs.length : 'auto'"
					:tabs="tabs"
					:frontColor="skinColor.color_white"
					:activedColor="skinColor.color_red">
						<template v-slot="{swiperSlot}">
							<yb-gap></yb-gap>
							<yb-grid :data="hotTops.filter(top => top.source == tabs[swiperSlot.index].source)" :column="4" :count="32">
								<template v-slot="{gridItem}">
									<view class="topItem opac-actived"
									@tap="goRank(gridItem.detail)"
									:key="index"
									:style="{
										'background-color': skinColor.color_theme_2
									}">
										<text class="type-text" :style="{color: skinColor.color_1}">{{gridItem.detail.title}}</text>
									</view>
								</template>
							</yb-grid>
						</template>
					</yb-swiper-list>
				</view>
				<yb-gap :color="skinColor.color_gap_2"></yb-gap>
			</cell>
			<cell>
				<view class="padding-gap">
					<rd-title title="推荐歌单" moreText="更多" @more="app.$Router.push({
						path: '/pages/music/mix'
					})"></rd-title>
				</view>
			</cell>
			<cell v-for="(tab, i) in tabs">
				<yb-grid class="padding-gap" :data="hotAlbums.filter(al => al.source == tab.source)" :count="6">
					<template v-slot="{gridItem}">
						<view class="gridItem" @tap="goDetail(gridItem.detail)">
							<rd-image  border-radius="12" class="cover" :src="gridItem.detail.cover" mode="aspectFill"></rd-image>
							<view class="bottom">
								<view class="num">
									<rd-icon name="play-outline" :color="skinColor.color_white"></rd-icon>
									<text class="num-text" :style="{color: skinColor.color_white}">{{gridItem.detail.playnum / 10000}}万</text>
								</view>
							</view>
							<text class="name" :style="{color: skinColor.color_1}">{{gridItem.detail.title}}</text>
						</view>
					</template>
				</yb-grid>
			</cell>
			<cell>
				<yb-gap :color="skinColor.color_gap_2"></yb-gap>
			</cell>
			<cell>
				<view class="padding-gap" v-if="newSongs.length > 0">
					<rd-title title="新碟上架" moreText="更多" @more="app.$Router.push({
						path: '/pages/music/album'
					})"></rd-title>
				</view>
			</cell>
			<cell v-for="(tab, i) in tabs">
				<yb-grid class="padding-gap" :data="newSongs.filter(al => al.source == tab.source)" :count="6">
					<template v-slot="{gridItem}">
						<view class="gridItem" @tap="playSong(gridItem.detail)">
							<rd-image  border-radius="12" class="cover" :src="gridItem.detail.cover" mode="aspectFill"></rd-image>
							<view class="bottom">
								<view class="num">
									<rd-icon name="play-outline" :color="skinColor.color_white"></rd-icon>
									<text class="num-text" :style="{color: skinColor.color_white}">{{gridItem.detail.singer}}</text>
								</view>
							</view>
							<text class="name" :style="{color: skinColor.color_1}">{{gridItem.detail.title}}</text>
						</view>
					</template>
				</yb-grid>
			</cell>
			<yb-pullup ref="pullup" :color="skinColor.color_1" @pullup="pullup" v-if="newSongs.length == 0"></yb-pullup>
		</list>
		<yb-list-loading :style="{'background-color': skinColor.color_bg_1}" :color="skinColor.color_3" v-if="loading" size="70" title="加载中"></yb-list-loading>
	</yb-page-anime>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	export default {
		mixins: [appMixin],
		data () {
			return {
				statusBarHeight: 0,
				windowHeight: 0,
				tabs: [],
				hotSingers: [],
				hotTops: [],
				banners: [],
				hotAlbums: [],
				newSongs: [],
				loading: true
			}
		},
		onLoad () {
			this.statusBarHeight = uni.getSystemInfoSync().statusBarHeight
			this.windowHeight = uni.getSystemInfoSync().windowWidth
		},
		onReady () {
			getApp().globalData.$api.music.getRecom().then((ress) => {
				this.loading = false
				ress.forEach(res => {
					if ( res.code == getApp().globalData.$config.ERR_OK ) {
						this.banners = this.banners.concat(res.data.banners)
						this.hotSingers = this.hotSingers.concat(res.data.hotSingers)
						this.hotTops = this.hotTops.concat(res.data.hotTops.filter(top => top.title.length < 6))
						this.hotAlbums = this.hotAlbums.concat(res.data.hotAlbums)
						this.tabs.push({
							label: this.filterSource(res.data.source),
							value: res.data.source,
							source: res.data.source
						})
					}
				})
			})
		},
		onShow () {
			getApp().globalData.$business.setSkinColor();
		},
		methods: {
			pulldown () {
				getApp().globalData.$api.music.getRecom().then((ress) => {
					this.$refs.pulldown.success()
					this.banners = []
					this.hotSingers = []
					this.hotTops = []
					this.hotAlbums = []
					this.tabs = []
					ress.forEach((res, index) => {
						if ( res.code == getApp().globalData.$config.ERR_OK ) {
							this.banners = this.banners.concat(res.data.banners)
							this.hotSingers = this.hotSingers.concat(res.data.hotSingers)
							this.hotTops = this.hotTops.concat(res.data.hotTops.filter(top => top.title.length < 6))
							this.hotAlbums = this.hotAlbums.concat(res.data.hotAlbums)
							this.tabs.push({
								label: this.filterSource(res.data.source),
								value: res.data.source,
								source: res.data.source
							})
						}
					})
				})
			},
			pullup () {
				getApp().globalData.$api.music.getNewSongList().then((ress) => {
					ress.forEach(res => {
						if ( res.code == getApp().globalData.$config.ERR_OK ) {
							this.newSongs = this.newSongs.concat(res.data.list)
						}
					})
					this.newSongs.length > 0 ? this.$refs.pullup.success() : this.$refs.pullup.fail()
				})
			},
			goDetail (params) {
				getApp().globalData.$Router.push({
					path: '/pages/music/detail',
					query: {
						params: encodeURIComponent(JSON.stringify(params))
					}
				})
			},
			goRank (item) {
				if ( item.title == '更多' ) {
					const moduleIndex = this.modules.findIndex(module => module.source == item.source)
					getApp().globalData.$Router.push({
						path: '/pages/music/rank',
						query: {
							title: this.modules[moduleIndex].title,
							source: item.source,
							data: encodeURIComponent(JSON.stringify(this.modules[moduleIndex].topList))
						}
					})
				} else {
					this.goDetail(item)
				}
			}
		}
	}
</script>

<style scoped>
	@import url("@/assets/css/app.css");
	.ad-swiper {
		height: 200rpx;
	}
	.ad-swiper .ad {
		flex: 1;
	}
	.singer-line {
		height: 120rpx;
		margin: 24rpx 30rpx;
		border-radius: 16rpx;
		padding: 0 30rpx;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
	}
	.singer-line .singer-left {
		flex-direction: row;
		align-items: center;
	}
	.singer-line .singer-text {
		font-weight: bold;
		font-size: 36rpx;
		margin-left: 45rpx;
	}
	.singer-line .go {
		width: 80rpx;
		height: 80rpx;
		border-radius: 80rpx;
		background: linear-gradient(to bottom, #ffdca0, #ffab1f);
		align-items: center;
		justify-content: center;
	}
	.singer-line .go .go-text {
		font-weight: bold;
		font-size: 38rpx;
		color: #fff;
	}
	.topItem {
		width: 150rpx;
		height: 64rpx;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		margin: 0 0 24rpx 0;
	}
	.topItem .type-text {
		font-size: 24rpx;
	}
	
	.gridItem {
		position: relative;
		width: 208rpx;
	}
	.gridItem .cover {
		width: 208rpx;
		height: 208rpx;
	}
	.gridItem .name {
		font-size: 24rpx;
		height: 66rpx;
		lines: 2;
		text-overflow: ellipsis;
		margin-top: 15rpx;
	}
	.gridItem .bottom {
		flex-direction: row;
		align-items: center;
		position: absolute;
		bottom: 90rpx;
		left: 10rpx;
		right: 10rpx;
	}
	.gridItem .num {
		flex-direction: row;
		align-items: center;
		flex: 1;
	}
	.gridItem .num .num-text {
		font-size: 24rpx;
		margin-left: 10rpx;
		flex: 1;
		lines: 1;
		text-overflow: ellipsis;
	}
	
	.singer {
		width: 160rpx;
	}
	.singer .cover {
		width: 160rpx;
		height: 200rpx;
	}
	.singer .name {
		font-size: 24rpx;
		lines: 1;
		text-overflow: ellipsis;
		text-align: center;
		margin: 10rpx 0;
	}
	.singer .source {
		font-size: 20rpx;
		lines: 1;
		text-overflow: ellipsis;
		text-align: center;
		margin-bottom: 10rpx;
	}
	
	.newAlbum {
		flex-direction: row;
		justify-content: center;
		margin: 20rpx 30rpx;
		padding: 30rpx 0;
		border-bottom-width: 1rpx;
	}
	.newAlbum-center {
		flex-direction: row;
		justify-content: center;
		align-items: center;
	}
	.newAlbum-text {
		font-size: 26rpx;
	}
</style>
