<template>
	<view class="music">
		<view class="mask" ref="mask" @tap="hide"></view>
		<view class="popup" ref="popup" @touchmove.stop.prevent="" :style="{'background-color': skinColor.color_bg_1 }">
			<view class="top" :style="{'border-color': skinColor.color_gap_1}">
				<text class="title" :style="{color: skinColor.color_2}">{{player ? '正在播放：' + player.song.title : '播放列表'}}</text>
				<view class="top-right">
					<view class="tr-icon" @tap="routePush('/pages/music/online')">
						<c-icon name="network" size="38" :color="skinColor.color_1"></c-icon>
					</view>
					<view class="tr-icon" @tap="routePush('/pages/music/search')">
						<c-icon name="search" size="38" :color="skinColor.color_1"></c-icon>
					</view>
					<view class="tr-icon" @tap="hide">
						<rd-icon name="fork" size="34" :color="skinColor.color_1"></rd-icon>
					</view>
				</view>
			</view>
			<scroll-view :scroll-into-view="scrollId" class="scroll" scroll-y="true" v-if="playList.length > 0">
				<view class="list" :id="'song_' + id" v-for="(item, index) in playList" :key="index">
					<text class="list-name">{{item.title}}</text>
					<view class="list-right">
						<view class="list-icon">
							<!-- <rd-icon name="pause" size="37" color="#d43c33"></rd-icon> -->
							<rd-icon name="play" size="30" color="#d43c33"></rd-icon>
						</view>
						<view class="list-icon">
							<rd-icon name="dustbin-fill" size="30" color="#d43c33"></rd-icon>
						</view>
					</view>	
				</view>
			</scroll-view>
			<yb-no-data class="scroll" title="没有导入的歌曲哦!" v-else></yb-no-data>
			<view class="clear">
				<yb-button class="clear-btn" size="24" :themeColor="skinColor.color_1" :frontColor="skinColor.color_1" type="plain" round title="清除全部歌曲"></yb-button>
			</view>
		</view>
	</view>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	const animation = weex.requireModule('animation');
	export default {
		mixins: [appMixin],
		data () {
			return {
				anima: {
					opac: 0.4,
					duration: 400
				},
				height: 1000,
				scrollId: ''
			}
		},
		onReady() {
			this.show();
		},
		computed: {
			player () {
				return this.$store.getters['player/getPlayer']
			},
			playList () {
				return this.$store.getters['player/getPlayList']
			},
			playMode () {
				return this.$store.getters['player/getPlayMode']
			},
			modeName () {
				return this.playMode == 'round' ? '顺序播放' : this.playMode == 'loop' ? '单曲循环' : '随机播放';
			}
		},
		methods: {
			show () {
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: this.anima.opac
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.popup, {
				    styles: {
						transform: 'translateY(0)',
						opacity: 1
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				}, () => {
					this.player ? this.scrollId = 'scroll_' + this.player.song.id : null
				})
			},
			hide () {
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: '0'
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.popup, {
				    styles: {
						transform: 'translateY(' + Math.abs(this.height) + 'rpx)',
						opacity: 0
				    },
				    duration: this.anima.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				}, () => {
					getApp().globalData.$Router.back();
				})
			},
			//改变播放模式
			changeMode () {
				this.$store.dispatch('player/switchPlayMode')
			}
		},
		onBackPress (event) {
			if ( event.from == 'backbutton' ) {
				this.hide();
				return true;
			}
			return false
		}
	}
</script>

<style scoped>
	.mask {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		opacity: 0;
		background-color: #000000;
	}
	.popup {
		position: fixed;
		bottom: 100rpx;
		left: 35rpx;
		right: 35rpx;
		height: 1000rpx;
		transform: translateY(1000rpx);
		opacity: 0;
		border-radius: 20rpx;
	}
	.top {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 20rpx 30rpx;
		border-bottom-width: 1px;
	}
	.top-right {
		flex-direction: row;
		align-items: center;
	}
	.tr-icon {
		margin-left: 20rpx;
	}
	.title {
		font-size: 28rpx;
	}
	.list {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		height: 80rpx;
		padding: 20rpx 30rpx;
	}
	.list-right {
		flex-direction: row;
		align-items: center;
	}
	.list-icon {
		margin-left: 20rpx;
	}
	.list-name {
		flex: 1;
		font-size: 28rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.clear {
		justify-content: center;
		align-items: center;
		padding: 20rpx 0;
	}
	.clear-btn {
		width: 220rpx;
		height: 60rpx;
	}
	.close-text {
		font-size: 25rpx;
	}
	.scroll {
		flex: 1;
	}
</style>
