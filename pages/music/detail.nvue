<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<list ref="list" @loadmore="pullup" @scroll="onScroll">
			<cell>
				<view class="top">
					<rd-image lazyLoad class="bg" enable-blur :src="params.cover" mode="aspectFill"></rd-image>
					<yb-mask color="rgba(0,0,0,0.2)"></yb-mask>
					<yb-nav-bar :backShow="false" bgColor="rgba(0,0,0,0)"></yb-nav-bar>
					<view class="info" :style="{'justify-content': params.desc ? 'flex-start' : 'center'}">
						<rd-image lazyLoad borderRadius="12" class="cover" :src="params.cover" mode="aspectFill"></rd-image>
						<view class="info-right" v-if="params.desc">
							<rich-text class="desc" :nodes="topDesc"></rich-text>
							<view style="align-items: flex-start;">
								<text class="more opac-actived" :style="{color: skinColor.color_blue}" @tap="infoShow = true">[更多]</text>
							</view>
						</view>
					</view>
					<view class="play-line">
						<yb-button @tap="allToAlbum(list)" v-if="list.length > 0" class="play" size="20" type="plain" round :themeColor="skinColor.color_red" title="加入歌单" />
					</view>
				</view>
			</cell>
			<cell v-for="(item, index) in list.slice(0, max)">
				<view :style="{'background-color': skinColor.color_bg_1}" v-if="list.length > 0">
					<view class="cell-item_2 margin-gap"
					:style="{'border-color': skinColor.color_gap_1}"
					@tap="playSong(item)">
						<text class="index" :style="{color: skinColor.color_red_2}" v-if="index > 2">{{index + 1}}</text>
						<image v-if="index == 0" class="trophy" src="/static/music/trophy_1.png" mode="aspectFill"></image>
						<image v-if="index == 1" class="trophy" src="/static/music/trophy_2.png" mode="aspectFill"></image>
						<image v-if="index == 2" class="trophy" src="/static/music/trophy_3.png" mode="aspectFill"></image>
						<rd-icon name="music-fill" size="30" :color="skinColor.color_green"></rd-icon>
						<view class="info">
							<text class="title" :style="{color: skinColor.color_1}">{{item.title}}</text>
							<text class="label" :style="{color: skinColor.color_3}">{{item.singer}}</text>
						</view>
						<rd-icon enableClick @click="musicPanel(item)" class="more opac-actived" name="more-vertical" :color="skinColor.color_3"></rd-icon>
					</view>
				</view>
			</cell>
		</list>
		<yb-page-anime-fixed v-if="list.length == 0">
			<yb-list-no-data top="490rpx" title="暂无歌曲" v-if="list.length == 0 && !loading" />
			<yb-list-loading top="490rpx" size="80" :color="skinColor.color_3" title="加载中" v-if="loading" />
		</yb-page-anime-fixed>
		<yb-nav-bar ref="navbar" class="nav-bar" :title="title" :bg-color="navBg" front-color="#fff">
			<template slot="right">
				<view class="rd-nav-right">
					<view class="collection" @click="toCollection(params)" v-if="this.params.type == 'singer' || this.params.type == 'album' || this.params.type == 'newAlbum' || this.params.type == 'top'">
						<rd-icon v-if="isCollection(params.id)" name="love-fill" size="40" :color="skinColor.color_red"></rd-icon>
						<rd-icon v-else name="love" size="40" :color="skinColor.color_white"></rd-icon>
					</view>
					<rd-icon class="opac-actived" v-if="params.commentId" enableClick @click="showComment(params)" name="comment" size="40" :color="skinColor.color_white"></rd-icon>
				</view>
			</template>
		</yb-nav-bar>
		<music-panel :data="panelData" :visible.sync="panelShow"></music-panel>
		<yb-popup popout="fade" :visible.sync="infoShow" height="800rpx">
			<view class="info-desc" :style="{'background-color': skinColor.color_bg_2}">
				<text class="title" :style="{color: skinColor.color_actived_1}">{{typeText}}介绍</text>
				<scroll-view :show-scrollbar="false" style="flex: 1;" scroll-y="true" >
					<rich-text class="info-text" :nodes="infoDesc"></rich-text>
				</scroll-view>
				<rd-icon enableClick size="35":color="skinColor.color_2" name="fork" class="close" @click="infoShow = false"></rd-icon>
			</view>
		</yb-popup>
		<view class="fixed-bottom">
			<yb-button @click="playAlbum(list)" v-if="list.length > 0" class="button" title="播放全部" size="22" round />
		</view>
	</yb-page-anime>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	let that
	export default {
		mixins: [appMixin],
		data () {
			return {
				navOpac: 0,
				params: '',
				bgImage: '',
				loading: true,
				list: [],
				page: 1,
				size: 20,
				infoShow: false
			}
		},
		computed: {
			navBg () {
				let bg = getApp().globalData.$utils.hex2rgb(this.skinColor.color_theme_1);
				bg = bg.match(/rgb\((\S*)\)/)[1]
				bg = `rgba(${bg},${this.navOpac})`
				return bg
			},
			topDesc () {
				return [{
				    name: 'div',
					attrs: {
						style: 'color: #fff'
					},
				    children: [{
				        type: 'text',
						text: this.params.desc || '热门推荐'
				    }]
				}]
			},
			infoDesc () {
				return [{
				    name: 'div',
					attrs: {
						style: `color: ${this.skinColor.color_3};`
					},
				    children: [{
				        type: 'text',
						text: this.params.desc || '热门推荐'
				    }]
				}]
			},
			typeText () {
				return this.params.type == 'singer' ? '歌手' : this.params.type == 'top' ? '排行榜' : '专辑'
			},
			title () {
				return this.params.type == 'banner' && !this.params.title ? '独家首发' : this.params.title
			},
			max () {
				return this.page * this.size
			},
			isLastPage () {
				return this.max >= this.list.length
			}
		},
		onLoad () {
			that = this
			this.params = JSON.parse(decodeURIComponent(getApp().globalData.$Route.query.params))
		},
		onReady() {
			if ( this.params.song.length == 0 && this.params.source != 'local' ) {
				if ( this.params.type == 'singer' ) {
					this.getSingerDetail().then(data => {
						this.loading = false
						this.list = data.list
						this.params.desc = data.desc
					})
				} else if ( this.params.type == 'top' ) {
					this.getTopDetail().then(list => {
						this.loading = false
						this.list = list
					})
				} else if ( this.params.type == 'banner' ) {
					this.getBannerDetail().then(list => {
						this.loading = false
						this.list = list
					})
				} else if ( this.params.type == 'album' ) {
					this.getAlbumDetail().then(list => {
						this.loading = false
						this.list = list
					})
				} else {
					this.getNewAlbumDetail().then(list => {
						this.loading = false
						this.list = list
					})
				}
			} else {
				this.loading = false
				this.list = this.params.song
			}
		},
		methods: {
			onScroll (e) {
				this.navOpac = (Math.abs(e.contentOffset.y) / 150) > 1 ? 1 : (Math.abs(e.contentOffset.y) / 150)
			},
			pullup () {
				this.page++
				if ( !this.isLastPage ) {
					setTimeout(() => {
						this.$refs.list.resetLoadmore()
					}, 100)
				}
			},
			async getSingerDetail () {
				return await getApp().globalData.$api.music.getSingerDetail({
					id: this.params.singerId,
					source: this.params.source,
					extra: this.params.extra
				}).then((res) => {
					return {
						desc: res.data.desc || '',
						list: res.data.list
					}
				}).catch(() => {
					return {
						desc: '',
						list: []
					}
				})
			},
			async getTopDetail () {
				return await getApp().globalData.$api.music.getTopDetail({
					id: this.params.albumId,
					source: this.params.source,
					extra: this.params.extra
				}).then((res) => {
					// this.isLastPage = this.source == 'qqmusic' ? true : res.data.list.length > 0 ? false : true
					return res.data.list
				}).catch(() => {
					return []
				})
			},
			async getBannerDetail () {
				return await getApp().globalData.$api.music.getBannerDetail({
					id: this.params.albumId,
					source: this.params.source,
					extra: this.params.extra
				}).then((res) => {
					// this.isLastPage = this.source == 'qqmusic' ? true : res.data.list.length > 0 ? false : true
					return res.data.list
				}).catch(() => {
					return []
				})
			},
			async getAlbumDetail () {
				return await getApp().globalData.$api.music.getAlbumDetail({
					id: this.params.albumId,
					source: this.params.source,
					extra: this.params.extra
				}).then((res) => {
					// this.isLastPage = this.source == 'qqmusic' ? true : res.data.list.length > 0 ? false : true
					return res.data.list
				}).catch(() => {
					return []
				})
			},
			async getNewAlbumDetail () {
				return await getApp().globalData.$api.music.getNewAlbumDetail({
					id: this.params.albumId,
					source: this.params.source,
					extra: this.params.extra
				}).then((res) => {
					// this.isLastPage = this.source == 'qqmusic' ? true : res.data.list.length > 0 ? false : true
					return res.data.list
				}).catch(() => {
					return []
				})
			},
			allToAlbum (songs) {
				let list = this.$store.getters['custom/get'].filter(item => item.type == 'album')
				if ( list.length == 0 ) {
					this.app.$nativeUI.alert({
						title: '友情提示',
						content: '未创建自定义歌单',
						dark: this.skinMode == 'night'
					})
				} else {
					this.app.$modules.showActionSheet({
						title: '选择歌单',
						itemList: list.map(item => item.title),
						success: (res) => {
							if ( res.confirm ) {
								songs.forEach(song => {
									let index = list[res.data.index].song.findIndex(item => item.id == song.id)
									if ( index == -1 ) {
										list[res.data.index].song.push(song)
									}
								})
								this.$store.dispatch('custom/add', list[res.data.index])
								uni.showToast({
									title: '所有歌曲已加入歌单',
									icon: 'none'
								})
							}
						}
					})
				}
			}
		},
		onBackPress (e) {
			if ( e.from == 'backbutton' && that.infoShow ) {
				if ( that.infoShow ) {
					that.infoShow = false
					return true
				}
			}
			return false
		}
	}
</script>

<style scoped>
	@import url("@/assets/css/app.css");
	.detail {
		position: relative;
	}
	.nav-bar {
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
	}
	.collection {
		flex-direction: row;
		align-items: center;
		margin-right: 10rpx;
	}
	.top {
		height: 490rpx;
	}
	.top .bg {
		position: absolute;
		left: 0;
		top: 0;
		bottom: 0;
		right: 0;
	}
	.top .info {
		flex-direction: row;
		padding: 0 50rpx;
		margin-top: 20rpx;
	}
	.top .info .cover {
		width: 200rpx;
		height: 200rpx;
	}
	.top .info .info-right {
		flex: 1;
		margin-left: 20rpx;
	}
	.top .info .desc {
		font-size: 26rpx;
		lines: 6;
		text-overflow: ellipsis;
	}
	.top .info .more {
		font-size: 26rpx;
	}
	.top .play-line {
		align-items: center;
		justify-content: center;
		flex: 1;
	}
	.top .play {
		width: 170rpx;
		height: 50rpx;
	}
	
	.info-desc {
		border-top-left-radius: 40rpx;
		border-top-right-radius: 40rpx;
		flex: 1;
		position: relative;
	}
	.info-desc .title {
		font-size: 26rpx;
		text-align: center;
		margin: 30rpx 0;
	}
	.info-desc .info-text {
		font-size: 26rpx;
		line-height: 50rpx;
		padding: 0 40rpx;
	}
	.info-desc .close {
		position: absolute;
		right: 30rpx;
		top: 30rpx;
	}
</style>
