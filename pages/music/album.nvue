<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<yb-nav-bar :bgColor="skinColor.color_theme_1" :frontColor="skinColor.color_4" :title="title + ' - 新碟'"></yb-nav-bar>
		<yb-swiper-list
		:column="tabs.length < 6 ? tabs.length : 'auto'"
		:tabs="tabs"
		@change="changeTab"
		:frontColor="skinColor.color_2"
		:borderColor="skinColor.color_3"
		:activedColor="skinColor.color_actived_1">
			<template v-slot="{swiperSlot}">
				<list v-if="list[swiperSlot.index].child.length > 0">
					<yb-pulldown :ref="'pulldown_' + swiperSlot.index" :color="skinColor.color_1" @pulldown="pulldown(swiperSlot.index)"></yb-pulldown>
					<cell>
						<yb-gap height="30rpx"></yb-gap>
					</cell>
					<cell v-for="(item, index) in list[swiperSlot.index].child">
						<view class="cell-item_1 padding-gap" @tap="app.$Router.push({
							path: '/pages/music/detail',
							query: {
								params: encodeURIComponent(JSON.stringify(item))
							}
						})">
							<rd-image lazyLoad border-radius="12" class="cover" :src="item.cover" mode="aspectFill"></rd-image>
							<view class="info">
								<text class="title" :style="{color: skinColor.color_1}">{{item.title}}</text>
								<text class="label" :style="{color: skinColor.color_3}">{{item.creator}}</text>
							</view>
						</view>
					</cell>
					<cell v-if="list[swiperSlot.index].isLastPage && list[swiperSlot.index].child.length > 0">
						<yb-no-more :color="skinColor.color_3"></yb-no-more>
					</cell>
					<yb-pullup :ref="'pullup_' + swiperSlot.index" :color="skinColor.color_1" @pullup="pullup(swiperSlot.index)"></yb-pullup>
				</list>
				<view class="loading" v-else>
					<yb-loading :color="skinColor.color_3" size="70" title="加载中" v-if="list[swiperSlot.index].loading" /></yb-loading>
					<yb-no-data title="暂无数据" v-if="list[swiperSlot.index].child.length == 0 && !list[swiperSlot.index].loading" /></yb-no-data>
				</view>
			</template>
		</yb-swiper-list>
	</yb-page-anime>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	export default {
		mixins: [appMixin],
		data () {
			return {
				list: [],
				tabs: [],
				current: 0
			}
		},
		computed: {
			source () {
				return getApp().globalData.$Route.query.source
			},
			title () {
				return getApp().globalData.$Route.query.title
			}
		},
		onReady() {
			this.getType().then(status => {
				if ( status ) {
					let list = []
					this.tabs.forEach(tab => {
						list.push({
							loading: true,
							isLastPage: false,
							currentPage: 1,
							child: []
						})
					})
					this.list = list
					this.getList(0).then(list => {
						this.list[0].loading = false
						this.list[0].child = list
						this.list[0].isLastPage ? this.$refs['pullup_0'].finish() : this.$refs['pullup_0'].success()
					})
				}
			})
		},
		methods: {
			changeTab (e) {
				this.current = e.current
				if ( this.list[this.current].child.length == 0 ) {
					this.getList(this.current).then(list => {
						this.list[this.current].loading = false
						this.list[this.current].child = list
						this.list[this.current].isLastPage ? this.$refs['pullup_' + this.current].finish() : this.$refs['pullup_' + this.current].success()
					})
				}
			},
			pulldown (index) {
				this.list[index].currentPage = 1
				this.getList(index).then(list => {
					this.list[index].child = list
					this.$refs['pulldown_' + index].success()
				})
			},
			pullup (index) {
				this.list[index].currentPage++;
				this.getList(index).then(list => {
					this.list[index].child = this.list[index].child.concat(list)
					this.list[index].isLastPage ? this.$refs['pullup_' + index].finish() : this.$refs['pullup_' + index].success()
				})
			},
			async getList (index) {
				return await getApp().globalData.$api.music.getNewAlbumList({
					source: this.source,
					page: this.list[index].currentPage,
					typeId: this.tabs[index].value
				}).then((res) => {
					if ( res.code == getApp().globalData.$config.ERR_OK ) {
						this.list[index].isLastPage = res.data.list.length > 0 ? false : true
						return res.data.list
					}
					return[]
				})
			},
			async getType () {
				return await getApp().globalData.$api.music.getNewAlbumType({source: this.source}).then((res) => {
					if ( res.code == getApp().globalData.$config.ERR_OK ) {
						let tabs = []
						res.data.list.forEach(item => {
							tabs.push({
								label: item.title,
								value: item.typeId,
								source: item.source
							})
						})
						this.tabs = tabs
					}
					return this.tabs.length > 0
				})
			}
		}
	}
</script>

<style scoped>
	@import url("@/assets/css/app.css");
	.loading {
		flex: 1;
		align-items: center;
		justify-content: center;
	}
</style>
