<template>
	<view class="player" :style="{'background-color': skinColor.color_black}" @touchmove.stop.prevent="">
		<view class="background">
			<rd-image v-if="bgShow" style="opacity: 0.7;" class="bgImage" enable-blur :src="cdImage" mode="aspectFill"></rd-image>
		</view>
		<view class="wrapper">
			<yb-gap-bar></yb-gap-bar>
			<view class="top" ref="top">
				<view class="back" @tap="hide">
					<music-icon class="back-icon" name="back" size="40" :color="skinColor.color_white"></music-icon>
				</view>
				<view class="title">
					<text @tap="changeSkin" class="subtitle music-name" :style="{color: skinColor.color_white}">{{song ? song.title : '暂无歌曲'}}</text>
					<text class="subtitle singer-name" :style="{color: skinColor.color_white}">{{song ? song.singer : '未知歌手'}}</text>
				</view>
			</view>
			<swiper class="swiper" :indicator-dots="true" :indicator-active-color="skinColor.color_white" :duration="500">
				
				<!-- cd封面 -->
				<swiper-item>
					<view class="swiper-item">
						<view class="cd-wrapper">
							<view class="cd" elevation="5" ref="cd">
								<rd-image :style="{transform: 'rotateZ(' + this.cdRotate + 'deg)'}" style="flex: 1;" borderRadius="600" defaultSrc="/static/music/music-bg.jpg" :src="cdImage" mode="aspectFill"></rd-image>
								<view class="circle">
									<view class="opac"></view>
								</view>
							</view>
						</view>
						<view class="lyric-lines" ref="lyricLines">
							<text class="lyric-line-text" :style="{color: skinColor.color_white}">{{lyricNowTitle}}</text>
						</view>
					</view>
				</swiper-item>
				
				<!-- 歌词 -->
				<swiper-item>
					<view class="swiper-item" ref="lyric">
						<scroll-view v-if="lyric.length > 0" :scroll-into-view="'lyric-line-' + (lyricNowIndex - 6 <= 0 ? 0 : lyricNowIndex - 6)" scroll-y="true" scroll-with-animation class="lyric-list">
							<text
							v-for="(item, index) in lyric"
							class="lyric-line-text"
							:id="'lyric-line-' + index"
							:style="{color: lyricNowIndex == index ? skinColor.color_red : skinColor.color_white}">{{item.title}}</text>
						</scroll-view>
						<view class="no-lyric" v-else>
							<text class="lyric-line-text" :style="{color: lyricNowIndex == index ? skinColor.color_red : skinColor.color_white}">{{song ? song.title : '暂无歌曲'}}</text>
						</view>
					</view>
				</swiper-item>
			</swiper>
			<view class="control" ref="control">
				<view class="progress-line">
					<text class="progress-num" :style="{color: skinColor.color_white}">{{currentTime | minutesFormat}}</text>
					<yb-progress class="progress" :disabled="duration <= 1" :height="9" :itemSize="30" :activeColor="skinColor.color_red" :value="progress" @input="updateTime" itemShow></yb-progress>
					<text class="progress-num" :style="{color: skinColor.color_white}">{{duration | minutesFormat}}</text>
				</view>
				<yb-gap height="40rpx"></yb-gap>
				<view class="control-line">
					<view class="control-box" @tap="changeMode">
						<music-icon name="sequence" size="50" :color="skinColor.color_white" v-if="playMode == 'round'"></music-icon>
						<music-icon name="loop" size="50" :color="skinColor.color_white" v-if="playMode == 'loop'"></music-icon>
						<music-icon name="random" size="50" :color="skinColor.color_white" v-if="playMode == 'random'"></music-icon>
					</view>
					<view class="control-box" @tap="prev">
						<music-icon name="prev" size="55" :color="skinColor.color_white"></music-icon>
					</view>
					<view class="control-box" @tap="playPause">
						<music-icon name="play" size="70" :color="skinColor.color_white" v-if="!playStatus"></music-icon>
						<music-icon name="pause" size="70" :color="skinColor.color_white" v-if="playStatus"></music-icon>
					</view>
					<view class="control-box" @tap="next">
						<music-icon name="next" size="55" :color="skinColor.color_white"></music-icon>
					</view>
					<view class="control-box" @tap="app.$Router.push({path: '/pages/music/playlist'})">
						<music-icon name="playlist" size="50" :color="skinColor.color_white"></music-icon>
					</view>
				</view>
				<yb-gap height="40rpx"></yb-gap>
				<view class="control-line">
					<view class="control-box">
					</view>
					<view class="control-box">
						<rd-icon v-if="isCache(song ? song.id : null) || (song ? song.source == 'local' : false)" enableClick @click="toShare" name="share-rect" size="50" :color="skinColor.color_white"></rd-icon>
						<rd-icon v-else enableClick @click="toDownload" name="download" size="50" :color="skinColor.color_white"></rd-icon>
					</view>
					<view class="control-box">
						<rd-icon enableClick @click="toCollection(song)" v-if="isCollection(song ? song.id : '')" name="love-fill" size="55" :color="skinColor.color_red"></rd-icon>
						<rd-icon enableClick v-else @click="toCollection(song)" name="love" size="55" :color="skinColor.color_white"></rd-icon>
					</view>
					<view class="control-box">
						<view class="lyric-box" @tap="switchLyricShow" :style="{'border-color': lyricShow ? skinColor.color_red : skinColor.color_white}">
							<text class="lyric-text" :style="{color: lyricShow ? skinColor.color_red : skinColor.color_white}">词</text>
						</view>
					</view>
					<view class="control-box">
						<rd-icon enableClick @click="showComment(song)" name="comment" size="55" :color="skinColor.color_white"></rd-icon>
					</view>
					<view class="control-box">
					</view>
				</view>
				<yb-gap></yb-gap>
			</view>
		</view>
	</view>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	import lyricMixin from '@/common/mixin/lyric.js';
	const animation = weex.requireModule('animation');
	export default {
		mixins: [appMixin, lyricMixin],
		data () {
			return {
				animaDuration: 400,
				delay: 200,
				cdRotate: 0,
				cdStart: 0,
				bgShow: false
			}
		},
		computed: {
			song () {
				return this.$store.getters['audio/getCurrentSong']
			},
			player () {
				return this.$store.getters['audio/getPlayer']
			},
			cdImage () {
				return this.song ? this.song.cover : '/static/music/music-bg.jpg'
			},
			playStatus () {
				return this.$store.getters['audio/getPlayStatus']
			},
			currentTime () {
				return this.$store.getters['audio/getCurrentTime']
			},
			duration () {
				return this.$store.getters['audio/getDuration']
			},
			progress () {
				return (this.currentTime / this.duration) * 100
			},
			playMode () {
				return this.$store.getters['audio/getPlayMode']
			}
		},
		onReady() {
			this.show();
		},
		filters: {
			minutesFormat (value) {
				return getApp().globalData.$utils.minutesFormat(value);
			}
		},
		methods: {
			//更新时间
			updateTime (percent) {
				this.player.instance.seek(Math.ceil(((percent / 100) * this.duration)));
			},
			//改变播放模式
			changeMode () {
				this.$store.dispatch('audio/switchPlayMode')
			},
			// 下一曲
			next () {
				this.player ? this.$store.dispatch('audio/next') : uni.showToast({
					title: '没有歌曲在播放',
					icon: 'none'
				})
			},
			// 上一曲
			prev () {
				this.player ? this.$store.dispatch('audio/prev') : uni.showToast({
					title: '没有歌曲在播放',
					icon: 'none'
				})
			},
			//播放和暂停
			playPause () {
				this.player ? this.player.instance.paused ? this.player.instance.play() : this.player.instance.pause() : uni.showToast({
					title: '没有歌曲在播放',
					icon: 'none'
				})
			},
			//切换歌词显示
			switchLyricShow () {
				this.$store.dispatch('audio/switchLyricShow')
			},
			toDownload () {
				if ( this.song ) {
					const song = {...this.song}
					song.src = this.player.src
					this.download(song)
				}
			},
			toShare () {
				if ( this.song ) {
					if ( this.song.source == 'local' ) {
						this.app.$business.share(this.song.src)
					} else {
						const caches = this.$store.getters['cache/getCache']
						const index = caches.findIndex(cache => cache.parentId == this.song.id)
						index > -1 ? this.app.$business.share(caches[index].src) : null
					}
				}
			},
			show () {
				animation.transition(this.$refs.top, {
				    styles: {
						transform: 'translateY(0)',
						opacity: 1
				    },
				    duration: this.animaDuration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: this.delay //ms
				})
				animation.transition(this.$refs.control, {
				    styles: {
						transform: 'translateY(0)',
						opacity: 1
				    },
				    duration: this.animaDuration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: this.delay //ms
				})
				animation.transition(this.$refs.lyricLines, {
				    styles: {
						opacity: 1
				    },
				    duration: this.animaDuration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: this.delay //ms
				})
				animation.transition(this.$refs.cd, {
				    styles: {
						transform: 'scale(1.1)',
						opacity: 1
				    },
				    duration: this.animaDuration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				}, () => {
					animation.transition(this.$refs.cd, {
					    styles: {
							transform: 'scale(1)'
					    },
					    duration: this.animaDuration / 2, //ms
					    timingFunction: 'ease',
					    needLayout:false,
					    delay: 0 //ms
					}, () => {
						if ( this.playStatus ) {
							this.startRotate();
						}
						this.bgShow = true
					})
				})
			},
			hide () {
				this.stopRotate();
				animation.transition(this.$refs.top, {
				    styles: {
						transform: 'translateY(-70rpx)',
						opacity: 0
				    },
				    duration: this.animaDuration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.control, {
				    styles: {
						transform: 'translateY(300rpx)',
						opacity: 0
				    },
				    duration: this.animaDuration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.lyric, {
				    styles: {
						opacity: 0
				    },
				    duration: this.animaDuration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.lyricLines, {
				    styles: {
						opacity: 0
				    },
				    duration: this.animaDuration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				animation.transition(this.$refs.cd, {
				    styles: {
						transform: 'scale(0)',
						opacity: 0
				    },
				    duration: this.animaDuration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				}, () => {
					getApp().globalData.$Router.back();
					uni.$emit('scircle')
				})
			},
			//旋转cd封面
			startRotate () {
				this.cdStart = 2;
				this.cdRotate += 0.2;
				if ( this.cdRotate > 360 ) {
					this.cdRotate = 0;
				}
				if ( this.cdTimer ) {
					clearTimeout(this.cdTimer);
				}
				this.cdTimer = setTimeout(() => {
					if ( this.cdStart == 1 ) {
						clearTimeout(this.cdTimer);
						this.cdTimer = null;
						return false;
					}
					this.startRotate();
				}, 20)
			},
			//停止旋转cd封面
			stopRotate () {
				this.cdStart = 1;
			},
			showPlayList () {
				getApp().globalData.$Router.push({
					animationType: 'fade-in',
					path: '/pages/music/index',
				});
			}
		},
		beforeDestroy () {
			this.stopRotate()
			clearTimeout(this.cdTimer);
			this.cdTimer = null;
		},
		watch: {
			playStatus (val) {
				if ( val ) {
					this.startRotate()
				} else {
					this.stopRotate()
				}
			}
		},
		onBackPress (event) {
			if ( event.from == 'backbutton' ) {
				this.hide();
				return true;
			}
			return false
		}
	}
</script>

<style scoped>
	.player {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.player .background {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.player .background .bgImage {
		flex: 1;
	}
	.player .wrapper {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.player .top {
		flex-direction: row;
		height: 70rpx;
		position: relative;
		transform: translateY(-70rpx);
		opacity: 0;
	}
	.player .back {
		width: 80rpx;
		align-items: center;
	}
	.player .back-icon {
		transform: rotateZ(-90deg);
	}
	.player .title {
		position: absolute;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
		flex: 1;
		align-items: center;
		justify-content: space-between;
		padding: 0 100rpx;
	}
	.player .right {
		position: absolute;
		right: 15rpx;
		top: 0;
		flex-direction: row;
		height: 40rpx;
		align-items: flex-end;
	}
	.player .tr-icon {
		margin-left: 20rpx;
	}
	.player .subtitle {
		lines: 1;
		text-overflow: ellipsis;
	}
	.player .music-name {
		font-size: 30rpx;
	}
	.player .singer-name {
		font-size: 22rpx;
	}
	.player .swiper {
		flex: 1;
	}
	.player .swiper-item {
		flex: 1;
	}
	.player .cd-wrapper {
		padding: 40rpx;
		align-items: center;
		position: relative;
		flex: 1;
	}
	.player .lyric-lines {
		margin: 30rpx 0 60rpx 0;
		opacity: 0;
	}
	.player .cd {
		width: 600rpx;
		height: 600rpx;
		border-radius: 600rpx;
		opacity: 0;
		transform: scale(0);
		position: relative;
	}
	.player .cd .circle {
		position: absolute;
		width: 300rpx;
		height: 300rpx;
		border-radius: 300rpx;
		left: 150rpx;
		top: 150rpx;
		background-color: #000000;
		align-items: center;
		justify-content: center;
	}
	.player .cd .circle .opac {
		width: 150rpx;
		height: 150rpx;
		border-radius: 150rpx;
		background-color: rgba(255,255,255,0.6);
		border: 10rpx solid #222;
	}
	.player .control {
		padding: 20rpx 40rpx;
		height: 350rpx;
		transform: translateY(300rpx);
		opacity: 0;
	}
	.player .progress-line {
		padding: 20rpx 20rpx;
		flex-direction: row;
		align-items: center;
	}
	.player .progress {
		flex: 1;
	}
	.player .progress-num {
		width: 100rpx;
		font-size: 24rpx;
		text-align: center;
	}
	.player .control-line {
		flex-direction: row;
		justify-content: space-between;
		padding: 0 40rpx;
		align-items: center;
	}
	.player .lyric-box {
		width: 55rpx;
		height: 55rpx;
		border-width: 4.2rpx;
		border-radius: 55rpx;
		align-items: center;
		justify-content: center;
	}
	.player .lyric-text {
		font-size: 30rpx;
	}
	.player .lyric-list {
		margin: 60rpx 0 95rpx 0;
		flex: 1;
	}
	.player .lyric-line-text {
		text-align: center;
		font-size: 30rpx;
		margin: 10rpx 0;
		lines: 3;
		text-overflow: ellipsis;
	}
	.player .no-lyric {
		flex: 1;
		align-items: center;
		justify-content: center;
	}
</style>
