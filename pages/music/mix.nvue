<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<yb-nav-bar :bgColor="skinColor.color_theme_1" :frontColor="skinColor.color_4" :title="title + ' - 歌单'">
			<template slot="right">
				<view class="rd-nav-right">
					<rd-icon enableClick class="opac-actived" name="more-horizontal" size="36" :color="skinColor.color_4" @click="dropShow = true"></rd-icon>
				</view>
			</template>
		</yb-nav-bar>
		<list>
			<yb-pulldown v-if="!loading" ref="pulldown" @pulldown="pulldown"></yb-pulldown>
			<cell>
				<yb-gap ref="listTop" height="30rpx"></yb-gap>
			</cell>
			<cell v-for="(item, index) in list">
				<view class="cell-item_1 padding-gap" @tap="app.$Router.push({
					path: '/pages/music/detail',
					query: {
						params: encodeURIComponent(JSON.stringify(item))
					}
				})">
					<rd-image lazyLoad border-radius="12" class="cover" :src="item.cover" mode="aspectFill"></rd-image>
					<view class="info">
						<text class="title" :style="{color: skinColor.color_1}">{{item.title}}</text>
						<text class="label" :style="{color: skinColor.color_3}">{{item.creator}}</text>
					</view>
				</view>
			</cell>
			<yb-page-anime-fixed>
				<yb-list-loading :color="skinColor.color_3" size="70" v-if="loading" title="加载中"></yb-list-loading>
				<yb-list-no-data :color="skinColor.color_3" v-if="list.length == 0 && !loading"></yb-list-no-data>
			</yb-page-anime-fixed>
			<cell v-if="isLastPage && list.length > 0">
				<yb-no-more :color="skinColor.color_3"></yb-no-more>
			</cell>
			<yb-pullup ref="pullup" :color="skinColor.color_1" @pullup="pullup" v-if="!isLastPage"></yb-pullup>
		</list>
		<yb-filter-menu
		:visible.sync="dropShow"
		:bgColor="skinColor.color_bg_1"
		:frontColor="skinColor.color_1"
		:gapColor="skinColor.color_gap_1"
		mode="single"
		type="square"
		title="选择类型"
		:data="type" @change="changeType" :height="670"></yb-filter-menu>
	</yb-page-anime>
</template>

<script>
	const dom = weex.requireModule('dom');
	import appMixin from '@/common/mixin/app.js';
	export default {
		mixins: [appMixin],
		data () {
			return {
				loading: true,
				list: [],
				dropShow: false,
				type: [],
				currentPage: 1,
				isLastPage: false,
				typeId: ''
			}
		},
		computed: {
			title () {
				return getApp().globalData.$Route.query.title
			},
			source () {
				return getApp().globalData.$Route.query.source
			}
		},
		onReady() {
			this.getType().then(status => {
				this.typeId = this.type[0].child[0].value
				this.type[0].child[0].isChecked = true
				this.getList().then(data => {
					this.loading = false
					this.list = data.list
					this.isLastPage = data.isLastPage
				})
			})
		},
		methods: {
			pulldown () {
				this.currentPage = 1
				this.getList().then(data => {
					this.list = data.list
					this.$refs.pulldown.success()
				})
			},
			pullup () {
				this.currentPage++;
				this.getList().then(data => {
					this.list = this.list.concat(data.list)
					data.isLastPage ? this.$refs.pullup.finish() : this.$refs.pullup.success()
					this.isLastPage = data.isLastPage
					this.currentPage = data.currentPage
				})
			},
			async getList () {
				return await getApp().globalData.$api.music.getDiscList({
					page: this.currentPage,
					typeId: this.typeId,
					source: this.source
				}).then((res) => {
					return {
						list: res.data.list,
						isLastPage: res.data.isLastPage,
						currentPage: res.data.currentPage
					}
				})
			},
			async getType () {
				return await getApp().globalData.$api.music.getDiscType({source: this.source}).then((res) => {
					let type = []
					if ( res.code == getApp().globalData.$config.ERR_OK ) {
						type = res.data.list.map(data => {
							const item = data.child.map(child => {
								return Object.assign({}, child, {
									isChecked: false
								})
							})
							return {
								label: data.label,
								child: item
							}
						})
					}
					this.type = type
					return type.length > 0
				})
			},
			changeType (e) {
				Object.keys(this.type).forEach(key => {
					Object.keys(this.type[key].child).forEach(ckey => {
						this.type[key].child[ckey].isChecked = false
					})
				})
				const index = this.type[e.current].child.findIndex(item => item.value == e.results.value)
				index > -1 ? this.type[e.current].child[index].isChecked = true : null
				this.typeId = e.results.value
				this.currentPage = 1
				this.loading = true
				this.list = []
				setTimeout(() => {
					this.getList().then(data => {
						this.loading = false
						this.list = data.list
						this.isLastPage = data.isLastPage
						this.scrollTop()
					})
				}, 500)
			},
			scrollTop () {
				dom.scrollToElement(this.$refs.listTop, {animated: false});
			}
		}
	}
</script>

<style>
	@import url("@/assets/css/app.css");
</style>
