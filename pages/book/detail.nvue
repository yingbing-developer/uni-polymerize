<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<list @scroll="onScroll">
			<cell>
				<view class="top">
					<rd-image lazyLoad class="bg" enable-blur default-src="/static/cover/cover_default.jpg" :src="params.cover" mode="aspectFill" v-if="isShowCover"></rd-image>
					<yb-mask color="rgba(0,0,0,0.2)"></yb-mask>
					<yb-nav-bar :backShow="false" bgColor="rgba(0,0,0,0)"></yb-nav-bar>
					<view class="info">
						<rd-image lazyLoad class="cover" default-src="/static/cover/cover_default.jpg" :src="params.cover" mode="aspectFill"></rd-image>
						<view class="info-right">
							<text class="title" :style="{color: skinColor.color_white}">{{params.title}}</text>
							<text class="label" :style="{color: skinColor.color_white}">作者：{{params.author}} / 著</text>
							<text class="label" :style="{color: skinColor.color_white}">类型：{{params.style || '未知类型'}}</text>
							<text class="label" :style="{color: skinColor.color_white}" v-if="params.size">大小：{{params.size}}</text>
							<text class="label" :style="{color: skinColor.color_white}">状态：{{params.isEnd ? '已完结' : '连载中'}}</text>
							<text class="label" :style="{color: skinColor.color_white}">来源：{{filterSource(params.source)}}</text>
							<view class="line">
								<view class="opac-actived" @tap="searchTo(tag)"  v-for="(tag, i) in params.tag" :key="i" style="margin-right: 10rpx;margin-bottom: 10rpx;">
									<yb-tag :color="skinColor.color_white" :value="tag"></yb-tag>
								</view>
							</view>
						</view>
					</view>
				</view>
			</cell>
			<cell>
				<view class="tabs">
					<view class="tab opac-actived" @tap="toShelf(params)">
						<rd-icon name="bookshelf-fill" size="26" :color="skinColor.color_green"></rd-icon>
						<text class="text" :style="{color: skinColor.color_green}">书单</text>
					</view>
					<view class="tab center opac-actived" :style="{'border-color': skinColor.color_green}" @tap="toCollection(params)">
						<rd-icon name="love-fill" size="30" :color="skinColor.color_red" v-if="isCollection(params.id)"></rd-icon>
						<rd-icon name="love" size="30" :color="skinColor.color_green" v-else></rd-icon>
						<text class="text" :style="{color: skinColor.color_green}">收藏</text>
					</view>
					<view class="tab opac-actived" @tap="showComment(params)">
						<rd-icon name="comment" size="30" :color="skinColor.color_green"></rd-icon>
						<text class="text" :style="{color: skinColor.color_green}">评论</text>
					</view>
				</view>
				<view class="box">
					<view class="column" :style="{'border-color': skinColor.color_2}">
						<text class="text" :style="{color: skinColor.color_1}">简介</text>
					</view>
					<text class="desc" :style="{color: skinColor.color_2}">{{params.desc || '暂无简介'}}</text>
				</view>
				<yb-gap height="10rpx" :color="skinColor.color_gap_1"></yb-gap>
			</cell>
			<cell v-if="record">
				<view class="box">
					<view class="column" :style="{'border-color': skinColor.color_2}">
						<text class="text" :style="{color: skinColor.color_1}">正在阅读</text>
						<view class="more opac-actived" @tap="deleteRecord">
							<rd-icon name="dustbin" size="30" :color="skinColor.color_2"></rd-icon>
						</view>
					</view>
					<view class="chapter" @tap="createReader(record.chapter)" :class="skinMode + '-actived'">
						<text class="label" :style="{color: skinColor.color_1}">{{record.title}}</text>
						<rd-icon name="arrow-right" size="30" :color="skinColor.color_2"></rd-icon>
					</view>
				</view>
				<yb-gap height="10rpx" :color="skinColor.color_gap_1"></yb-gap>
			</cell>
			<cell>
				<view class="box">
					<view class="column" :style="{'border-color': skinColor.color_2}">
						<text class="text" :style="{color: skinColor.color_1}">最新章节</text>
						<view class="more opac-actived" v-if="params.updateTime">
							<text class="text" :style="{color: skinColor.color_2}">（更新时间：{{params.updateTime}}）</text>
						</view>
					</view>
					<view class="chapter" @tap="createReader(item.chapter)" :class="skinMode + '-actived'" v-for="(item, index) in chapters.filter(cha => cha.id).slice(-5).reverse()" :key="index">
						<rd-icon class="icon" name="lock" :color="skinColor.color_orange" size="30" v-if="item.payread"></rd-icon>
						<text class="label" :style="{color: skinColor.color_1}">{{item.title}}</text>
						<rd-icon name="arrow-right" size="30" :color="skinColor.color_2"></rd-icon>
					</view>
				</view>
				<yb-gap height="10rpx" :color="skinColor.color_gap_1"></yb-gap>
			</cell>
			<cell>
				<view class="box">
					<view class="column" :style="{'border-color': skinColor.color_2}">
						<text class="text" :style="{color: skinColor.color_1}">目录</text>
						<view class="more opac-actived" @tap="chapterShow = true">
							<text class="text" :style="{color: skinColor.color_2}">共{{chapters.filter(ca => ca.chapter).length}}章</text>
							<rd-icon name="arrow-right" size="30" :color="skinColor.color_2"></rd-icon>
						</view>
					</view>
					<view v-for="(item, index) in chapters.slice(0, 10)" :key="index">
						<template v-if="item.id">
							<view class="chapter" :class="skinMode + '-actived'" @tap="createReader(item.chapter)">
								<rd-icon class="icon" name="lock" :color="skinColor.color_orange" size="30" v-if="item.payread"></rd-icon>
								<text class="label" :style="{color: skinColor.color_1}">{{item.title}}</text>
								<rd-icon name="arrow-right" size="30" :color="skinColor.color_2"></rd-icon>
							</view>
						</template>
						<template v-else>
							<rd-type gap="20rpx" :title="item.title"></rd-type>
						</template>
					</view>
				</view>
				<yb-gap height="10rpx" :color="skinColor.color_gap_1"></yb-gap>
			</cell>
			<cell v-if="guess.length > 0">
				<view class="box">
					<view class="column" :style="{'border-color': skinColor.color_2}">
						<text class="text" :style="{color: skinColor.color_1}">猜你喜欢</text>
					</view>
					<yb-gap></yb-gap>
					<yb-grid :data="guess" :column="4">
						<template v-slot="{gridItem}">
							<view class="grid_item_1" @tap="app.$Router.push({
								path: '/pages/book/detail',
								query: {
									params: encodeURIComponent(JSON.stringify(gridItem.detail))
								}
							})">
								<view elevation="3">
									<rd-image lazyLoad class="cover" :src="gridItem.detail.cover" mode="aspectFill"></rd-image>
								</view>
								<text class="title" :style="{color: skinColor.color_1}">{{gridItem.detail.title}}</text>
							</view>
						</template>
					</yb-grid>
				</view>
				<yb-gap height="10rpx" :color="skinColor.color_gap_1"></yb-gap>
			</cell>
			<cell v-if="sames.length > 0">
				<view class="box">
					<view class="column" :style="{'border-color': skinColor.color_2}">
						<text class="text" :style="{color: skinColor.color_1}">同类推荐</text>
					</view>
					<yb-gap></yb-gap>
					<view
					v-for="(item, index) in sames" :key="item.id"
					class="cell-item_5 opac-actived"
					@tap="app.$Router.push({
						path: '/pages/book/detail',
						query: {
							params: encodeURIComponent(JSON.stringify(item))
						}
					})"
					:style="{'border-bottom-color': skinColor.color_gap_1, 'background-color': skinColor.color_bg_1}">
						<text class="label" :style="{color: skinColor.color_3}">{{item.style}}</text>
						<text class="title" :style="{color: skinColor.color_1}">{{(item.style ? ' | ' : '') + item.title}}</text>
						<text class="value" :style="{color: skinColor.color_3}">{{filterSource(item.source)}}</text>
					</view>
				</view>
				<yb-gap height="10rpx" :color="skinColor.color_gap_1"></yb-gap>
			</cell>
			<cell v-if="other.length > 0">
				<view class="box">
					<view class="column" :style="{'border-color': skinColor.color_2}">
						<text class="text" :style="{color: skinColor.color_1}">其它作品</text>
					</view>
					<yb-gap></yb-gap>
					<view
					v-for="(item, index) in other" :key="item.id"
					class="cell-item_5 opac-actived"
					@tap="app.$Router.push({
						path: '/pages/book/detail',
						query: {
							params: encodeURIComponent(JSON.stringify(item))
						}
					})"
					:style="{'border-bottom-color': skinColor.color_gap_1, 'background-color': skinColor.color_bg_1}">
						<text class="label" :style="{color: skinColor.color_3}">{{item.style || item.author}}</text>
						<text class="title" :style="{color: skinColor.color_1}"> | {{item.title}}</text>
						<text class="value" :style="{color: skinColor.color_3}">{{filterSource(item.source)}}</text>
					</view>
				</view>
			</cell>
			<cell>
				<yb-gap height="120rpx" v-if="chapters.length > 0"></yb-gap>
			</cell>
		</list>
		<view class="bottom" :style="{'background-color': skinColor.color_green}" v-if="chapters.length > 0">
			<rd-icon name="read" size="90" :color="skinColor.color_white"></rd-icon>
			<text class="text" :style="{color: skinColor.color_white}">{{ record ? '从上次阅读位置开始' : '从开头位置开始'}}</text>
			<yb-button @click="createReader" maskMode="dark" :themeColor="skinColor.color_white" :frontColor="skinColor.color_green" class="btn" title="立即阅读"></yb-button>
		</view>
		<yb-nav-bar class="nav-bar" :title="title" :bg-color="navBg" front-color="#fff">
			<template slot="right">
				<view class="rd-nav-right">
					<rd-icon enableClick class="opac-actived" @click="copyTo(params.title)" name="copy-rect" size="35" :color="skinColor.color_white"></rd-icon>
					<view style="width: 10rpx;"></view>
					<rd-icon enableClick class="opac-actived" @click="searchTo(params.title)" name="search" size="35" :color="skinColor.color_white"></rd-icon>
				</view>
			</template>
		</yb-nav-bar>
		<rd-catalog :visible.sync="chapterShow" :catalog="chapters" @item-click="createReader($event.chapter)" :title="params.title" unit="章节"></rd-catalog>
	</yb-page-anime>
</template>

<script>
	import appMixin from '@/common/mixin/app.js';
	import Reader from '@/assets/constructor/reader.js';
	let that
	export default {
		mixins: [appMixin],
		data () {
			return {
				params: '',
				isShowCover: false,
				navOpac: 0,
				chapters: [],
				chapterShow: false,
				guess: [],
				sames: [],
				other: []
			}
		},
		computed: {
			navBg () {
				let bg = getApp().globalData.$utils.hex2rgb(this.skinColor.color_theme_1);
				bg = bg.match(/rgb\((\S*)\)/)[1]
				bg = `rgba(${bg},${this.navOpac})`
				return bg
			},
			title () {
				return this.params?.title || '书籍详情'
			},
			record () {
				let index = this.$store.getters['record/getRecord'].findIndex(record => record.id == this.params.id)
				return index > -1 ? this.$store.getters['record/getRecord'][index].record : null
			}
		},
		onLoad() {
			that = this
			this.params = JSON.parse(decodeURIComponent(getApp().globalData.$Route.query.params))
		},
		onReady() {
			uni.startPullDownRefresh()
		},
		onPullDownRefresh () {
			this.app.$api.book.getDetail({
				id: this.params.bookId,
				source: this.params.source,
				extra: this.params.extra
			}).then((res) => {
				uni.stopPullDownRefresh()
				if ( res.code == this.app.$config.ERR_OK ) {
					this.params.title = res.data.bookInfo.title || this.params.title
					this.params.commentId = res.data.bookInfo.commentId || this.params.commentId
					this.params.cover = res.data.bookInfo.cover || this.params.cover 
					this.params.author = res.data.bookInfo.author || this.params.author 
					this.params.style = res.data.bookInfo.style || this.params.style 
					this.params.size = res.data.bookInfo.size || this.params.size 
					this.params.desc = res.data.bookInfo.desc || this.params.desc 
					this.params.tag = res.data.bookInfo.tag.length > 0 ? res.data.bookInfo.tag : this.params.tag 
					this.params.createTime = res.data.bookInfo.createTime || this.params.createTime 
					this.params.updateTime = res.data.bookInfo.updateTime || this.params.updateTime
					this.params.lastChapter = res.data.bookInfo.lastChapter || this.params.lastChapter
					this.params.isEnd = res.data.bookInfo.isEnd || this.params.isEnd
					this.params.extra = res.data.bookInfo.extra || this.params.extra
					this.params.isAdult = res.data.bookInfo.isAdult || this.params.isAdult
					this.chapters = res.data.chapters || []
					this.guess = res.data.guess || []
					this.sames = res.data.sames || []
					this.other = res.data.other || []
					this.$nextTick(() => {
						this.isShowCover = true
					})
				}
			})
		},
		methods: {
			onScroll (e) {
				// this.navOpac = (e.detail.scrollTop / 150) > 1 ? 1 : (e.detail.scrollTop / 150)
				this.navOpac = (Math.abs(e.contentOffset.y) / 150) > 1 ? 1 : (Math.abs(e.contentOffset.y) / 150)
			},
			createReader (chapter) {
				if ( this.record && !chapter ) {
					chapter = this.record.chapter
				}
				if ( this.chapters[this.chapters.findIndex(ca => ca.chapter == (chapter || 1))].payread ) {
					this.app.$nativeUI.alert({
						title: '友情提示',
						content: '该章节需要付费或VIP才能阅读',
						dark: this.skinMode == 'night',
						themeColor: this.skinColor.color_blue
					})
					return
				}
				this.$store.dispatch('reader/init', new Reader({
					book: this.params,
					chapters: this.chapters
				}))
				this.app.$Router.push({
					path: this.params.type == 'story' ? '/pages/book/reader' : '/pages/comic/reader',
					query: {
						currentChapter: chapter || 1
					}
				})
			},
			copyTo (str) {
				uni.setClipboardData({
				    data: str,
				    success: () => {
				        uni.showToast({
				        	title: '已复制标题',
							icon: 'none'
				        })
				    },
					fail: () => {
						uni.showToast({
							title: '复制标题失败',
							icon: 'none'
						})
					}
				});
			},
			searchTo (keyword) {
				this.app.$Router.push({
					path: this.params.type == 'story' ? '/pages/book/search' : '/pages/comic/search',
					query: {
						keyword: keyword
					}
				})
			},
			toShelf (book) {
				let list = this.$store.getters['custom/get'].filter(item => item.type == 'book' && (!item.isAdult || this.$store.getters['app/getAdult']))
				if ( list.length == 0 ) {
					this.app.$nativeUI.alert({
						content: '未创建自定义书单',
						dark: this.skinMode == 'night'
					})
				} else {
					this.app.$modules.showActionSheet({
						title: '选择书单',
						itemList: list.map(item => item.title),
						success: (res) => {
							if ( res.confirm ) {
								let index = list[res.data.index].book.findIndex(item => item.id == book.id)
								if ( index > -1 ) {
									this.app.$nativeUI.alert({
										content: '这本书籍已经加入该书单中',
										dark: this.skinMode == 'night'
									})
								} else {
									list[res.data.index].book.push(book)
									this.$store.dispatch('custom/add', list[res.data.index])
									uni.showToast({
										title: '加入书单成功',
										icon: 'none'
									})
								}
							}
						}
					})
				}
			},
			deleteRecord () {
				this.app.$nativeUI.confirm({
					content: '确认要删除阅读记录吗？',
					dark: this.skinMode == 'night',
					themeColor: this.skinColor.color_blue,
					success: (res) => {
						if ( res.confirm ) {
							this.removeRecord(this.params)
						}
					}
				})
			}
		},
		onBackPress (event) {
			if ( that.chapterShow ) {
				that.chapterShow = false
				return true
			}
			return false
		}
	}
</script>

<style scoped>
	@import url("@/assets/css/app.css");
	.top .bg {
		position: absolute;
		left: 0;
		top: 0;
		bottom: 0;
		right: 0;
	}
	.top .info {
		flex-direction: row;
		align-items: flex-start;
		padding: 0 30rpx 20rpx 30rpx;
	}
	.top .info .cover {
		width: 160rpx;
		height: 220rpx;
	}
	.top .info .info-right {
		margin-left: 20rpx;
		flex: 1;
	}
	.top .info .line {
		margin-top: 10rpx;
		flex-direction: row;
		align-items: center;
		flex-wrap: wrap;
	}
	.top .info .title {
		font-size: 30rpx;
		font-weight: bold;
		lines: 2;
		text-overflow: ellipsis;
	}
	.top .info .label {
		font-size: 24rpx;
		margin-top: 10rpx;
		lines: 1;
		text-overflow: ellipsis;
	}
	.top .info .text {
		font-size: 24rpx;
	}
	.top .info .tags {
		flex-direction: row;
	}
	.nav-bar {
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
	}
	.tabs {
		flex-direction: row;
		align-items: center;
		padding: 0 40rpx;
		margin: 20rpx 0;
	}
	.tabs .center {
		border-left-width: 2rpx;
		border-right-width: 2rpx;
	}
	.tabs .tab {
		flex-direction: row;
		align-items: center;
		justify-content: center;
		flex: 1;
	}
	.tabs .tab .text {
		font-size: 24rpx;
		margin-left: 10rpx;
	}
	
	.box {
		padding: 30rpx;
	}
	.box .column {
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		border-left-width: 4rpx;
	}
	.box .column .more {
		flex-direction: row;
		align-items: center;
	}
	.box .column .more .text {
		font-size: 24rpx;
		margin-right: 5rpx;
	}
	.box .column .text {
		font-size: 26rpx;
		margin-left: 20rpx;
	}
	.box .desc {
		font-size: 26rpx;
		margin-top: 30rpx;
	}
	.box .chapter {
		flex-direction: row;
		align-items: center;
		margin-top: 30rpx;
		height: 50rpx;
	}
	.box .chapter .icon {
		margin-right: 10rpx;
	}
	.box .chapter .label {
		flex: 1;
		lines: 1;
		text-overflow: ellipsis;
		font-size: 28rpx;
	}
	
	.bottom {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		height: 120rpx;
		flex-direction: row;
		align-items: center;
		justify-content: flex-end;
		padding: 0 30rpx;
	}
	.bottom .btn {
		width: 200rpx;
		height: 60rpx;
	}
	.bottom .text {
		font-size: 26rpx;
		margin-right: 30rpx;
		flex: 1;
		text-align: right;
	}
</style>
