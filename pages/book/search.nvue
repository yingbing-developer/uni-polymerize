<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<rd-search placeholder="搜索小说" :keywords="keywords" :records="records" :value="keyword" @input="change" @clearRecord="clearRecord" @removeRecord="removeRecord">
			<view class="result" v-if="keyword" :style="{'background-color': skinColor.color_bg_1}">
				<list class="list" v-if="results.length > 0 && !loading">
					<cell><view ref="listTop"></view></cell>
					<cell v-for="(item, index) in results">
						<view class="cell-item_3"
						@tap="app.$Router.push({
							path: '/pages/book/detail',
							query: {
								params: encodeURIComponent(JSON.stringify(item))
							}
						})"
						:style="{
							'border-bottom-color': skinColor.color_gap_1,
							'background-color': skinColor.color_bg_1
						}">
							<view elevation="3">
								<rd-image lazyLoad class="cover" :src="item.cover" mode="aspectFill"></rd-image>
							</view>
							<view class="info">
								<text class="title" :style="{'color': skinColor.color_1}">{{item.title}}</text>
								<view class="subtitles">
									<text class="subtitle" :style="{
										'color': skinColor.color_3
									}">作者：{{item.author}}</text>
									<text class="subtitle" :style="{
										'color': skinColor.color_3
									}">题材：{{item.style || '未知题材'}}</text>
									<text class="subtitle" :style="{
										'color': skinColor.color_3
									}">来源：{{filterSource(item.source)}}</text>
								</view>
								<text class="desc" :style="{'color': skinColor.color_2}">简介：{{item.desc.replace(/\n/g, '') || '暂无简介'}}</text>
								<text class="tip" :style="{'color': skinColor.color_red}" v-if="item.lastChapter">更新至：{{item.lastChapter}}</text>
								<view class="badges" v-else>
									<yb-tag class="badge" :color="item.isEnd ? skinColor.color_green : skinColor.color_orange" :value="item.isEnd ? '已完结' : '连载中'"></yb-tag>
									<yb-tag class="badge" v-if="isRecord(item.id)" :color="skinColor.color_yellow" value="正在阅读中"></yb-tag>
									<yb-tag class="badge" v-if="isCollection(item.id)" :color="skinColor.color_red" value="已收藏"></yb-tag>
								</view>
							</view>
						</view>
					</cell>
					<yb-pullup ref="pullup" :color="skinColor.color_1" @pullup="pullup" v-if="!isLastPage"></yb-pullup>
					<cell v-if="isLastPage && results.length > 0">
						<yb-no-more :color="skinColor.color_3"></yb-no-more>
					</cell>
				</list>
				<template v-else>
					<rd-no-data title="暂无搜索数据" v-if="results.length == 0 && !loading" />
					<rd-loading size="80" :color="skinColor.color_3" title="搜索中" v-if="loading" />
				</template>
			</view>
		</rd-search>
	</yb-page-anime>
</template>

<script>
	const dom = weex.requireModule('dom');
	import appMixin from '@/common/mixin/app.js'
	import History from '@/assets/constructor/search.js' 
	export default {
		mixins: [appMixin],
		data () {
			return {
				keyword: '',
				loading: false,
				keywords: [],
				results: [],
				//当前页数
				nowPages: {},
				isLastPages: {},
				//是否已经加载完了所有数据
				isLastPage: false
			}
		},
		computed: {
			records () {
				const history = this.$store.getters['search/getHistory']
				return history.filter(his => his.type == 'story')
			},
			sources () {
				return this.$store.getters['source/get'].filter(source => source.type == 'story')
			}
		},
		onLoad () {
			this.sources.forEach(source => {
				if ( source.request.search?.value && source.isOpen && (!source.isAdult || this.$store.getters['app/getAdult']) ) {
					this.nowPages[source.id] = 1 ;
					this.isLastPages[source.id] = false;
				}
			})
			this.getHotKeyword()
			this.keyword = getApp().globalData.$Route.query.keyword || ''
		},
		methods: {
			getHotKeyword () {
				getApp().globalData.$api.book.getHotKeyword().then((ress) => {
					let keywords = []
					ress.forEach((res, index) => {
						if ( res.code == getApp().globalData.$config.ERR_OK ) {
							keywords = keywords.concat(res.data.list)
						}
					})
					this.keywords = [...new Set(keywords)]
				})
			},
			async search (keyword) {
				this.keyword = keyword
				return await getApp().globalData.$api.book.search({
					keyword: this.keyword,
					page: this.nowPages,
					isLastPage: this.isLastPages
				}).then((ress) => {
					let results = [];
					ress.forEach(res => {
						if ( res.code == getApp().globalData.$config.ERR_OK ) {
							results = results.concat(res.data.list);
							this.$set(this.isLastPages, res.data.source, res.data.isLastPage);
						} else {
							//请求失败
							this.nowPages[res.data.source] = this.nowPages[res.data.source] > 1 ? this.nowPages[res.data.source] - 1 : 1;
						}
					})
					//判断是不是所有网站数据都加载完了
					this.isLastPage = Object.keys(this.isLastPages).every(key => this.isLastPages[key]);
					this.$store.dispatch('search/addHistory', new History({
						title: keyword,
						type: 'story'
					}))
					return results
				})
			},
			scrollTop () {
				dom.scrollToElement(this.$refs.listTop, {animated: false});
			},
			change (keyword) {
				clearTimeout(this.timer);
				this.timer = null
				this.results = []
				this.loading = true;
				this.keyword = keyword
				this.isLastPage = false;
				this.timer = setTimeout(() => {
					this.sources.forEach(source => {
						if ( source.request.search?.value && source.isOpen && (!source.isAdult || this.$store.getters['app/getAdult']) ) {
							this.nowPages[source.id] = 1 ;
							this.isLastPages[source.id] = false;
						}
					})
					this.isLastPage = false;
					if ( this.keyword ) {
						this.search(this.keyword).then(results => {
							this.loading = false
							results.sort((a, b) => {
								return a.type == 'singer' && b.type != 'singer' ? -1 : 1
							})
							this.results = results;
							this.scrollTop();
							
						})
					} else {
						this.results = []
					}
					clearTimeout(this.timer);
					this.timer = null
				}, 1000)
			},
			pullup () {
				Object.keys(this.nowPages).forEach(key => {
					this.nowPages[key] += 1;
				})
				this.search(this.keyword).then(results => {
					this.results = this.results.concat(results);
					if ( this.isLastPage ) {
						this.$refs.pullup.finish()
					} else {
						this.$refs.pullup.success()
					}
				})
			},
			removeRecord (item) {
				this.$store.dispatch('search/removeHistory', item)
			},
			clearRecord () {
				getApp().globalData.$nativeUI.confirm({
					title: '提示',
					content: '是否清空所有搜索历史',
					themeColor: this.skinColor.color_blue,
					dark: this.skinMode == 'night',
					success: (e) => {
						if ( e.confirm ) {
							this.$store.dispatch('search/clearHistory', 'story')
						}
					}
				})
			}
		}
	}
</script>

<style scoped>
	@import url("@/assets/css/app.css");
	.result {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.result .list {
		flex: 1;
	}
</style>
