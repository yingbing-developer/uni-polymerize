<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<yb-nav-bar :bgColor="skinColor.color_theme_1" :frontColor="skinColor.color_4" title="本地小说"></yb-nav-bar>
		<rd-file-list
		:path="path"
		@pathChange="pathChange"
		@item-click="itemClick"
		@items-click="itemsClick"
		:style="{'background-color': skinColor.color_bg_1}"
		suffix="txt"
		:itemMenus="itemMenus"
		:itemsMenus="itemsMenus"></rd-file-list>
	</yb-page-anime>
</template>

<script>
	import appMixin from '@/common/mixin/app.js'
	import Path from '@/assets/constructor/path.js'
	import Book from '@/assets/constructor/book.js'
	import Reader from '@/assets/constructor/reader.js'
	export default {
		mixins: [appMixin],
		data () {
			return {
				itemMenus: [{
					label: '收藏小说',
					success: (params) => {
						let book = new Book({
							bookId: params.path,
							title: getApp().globalData.$utils.removeSuffix(params.name),
							src: params.path,
							style: '本地小说',
							source: 'local'
						})
						if ( !this.isCollection(book.id) ) {
							this.toCollection(book)
							uni.showToast({
								title: '收藏成功',
								icon: 'none'
							})
						} else {
							uni.showToast({
								title: '已经收藏过此小说',
								icon: 'none'
							})
						}
					}
				},{
					label: '加入书单',
					success: (params) => {
						let book = new Book({
							bookId: params.path,
							title: getApp().globalData.$utils.removeSuffix(params.name),
							src: params.path,
							style: '本地小说',
							source: 'local'
						})
						let list = this.$store.getters['custom/get'].filter(item => item.type == 'book' && (!item.isAdult || this.$store.getters['app/getAdult']))
						if ( list.length == 0 ) {
							this.app.$nativeUI.alert({
								title: '友情提示',
								content: '未创建自定义书单',
								dark: this.skinMode == 'night'
							})
						} else {
							this.app.$modules.showActionSheet({
								title: '选择书单',
								itemList: list.map(item => item.title),
								success: (res) => {
									if ( res.confirm ) {
										let index = list[res.data.index].book.findIndex(item => item.id == book.id)
										if ( index > -1 ) {
											this.app.$nativeUI.alert({
												title: '友情提示',
												content: '这本小说已经加入该书单中',
												dark: this.skinMode == 'night'
											})
										} else {
											list[res.data.index].book.push(book)
											this.$store.dispatch('custom/add', list[res.data.index])
											uni.showToast({
												title: '加入书单成功',
												icon: 'none'
											})
										}
									}
								}
							})
						}
					}
				}],
				itemsMenus: [{
					label: '收藏小说',
					success: (list) => {
						list.forEach(item => {
							let book = new Book({
								bookId: item.path,
								title: getApp().globalData.$utils.removeSuffix(item.name),
								src: item.path,
								style: '本地小说',
								source: 'local'
							})
							if ( !this.isCollection(book.id) ) {
								this.toCollection(book)
							}
						})
						uni.showToast({
							title: '收藏成功',
							icon: 'none'
						})
					}
				},{
					label: '加入书单',
					success: (list) => {
						let books = []
						list.forEach(item => {
							books.push(
								new Book({
									bookId: item.path,
									title: getApp().globalData.$utils.removeSuffix(item.name),
									src: item.path,
									style: '本地小说',
									source: 'local'
								})
							)
						})
						let shelfs = this.$store.getters['custom/get'].filter(item => item.type == 'book')
						if ( shelfs.length == 0 ) {
							this.app.$nativeUI.alert({
								title: '友情提示',
								content: '未创建自定义书单',
								dark: this.skinMode == 'night'
							})
						} else {
							this.app.$modules.showActionSheet({
								title: '选择书单',
								itemList: shelfs.map(item => item.title),
								success: (res) => {
									if ( res.confirm ) {
										let unique = books.filter(book => shelfs[res.data.index].book.findIndex(item => item.id == book.id) == -1)
										shelfs[res.data.index].book = shelfs[res.data.index].book.concat(unique)
										this.$store.dispatch('custom/add', shelfs[res.data.index])
										uni.showToast({
											title: '加入书单成功',
											icon: 'none'
										})
									}
								}
							})
						}
					}
				}]
			}
		},
		computed: {
			path () {
				return this.$store.getters['path/get'].find(path => path.type == 'story')?.src
			}
		},
		methods: {
			pathChange (src) {
				this.$store.dispatch('path/add', new Path({
					src: src,
					type: 'story'
				}))
			},
			itemClick (params) {
				this.$store.dispatch('reader/init', new Reader({
					book: new Book({
						bookId: params.path,
						title: getApp().globalData.$utils.removeSuffix(params.name),
						src: params.path,
						style: '本地小说',
						source: 'local'
					})
				}))
				this.app.$Router.push({
					path: '/pages/book/reader'
				})
			},
			itemsClick (list) {
				uni.showToast({
					title: '不支持批量阅读小说',
					icon: 'none'
				})
			}
		}
	}
</script>

<style>
</style>
