<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<yb-nav-bar ref="navbar" :bgColor="skinColor.color_theme_1" :frontColor="skinColor.color_4" :title="title"></yb-nav-bar>
		<yb-checked
		:data="types"
		:current="current"
		:currentChild="currentChild"
		:height="670"
		:bgColor="skinColor.color_bg_1"
		:frontColor="skinColor.color_1"
		:gapColor="skinColor.color_gap_1"
		type="square"
		mode="single"
		@change="changeType"></yb-checked>
		<list class="type-results" v-if="typeSource" :style="{'top': resultTop + 'px', 'background-color': skinColor.color_bg_1}">
			<yb-pulldown v-if="!loading && list.length > 0" ref="pulldown" @pulldown="pulldown"></yb-pulldown>
			<cell v-for="(item, index) in list">
				<cell>
					<view ref="listTop"></view>
				</cell>
				<rd-cell-book :mode="apiType == 'book' ? 'row' : 'column'" class="padding-gap" :item="item" />
				</view>
			</cell>
			<cell v-if="isLastPage && list.length > 0">
				<yb-no-more :color="skinColor.color_3"></yb-no-more>
			</cell>
			<yb-pullup ref="pullup" :color="skinColor.color_1" @pullup="pullup" v-if="!isLastPage && list.length > 0"></yb-pullup>
		</list>
		<rd-loading :top="resultTop + 'px'" :style="{'background-color': skinColor.color_bg_1}" :color="skinColor.color_3" size="70" v-if="loading" title="加载中"></rd-loading>
		<rd-no-data v-if="list.length == 0 && !loading && typeSource" :color="skinColor.color_3"></rd-no-data>
		<rd-no-data :color="skinColor.color_3" v-if="types.length == 0 && !loading" title="暂无分类数据"></rd-no-data>
	</yb-page-anime>
</template>

<script>
	const dom = weex.requireModule('dom');
	import appMixin from '@/common/mixin/app.js';
	let that;
	export default {
		mixins: [appMixin],
		data () {
			return {
				loading: true,
				list: [],
				dropShow: false,
				types: [],
				currentPage: 1,
				isLastPage: false,
				typeId: '',
				typeTitle: '',
				typeSource: '',
				resultTop: 0
			}
		},
		computed: {
			title () {
				return this.typeTitle ? this.typeTitle : this.apiType == 'book' ? '小说分类' : '漫画分类'
			},
			apiType () {
				return getApp().globalData.$Route.query.apiType || 'book'
			}
		},
		onReady() {
			that = this
			this.resultTop = this.$refs.navbar.height || 0
			this.getTypes().then(types => {
				this.types = types
				this.loading = false
			})
		},
		methods: {
			pulldown () {
				this.currentPage = 1
				this.getList().then(data => {
					this.list = data.list
					this.isLastPage = data.isLastPage
					this.$refs.pulldown.success()
				})
			},
			pullup () {
				this.currentPage++;
				this.getList().then(data => {
					this.list = this.list.concat(data.list)
					data.isLastPage ? this.$refs.pullup.finish() : this.$refs.pullup.success()
					this.isLastPage = data.isLastPage
					this.currentPage = data.currentPage
				})
			},
			async getList () {
				return await this.app.$api[this.apiType].getTypeDetail({
					page: this.currentPage,
					id: this.typeId,
					title: this.typeTitle,
					source: this.typeSource
				}).then((res) => {
					return {
						list: res.data.list,
						isLastPage: res.data.isLastPage,
						currentPage: res.data.currentPage
					}
				})
			},
			async getTypes () {
				return await this.app.$api[this.apiType].getTypeList().then(ress => {
					let types = []
					ress.forEach(res => {
						if ( res.code == this.app.$config.ERR_OK ) {
							types.push({
								label: this.filterSource(res.data.source),
								child: res.data.list.map(item => {
									return Object.assign({}, item, {
										isChecked: false
									})
								}) 
							})
						}
					})
					return types
				})
			},
			changeType (e) {
				Object.keys(this.types).forEach(key => {
					Object.keys(this.types[key].child).forEach(ckey => {
						this.types[key].child[ckey].isChecked = false
					})
				})
				const index = this.types[e.current].child.findIndex(item => item.value == e.results.value)
				index > -1 ? this.types[e.current].child[index].isChecked = true : null
				this.typeId = e.results.value
				this.typeTitle = e.results.label
				this.typeSource = e.results.source
				this.currentPage = 1
				this.loading = true
				this.list = []
				setTimeout(() => {
					this.getList().then(data => {
						this.loading = false
						this.list = data.list
						this.isLastPage = data.isLastPage
						this.scrollTop()
					})
				}, 500)
			},
			scrollTop () {
				dom.scrollToElement(this.$refs.listTop, {animated: false});
			}
		},
		onBackPress (event) {
			if ( that.typeSource) {
				that.typeSource = ''
				that.loading = false
				return true
			}
			return false
		}
	}
</script>

<style>
	@import url("@/assets/css/app.css");
	.type-results {
		position: absolute;
		left: 0;
		right: 0;
		bottom: 0;
	}
</style>
