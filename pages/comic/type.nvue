<template>
	<yb-page-anime ref="ybPageAnime" :bgColor="skinColor.color_bg_1">
		<yb-nav-bar :bgColor="skinColor.color_theme_1" :frontColor="skinColor.color_4" :title="title">
			<template slot="right">
				<view class="rd-nav-right">
					<rd-icon enableClick class="opac-actived" name="more-horizontal" size="36" :color="skinColor.color_4" @click="showDrop"></rd-icon>
				</view>
			</template>
		</yb-nav-bar>
		<list>
			<yb-pulldown v-if="!loading" ref="pulldown" @pulldown="pulldown"></yb-pulldown>
			<cell v-for="(item, index) in list">
				<cell>
					<view ref="listTop"></view>
				</cell>
				<view class="cell-item_3"
				@tap="app.$Router.push({
					path: '/pages/book/detail',
					query: {
						params: encodeURIComponent(JSON.stringify(item))
					}
				})"
				:style="{'border-bottom-color': skinColor.color_gap_1, 'background-color': skinColor.color_bg_1}">
					<view elevation="3">
						<rd-image lazyLoad class="cover" :src="item.cover" mode="aspectFill"></rd-image>
					</view>
					<view class="info">
						<text class="title" :style="{'color': skinColor.color_1}">{{item.title}}</text>
						<view class="subtitles">
							<text class="subtitle" :style="{
								'color': skinColor.color_3
							}">作者：{{item.author}}</text>
							<text class="subtitle" :style="{
								'color': skinColor.color_3
							}">题材：{{item.style || '未知题材'}}</text>
							<text class="subtitle" :style="{
								'color': skinColor.color_3
							}">来源：{{filterSource(item.source)}}</text>
						</view>
						<text class="desc" :style="{'color': skinColor.color_2}">简介：{{item.desc.replace(/\n/g, '') || '暂无简介'}}</text>
						<text class="tip" :style="{'color': skinColor.color_red}" v-if="item.lastChapter">更新至：{{item.lastChapter}}</text>
						<view class="badges" v-else>
							<yb-tag class="badge" :color="item.isEnd ? skinColor.color_green : skinColor.color_orange" :value="item.isEnd ? '已完结' : '连载中'"></yb-tag>
							<yb-tag class="badge" v-if="isRecord(item.id)" :color="skinColor.color_yellow" value="正在阅读中"></yb-tag>
							<yb-tag class="badge" v-if="isCollection(item.id)" :color="skinColor.color_red" value="已收藏"></yb-tag>
						</view>
					</view>
				</view>
			</cell>
			<yb-page-anime-fixed>
				<yb-list-loading :color="skinColor.color_3" size="70" v-if="loading" title="加载中"></yb-list-loading>
				<yb-list-no-data :color="skinColor.color_3" v-if="list.length == 0 && !loading"></yb-list-no-data>
			</yb-page-anime-fixed>
			<cell v-if="isLastPage && list.length > 0">
				<yb-no-more :color="skinColor.color_3"></yb-no-more>
			</cell>
			<yb-pullup ref="pullup" :color="skinColor.color_1" @pullup="pullup" v-if="!isLastPage"></yb-pullup>
		</list>
		<yb-filter-menu
		:visible.sync="dropShow"
		:bgColor="skinColor.color_bg_1"
		:frontColor="skinColor.color_1"
		:gapColor="skinColor.color_gap_1"
		mode="single"
		type="square"
		title="选择类型"
		:data="types" @change="changeType" :height="670"></yb-filter-menu>
	</yb-page-anime>
</template>

<script>
	const dom = weex.requireModule('dom');
	import appMixin from '@/common/mixin/app.js';
	export default {
		mixins: [appMixin],
		data () {
			return {
				loading: true,
				list: [],
				dropShow: false,
				types: [],
				currentPage: 1,
				isLastPage: false,
				typeId: '',
				typeTitle: '',
				typeSource: ''
			}
		},
		computed: {
			title () {
				return this.typeTitle || '分类漫画'
			}
		},
		onLoad () {
			this.typeId = 'recome'
			this.typeTitle = '热门推荐'
		},
		onReady() {
			this.getRecome().then(list => {
				this.list = list
				this.loading = false
			})
		},
		methods: {
			pulldown () {
				this.currentPage = 1
				if ( this.typeId == 'recome' ) {
					this.getRecome().then(list => {
						this.list = list
						this.$refs.pulldown.success()
					})
				} else {
					this.getList().then(data => {
						this.list = data.list
						this.isLastPage = data.isLastPage
						this.$refs.pulldown.success()
					})
				}
			},
			pullup () {
				this.currentPage++;
				this.getList().then(data => {
					this.list = this.list.concat(data.list)
					data.isLastPage ? this.$refs.pullup.finish() : this.$refs.pullup.success()
					this.isLastPage = data.isLastPage
					this.currentPage = data.currentPage
				})
			},
			async getList () {
				return await this.app.$api.comic.getTypeDetail({
					page: this.currentPage,
					id: this.typeId,
					title: this.typeTitle,
					source: this.typeSource
				}).then((res) => {
					return {
						list: res.data.list,
						isLastPage: res.data.isLastPage,
						currentPage: res.data.currentPage
					}
				})
			},
			async getRecome () {
				return await this.app.$api.comic.getRecome().then((ress) => {
					let hotBooks = []
					ress.forEach(res => {
						if ( res.code == this.app.$config.ERR_OK ) {
							hotBooks = hotBooks.concat(res.data.hotBooks)
							hotBooks = hotBooks.concat(res.data.populars)
						}
					})
					
					this.isLastPage = true
					this.currentPage = 1
					return hotBooks
				})
			},
			showDrop () {
				if ( this.types.length > 0 ) {
					this.dropShow = true
				} else {
					uni.showLoading({
						title: '加载中'
					})
					this.types = [{
						label: '综合',
						child: [{
							label: '热门推荐',
							value: 'recome',
							isChecked: true
						}]
					}]
					this.app.$api.comic.getTypeList().then(ress => {
						ress.forEach(res => {
							if ( res.code == this.app.$config.ERR_OK ) {
								this.types.push({
									label: this.filterSource(res.data.source),
									child: res.data.list.map(item => {
										return Object.assign({}, item, {
											isChecked: false
										})
									}) 
								})
							}
						})
						uni.hideLoading()
						this.dropShow = true
					})
				}
			},
			changeType (e) {
				Object.keys(this.types).forEach(key => {
					Object.keys(this.types[key].child).forEach(ckey => {
						this.types[key].child[ckey].isChecked = false
					})
				})
				const index = this.types[e.current].child.findIndex(item => item.value == e.results.value)
				index > -1 ? this.types[e.current].child[index].isChecked = true : null
				this.typeId = e.results.value
				this.typeTitle = e.results.label
				this.typeSource = e.results.source
				this.currentPage = 1
				this.loading = true
				this.list = []
				setTimeout(() => {
					if ( this.typeId == 'recome' ) {
						this.getRecome().then(list => {
							this.loading = false
							this.list = list
							this.isLastPage = true
							this.scrollTop()
						})
					} else {
						this.getList().then(data => {
							this.loading = false
							this.list = data.list
							this.isLastPage = data.isLastPage
							this.scrollTop()
						})
					}
				}, 500)
			},
			scrollTop () {
				dom.scrollToElement(this.$refs.listTop, {animated: false});
			}
		}
	}
</script>

<style>
	@import url("@/assets/css/app.css");
</style>
