{
	"id": "grll",
	"title": "肉文小说",
	"href": "https://www.grhh.xyz",
	"isAdult": true,
	"type": "story",
	"request": {
		"search": {
			"label": "搜索功能",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,replaceHTML,} = context;http.get(baseUrl, {params: {'page.currentPage': params.page[source],'queryFilm.orderType': 3,'queryFilm.subjectName': '',filmName: params.keyword},headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let con = str.match(/<div[^>]*id=([""]?)booklist\1[^>]*>*([\s\S]*?)<div[^>]*class=([""]?)text-center\1[^>]*>/)[0];let lis = con.match(/<div[^>]*class=([""]?)book-list-item\1[^>]*>*([\s\S]*?)(<div>|<div[^>]*class=([""]?)text-center\1[^>]*>)/ig);if (lis) {lis.forEach(li => {list.push(new Book({bookId: li.match(/onclick=\"*([\s\S]*?)\"/)[1].match(/\/xs\/info\/*([\s\S]*?).html/)[1],title: li.match(/alt=\"*([\s\S]*?)\"/)[1],cover: baseUrl + li.match(/src=\"*([\s\S]*?)\"/)[1],author: li.match(/<p[^>]*class=([""]?)book-list-info-bottom\1[^>]*>*([\s\S]*?)<\/p>/ig)[0].match(/作者：*([\s\S]*?)<\/font>/)[1],style: li.match(/<p[^>]*class=([""]?)book-list-info-bottom\1[^>]*>*([\s\S]*?)<\/p>/ig)[0].match(/分类：*([\s\S]*?)<font[^>]*>/)[1],desc: li.match(/<p[^>]*class=([""]?)book-list-info-desc\1[^>]*>*([\s\S]*?)<\/p>/)[2].replace(/\/s/g, ''),updateTime: li.match(/更新：*([\s\S]*?)<font[^>]*>/)[1],lastChapter: li.match(/<p[^>]*class=([""]?)book-list-info-bottom\1[^>]*>*([\s\S]*?)<\/p>/ig)[1].match(/<font[^>]*>*([\s\S]*?)<\/font>/)[1].replace(/最新章节：|：/, ''),type: 'story',isAdult: true,source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 15,currentPage: params.page[source],source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page[source] - 1,source: source}})})})}"
		},
		"getHotKeyword": {
			"label": "热门关键词",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML} = context;http.get(baseUrl, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let list = [];let con = str.match(/<div[^>]*class=([""]?)header-bottom-bottom\1[^>]*>*([\s\S]*?)<\/center>/ig)[0];let words = con.match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);if ( words ) {words.forEach((word, key) => {if ( key > 0 ) {list.push(word.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1].match(/\[*([\s\S]*?)\]/)[1])}})}resolve({code: ERR_OK,data: {list: list,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {list: [],source: source}})})})}"
		},
		"getTypeList": {
			"label": "分类列表",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML} = context;http.get(baseUrl, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),}}).then((res) => {let list = [];let str = replaceHTML(res.data);let con = str.match(/<div[^>]*class=([""]?)header-bottom-bottom\1[^>]*>*([\s\S]*?)<\/center>/ig)[1];let lis = con.match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);if (lis) {lis.forEach((li, key) => {list.push({label: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],value: key == 0 ? '' : li.match(/href=\"*([\s\S]*?)\"/)[1].replace('/?subjectName=', ''),source: source})})}resolve({code: ERR_OK,data: {list: list,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],source: source}})})})}"
		},
		"getTypeDetail": {
			"label": "分类详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,replaceHTML,} = context;http.get(baseUrl, {params: {'page.currentPage': params.page,'queryFilm.orderType': 3,'queryFilm.subjectName': params.id,filmName: ''},headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let con = str.match(/<div[^>]*id=([""]?)booklist\1[^>]*>*([\s\S]*?)<div[^>]*class=([""]?)text-center\1[^>]*>/)[0];let lis = con.match(/<div[^>]*class=([""]?)book-list-item\1[^>]*>*([\s\S]*?)(<div>|<div[^>]*class=([""]?)text-center\1[^>]*>)/ig);if (lis) {lis.forEach(li => {list.push(new Book({bookId: li.match(/onclick=\"*([\s\S]*?)\"/)[1].match(/\/xs\/info\/*([\s\S]*?).html/)[1],title: li.match(/alt=\"*([\s\S]*?)\"/)[1],cover: baseUrl + li.match(/src=\"*([\s\S]*?)\"/)[1],author: li.match(/<p[^>]*class=([""]?)book-list-info-bottom\1[^>]*>*([\s\S]*?)<\/p>/ig)[0].match(/作者：*([\s\S]*?)<\/font>/)[1],style: li.match(/<p[^>]*class=([""]?)book-list-info-bottom\1[^>]*>*([\s\S]*?)<\/p>/ig)[0].match(/分类：*([\s\S]*?)<font[^>]*>/)[1],desc: li.match(/<p[^>]*class=([""]?)book-list-info-desc\1[^>]*>*([\s\S]*?)<\/p>/)[2].replace(/\/s/g, ''),updateTime: li.match(/更新：*([\s\S]*?)<font[^>]*>/)[1],lastChapter: li.match(/<p[^>]*class=([""]?)book-list-info-bottom\1[^>]*>*([\s\S]*?)<\/p>/ig)[1].match(/<font[^>]*>*([\s\S]*?)<\/font>/)[1].replace(/最新章节：|：/, ''),type: 'story',isAdult: true,source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 15,currentPage: params.page,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page - 1,source: source}})})})}"
		},
		"getDetail": {
			"label": "书籍详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML,getTag,Chapter,Book} = context;http.get(baseUrl + '/xs/info/' + params.id + '.html', {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let str = replaceHTML(res.data);let header = str.match(/<div[^>]*class=([""]?)book-header\1[^>]*>*([\s\S]*?)<\/div>/)[0];let cover = baseUrl + header.match(/src=\"*([\s\S]*?)\"/)[1];let title = header.match(/<h1[^>]*>*([\s\S]*?)<\/h1>/)[1];let author = header.match(/<p[^>]*class=([""]?)writer\1[^>]*>*([\s\S]*?)<\/p>/ig)[1].match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1].replace('作者: ', '');let desc = header.match(/<p[^>]*class=([""]?)desc\1[^>]*>*([\s\S]*?)<\/p>/)[2];let strongs = desc.match(/<strong[^>]*>*([\s\S]*?)<\/strong>/ig);if (strongs) {strongs.forEach(strong => {let ss = strong.match(/<strong[^>]*>*([\s\S]*?)<\/strong>/);desc = desc.replace(ss[0], ss[1]);})}let updateTime = header.match(/<p[^>]*class=([""]?)writer\1[^>]*>*([\s\S]*?)<\/p>/ig)[2].match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1].replace('更新时间：', '');let tag = getTag(source, desc + '_' + title);let chapters = [];let lis = str.match(/<div[^>]*class=([""]?)list-item\1[^>]*>*([\s\S]*?)<\/a>/ig);if (lis) {lis.forEach((li, key) => {chapters.push(new Chapter({id: li.match(/href=\"*([\s\S]*?)\"/)[1].replace('.html', '').slice(1),chapter: key + 1,title: li.match(/<div[^>]*class=([""]?)cell-title\1[^>]*>*([\s\S]*?)<\/div>/)[2],isStart: key == 0,isEnd: key == lis.length - 1,source: source}));})}resolve({code: ERR_OK,data: {bookInfo: {title: title,cover: cover,desc: desc,author: author,tag: tag,updateTime: updateTime,},chapters: chapters,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {bookInfo: {},source: source}})})})}"
		},
		"getContent": {
			"label": "书籍内容",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML,htmlDecodeByRegExp} = context;http.get(baseUrl + '/' + params.id + '.html', {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', '')}}).then((res) => {let str = replaceHTML(res.data);let content = str.match(/<div[^>]*class=([""]?)novel_content\1[^>]*>*([\s\S]*?)<\/div>/)[2];content = htmlDecodeByRegExp(content);resolve({code: ERR_OK,data: {content: {title: params.title,chapter: params.chapter,content: content,isStart: params.isStart,isEnd: params.isEnd},source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {content: '',source: source}})})})}"
		}
	}
}