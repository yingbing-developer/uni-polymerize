{
	"id": "aaread",
	"title": "AA阅读",
	"href": "https://aaread.space",
	"isAdult": true,
	"type": "story",
	"request": {
		"getRecome": {
			"label": "获取热门推荐",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,Bookshelf,replaceHTML} = context;http.get(baseUrl, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let focus = str.match(/<ul[^>]*class=([""]?)rotaion_list\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);let names = str.match(/<div[^>]*class=([""]?)yx-rotation-focus\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);let banners = [];focus.forEach((f, key) => {banners.push(new Book({bookId: f.match(/alt=\"*([\s\S]*?)\"/)[1],cover: f.match(/src=\"*([\s\S]*?)\"/)[1],title: names[key].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1].replace(/<cite[^>]*>*([\s\S]*?)<\/cite>/ig, ''),type: 'story',isAdult: true,source: source}));});let hotBooks = [];let lis = str.match(/<div[^>]*id=([""]?)new-book-list\1[^>]*>*([\s\S]*?)<div[^>]*class=([""]?)right-wrap mb6 hover-icon fr\1[^>]*>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {hotBooks.push(new Book({bookId: li.match(/data-bid=\"*([\s\S]*?)\"/)[1],title: li.match(/title=\"*([\s\S]*?)\"/)[1],cover: li.match(/src=\"*([\s\S]*?)\"/)[1],author: li.match(/<a[^>]*class=([""]?)author default\1[^>]*>*([\s\S]*?)<\/a>/)[2].replace(/<img[^>]*>/ig, '').replace(/\s/ig, ''),desc: li.match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1],style: li.match(/<div[^>]*class=([""]?)state-box cf\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<i[^>]*>*([\s\S]*?)<\/i>/)[1],type: 'story',isAdult: true,source: source}))})}let populars = [];let pps = str.match(/<div[^>]*class=([""]?)left-wrap fl\1[^>]*>*([\s\S]*?)<div[^>]*class=([""]?)(right-wrap recent-finish-wrap fr|right-wrap fr)\1[^>]*>/ig);if (pps) {pps.forEach(pp => {let lls = pp.match(/<ul[^>]*class=([""]?)roundabout\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);let dds = pp.match(/<dd[^>]*>*([\s\S]*?)<\/dd>/ig);lls.forEach((ll, key) => {populars.push(new Book({bookId: ll.match(/href=\"*([\s\S]*?)\"/)[1].replace('/book/', ''),title: ll.match(/alt=\"*([\s\S]*?)\"/)[1],cover: ll.match(/data-original=\"*([\s\S]*?)\"/)[1],author: dds[key].match(/<a[^>]*class=([""]?)default\1[^>]*>*([\s\S]*?)<\/a>/)[2],desc: dds[key].match(/<p[^>]*class=([""]?)intro\1[^>]*>*([\s\S]*?)<\/p>/)[2],style: dds[key].match(/<span[^>]*class=([""]?)org\1[^>]*>*([\s\S]*?)<\/span>/)[2],isEnd: dds[key].match(/<span[^>]*class=([""]?)red\1[^>]*>*([\s\S]*?)<\/span>/)[2] == '已完结',size: dds[key].match(/<span[^>]*class=([""]?)blue\1[^>]*>*([\s\S]*?)<\/span>/)[2] + '个字',type: 'story',isAdult: true,source: source}))});lis = pp.match(/<div[^>]*class=([""]?)center-book-list fl\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if ( lis ) {lis.forEach(li => {populars.push(new Book({bookId: li.match(/data-bid=\"*([\s\S]*?)\"/)[1],title: li.match(/title=\"*([\s\S]*?)\"/)[1],cover: li.match(/data-original=\"*([\s\S]*?)\"/)[1],author: li.match(/<a[^>]*class=([""]?)author default\1[^>]*>*([\s\S]*?)<\/a>/)[2].replace(/<img[^>]*>/ig, '').replace(/\s/ig, ''),desc: li.match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1],style: li.match(/<div[^>]*class=([""]?)state-box cf\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<i[^>]*>*([\s\S]*?)<\/i>/)[1],type: 'story',isAdult: true,source: source}))})}})}let updates = [];let trs = str.match(/<div[^>]*id=([""]?)j-updateList\1[^>]*>*([\s\S]*?)<\/tbody>/)[0].match(/<tr[^>]*>*([\s\S]*?)<\/tr>/ig);if (trs) {trs.forEach(tr => {updates.push(new Book({bookId: tr.match(/<a[^>]*class=([""]?)name\1[^>]*>*([\s\S]*?)<\/a>/)[0].match(/href=\"*([\s\S]*?)\"/)[1].replace('/book/', ''),title: tr.match(/<a[^>]*class=([""]?)name\1[^>]*>*([\s\S]*?)<\/a>/)[2],author: tr.match(/<a[^>]*class=([""]?)writer\1[^>]*>*([\s\S]*?)<\/a>/)[2],style: tr.match(/<a[^>]*class=([""]?)type\1[^>]*>*([\s\S]*?)<\/a>/)[2].match(/「*([\s\S]*?)」/)[2],updateTime: tr.match(/<em[^>]*class=([""]?)time\1[^>]*>*([\s\S]*?)<\/em>/)[2],lastChapter: tr.match(/<a[^>]*class=([""]?)chapter\1[^>]*>*([\s\S]*?)<\/a>/)[2],size: tr.match(/<em[^>]*class=([""]?)words\1[^>]*>*([\s\S]*?)<\/em>/)[2] + '字',type: 'story',isAdult: true,source: source}))})}let hotTops = [];let inners = str.match(/<div[^>]*class=([""]?)rank-list\1[^>]*>*([\s\S]*?)<\/ul>/ig);inners.forEach((ins, i) => {if ( i > 0 && i < 6 ) {hotTops.push(new Bookshelf({shelfId: ins.match(/<a[^>]*class=([""]?)more\1[^>]*>*([\s\S]*?)<\/a>/)[0].match(/href=\"*([\s\S]*?)\"/)[1],title: ins.match(/<h3[^>]*class=([""]?)wrap-title lang\1[^>]*>*([\s\S]*?)<\/h3>/)[2].replace(/<a[^>]*>*([\s\S]*?)<\/a>/ig, '').replace(/\s/ig, ''),cover: ins.match(/src=\"*([\s\S]*?)\"/)[1],style: 'top',type: 'story',isAdult: true,source: source}));lis = ins.match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach((li, key) => {hotTops[hotTops.length - 1].book.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].replace('/book/', ''),title: li.match(/title=\"*([\s\S]*?)\"/)[1],cover: key == 0 ? li.match(/src=\"*([\s\S]*?)\"/)[1] : '',author: key == 0 ? li.match(/<a[^>]*class=([""]?)writer default\1[^>]*>*([\s\S]*?)<\/a>/)[2] : li.match(/<i[^>]*class=([""]?)author\1[^>]*>*([\s\S]*?)<\/i>/)[2],style: key == 0 ? li.match(/<a[^>]*class=([""]?)type\1[^>]*>*([\s\S]*?)<\/a>/)[2] : '',type: 'story',isAdult: true,source: source}))})}}});let hotTypes = [];lis = str.match(/<div[^>]*class=([""]?)hot-book-list-wrap\1[^>]*>*([\s\S]*?)<div[^>]*class=([""]?)rank-wrap mb20\1[^>]*>/)[0].match(/<li[^>]*class=([""]?)hover-icon\1[^>]*>*([\s\S]*?)<\/li>/ig);if ( lis ) {lis.forEach((li, i) => {hotTypes.push(new Bookshelf({shelfId: 'type_' + i,title: li.match(/<h6[^>]*>*([\s\S]*?)<\/h6>/)[1].replace(/<em[^>]*>*([\s\S]*?)<\/em>/ig, '').replace(/\s/ig, ''),cover: li.match(/src=\"*([\s\S]*?)\"/)[1],style: 'type',type: 'story',isAdult: true,source: source}));let dds = li.match(/<dd[^>]*>*([\s\S]*?)<\/dd>/ig);if (dds) {dds.forEach((dd, key) => {hotTypes[hotTypes.length - 1].book.push(new Book({bookId: dd.match(/href=\"*([\s\S]*?)\"/)[1].replace('/book/', ''),title: key == 0 ? dd.match(/title=\"*([\s\S]*?)\"/)[1] : dd.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],cover: key == 0 ? dd.match(/src=\"*([\s\S]*?)\"/)[1] : '',desc: key == 0 ? dd.match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1] : '',type: 'story',isAdult: true,source: source}))})}});}resolve({code: ERR_OK,data: {banners: banners,hotTops: hotTops,hotTypes: hotTypes,updates: updates,hotBooks: hotBooks,populars: populars,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {source: source}})})})}"
		},
		"search": {
			"label": "搜索功能",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML,Book} = context;http.get(baseUrl + '/search', {params: {kw: params.keyword,pageNum: params.page[source]},headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let con = str.match(/<div[^>]*class=([""]?)book-img-text\1[^>]*>*([\s\S]*?)<\/ul>/);if ( con ) {let lis = con[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {let au = li.match(/<p[^>]*class=([""]?)author\1[^>]*>*([\s\S]*?)<\/p>/)[0];let up = li.match(/<p[^>]*class=([""]?)update\1[^>]*>*([\s\S]*?)<\/p>/)[0];list.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].replace('/book/', ''),title: li.match(/<h4[^>]*>*([\s\S]*?)<\/h4>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],cover: li.match(/src=\"*([\s\S]*?)\"/)[1],author: au.match(/<a[^>]*class=([""]?)name default\1[^>]*>*([\s\S]*?)<\/a>/)[2],style: au.match(/<a[^>]*>*([\s\S]*?)<\/a>/ig)[1].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],isEnd: au.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1] == '已完结',desc: li.match(/<p[^>]*class=([""]?)intro\1[^>]*>*([\s\S]*?)<\/p>/)[2],lastChapter: up.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],updateTime: up.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1],type: 'story',isAdult: true,source: source}))})}}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 10,currentPage: params.page[source],source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page[source] - 1,source: source}})})})}"
		},
		"getTypeList": {
			"label": "分类列表",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML} = context;http.get(baseUrl + '/all', {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let con = str.match(/<div[^>]*class=([""]?)work-filter type-filter\1[^>]*>*([\s\S]*?)<\/div>/)[0];let lis = con.match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach((li, key) => {list.push({label: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],value: li.match(/data-id=\"*([\s\S]*?)\"/)[1],source: source})})}resolve({code: ERR_OK,data: {list: list,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],source: source}})})})}"
		},
		"getTypeDetail": {
			"label": "分类详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,replaceHTML,} = context;http.get(baseUrl + '/all', {params: {catId: params.id,size: -1,isFinish: -1,updT: -1,isVip: -1,orderBy: -1,pageNum: params.page,pageSize: 14,},headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let lis = str.match(/<div[^>]*class=([""]?)right-book-list\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {list.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].replace('/book/', ''),title: li.match(/title=\"*([\s\S]*?)\"/)[1],cover: li.match(/src=\"*([\s\S]*?)\"/)[1],author: li.match(/<a[^>]*class=([""]?)default\1[^>]*>*([\s\S]*?)<\/a>/)[2],style: li.match(/<span[^>]*class=([""]?)org\1[^>]*>*([\s\S]*?)<\/span>/)[2],isEnd: li.match(/<span[^>]*class=([""]?)red\1[^>]*>*([\s\S]*?)<\/span>/)[2] == '已完结',size: li.match(/<span[^>]*class=([""]?)blue\1[^>]*>*([\s\S]*?)<\/span>/)[2] + '字',desc: li.match(/<p[^>]*class=([""]?)intro\1[^>]*>*([\s\S]*?)<\/p>/)[2],type: 'story',isAdult: true,source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 14,currentPage: params.page,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page - 1,source: source}})})})}"
		},
		"getDetail": {
			"label": "书籍详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML,getTag,Chapter} = context;http.get(baseUrl + '/book/' + params.id, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let str = replaceHTML(res.data);let cover = str.match(/<a[^>]*id=([""]?)bookImg\1[^>]*>*([\s\S]*?)<\/a>/)[0].match(/src=\"*([\s\S]*?)\"/)[1];let info = str.match(/<div[^>]*class=([""]?)book-info\1[^>]*>*([\s\S]*?)<\/div>/)[0];let title = info.match(/<h1[^>]*>*([\s\S]*?)<\/h1>/)[0].match(/<em[^>]*>*([\s\S]*?)<\/em>/)[1];let author = info.match(/<a[^>]*class=([""]?)writer default\1[^>]*>*([\s\S]*?)<\/a>/)[2].replace(' 著', '');let desc = info.match(/<p[^>]*class=([""]?)intro\1[^>]*>*([\s\S]*?)<\/p>/)[2];let size = info.match(/<p[^>]*class=([""]?)total\1[^>]*>*([\s\S]*?)<\/p>/)[2].match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1] + '万字';let is = info.match(/<i[^>]*>*([\s\S]*?)<\/i>/ig);let isEnd = is[0].match(/<i[^>]*>*([\s\S]*?)<\/i>/)[1] == '已完结';let style = is[2].match(/<i[^>]*>*([\s\S]*?)<\/i>/)[1];let tag = getTag(source, desc + '_' + style + '_' + title);is.forEach((i, key) => {if ( key > 0 ) {tag.push(i.match(/<i[^>]*>*([\s\S]*?)<\/i>/)[1])}});tag = [...new Set(tag)];let up = str.match(/<div[^>]*class=([""]?)update\1[^>]*>*([\s\S]*?)<\/div>/)[0];let updateTime = up.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1];let lastChapters = up.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];let chapters = [];let vols = str.match(/<div[^>]*class=([""]?)volume\1[^>]*>*([\s\S]*?)<\/ul>/ig);if (vols) {let k = 0;vols.forEach((vol, i) => {let h3 = vol.match(/<h3[^>]*>*([\s\S]*?)<\/h3>/)[0];chapters.push({title: h3.match(/<h3[^>]*>*([\s\S]*?)<span/)[1].replace(/<i[^>]*>*([\s\S]*?)<\/i>/ig, '·'),hint: '本卷共' + h3.match(/<cite[^>]*>*([\s\S]*?)<\/cite>/)[1] + '字',desc: h3.match(/<span[^>]*class=([""]?)free\1[^>]*>*([\s\S]*?)<\/span>/)[2] + '章节',source: source});let lis = vol.match(/<li[^>]*>*([\s\S]*?)<\/a>/ig);lis.forEach((li, key) => {let hr = li.match(/href=\"*([\s\S]*?)\"/)[1];chapters.push(new Chapter({id: hr.slice(hr.lastIndexOf('/') + 1),chapter: k + 1,title: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],isStart: k == 0,isEnd: i == vols.length - 1 && k == lis.length - 1,source: source}));k++;})})}resolve({code: ERR_OK,data: {bookInfo: {title: title,cover: cover,desc: desc,author: author,tag: tag,style: style,size: size,isEnd: isEnd,updateTime: updateTime,lastChapters: lastChapters,},chapters: chapters,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {bookInfo: {},source: source}})})})}"
		},
		"getContent": {
			"label": "书籍内容",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,} = context;http.get(baseUrl + '/_getcontent.php', {params: {_csrfToken: '',id: params.id,_: 1646964113517,},headers: {Referer: baseUrl,Host: baseUrl.replace('https://', '')}}).then((res) => {let content = '';let ps = res.data.match(/<p[^>]*>*([\s\S]*?)<\/p>/ig);if ( ps ) {ps.forEach(p => {let str = p.match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1];content += str.replace(/<[^>]+>*([\s\S]*?)<\/[^>]+>/ig, '');})}resolve({code: ERR_OK,data: {content: {title: params.title,chapter: params.chapter,content: content,isStart: params.isStart,isEnd: params.isEnd},source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {content: '',source: source}})})})}"
		}
	}
}