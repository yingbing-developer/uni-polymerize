{
	"id": "bamxs",
	"title": "八毛小说",
	"href": "http://www.bamxs.com",
	"isAdult": true,
	"type": "story",
	"request": {
		"getRecome": {
			"label": "获取热门推荐",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {xhr,ERR_OK,ERR_FALSE,Book,Bookshelf,replaceHTML} = context;xhr.get(baseUrl, {mimeType: 'text/html; charset=gb2312',headers: {Referer: baseUrl,UserAgent: 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let tables = str.match(/<table[^>]*width=([""]?)190\1[^>]*>*([\s\S]*?)<\/table>/ig);let hotTypes = [];let hotTops = [];if ( tables ) {tables.forEach((table, i) => {if ( i < 25 ) {let trs = table.match(/<tr[^>]*>*([\s\S]*?)<\/tr>/ig);hotTypes.push(new Bookshelf({shelfId: trs[0].match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl, ''),title: trs[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],cover: baseUrl + trs[1].match(/src=\"*([\s\S]*?)\"/)[1],style: 'type',type: 'story',isAdult: true,source: source}));hotTypes[hotTypes.length - 1].book.push(new Book({bookId: trs[1].match(/href=\"*([\s\S]*?)\"/)[1].match(/id=*([\s\S]*\b)/)[1],title: trs[1].match(/alt=\"*([\s\S]*?)\"/)[1],cover: baseUrl + trs[1].match(/src=\"*([\s\S]*?)\"/)[1],desc: trs[1].match(/<br>*([\s\S]*?)<\/td>/)[1],type: 'story',isAdult: true,source: source}));let dds = trs[2].match(/<a[^>]*>*([\s\S]*?)<br>/ig);if (dds) {dds.forEach(dd => {hotTypes[hotTypes.length - 1].book.push(new Book({bookId: dd.match(/href=\"*([\s\S]*?)\"/)[1].match(/id=*([\s\S]*\b)/)[1],title: dd.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],author: dd.match(/ \/ *([\s\S]*?)<br>/)[1],type: 'story',isAdult: true,source: source}))})}} else {let trs = table.match(/<tr[^>]*>*([\s\S]*?)<\/tr>/ig);hotTops.push(new Bookshelf({shelfId: i,title: trs[0].match(/<td[^>]*>*([\s\S]*?)<\/td>/)[1],style: 'top',type: 'story',isAdult: true,source: source}));let dds = trs[1].match(/<a[^>]*>*([\s\S]*?)<br>/ig);if (dds) {dds.forEach(dd => {hotTops[hotTops.length - 1].book.push(new Book({bookId: dd.match(/href=\"*([\s\S]*?)\"/)[1].match(/id=*([\s\S]*\b)/)[1],title: dd.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],author: dd.match(/ \/ *([\s\S]*?)<br>/)[1],type: 'story',isAdult: true,source: source}))})}}})}let updates = [];let lis = str.match(/<table[^>]*width=([""]?)565\1[^>]*>*([\s\S]*?)<\/table>/)[0].match(/<tr[^>]*>*([\s\S]*?)<\/tr>/ig);if ( lis ) {lis.forEach(li => {let istr = li.match(/<td[^>]*align=([""]?)right\1[^>]*>*([\s\S]*?)<\/td>/)[2];let author = istr.slice(0, istr.indexOf('/') - 4);let updateTime = istr.replace(author, '');updates.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/id=*([\s\S]*\b)/)[1],title: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],author: author,updateTime: updateTime,lastChapter: li.match(/<td[^>]*class=([""]?)zs\1[^>]*>*([\s\S]*?)<\/td>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],type: 'story',isAdult: true,source: source}))})}resolve({code: ERR_OK,data: {hotTypes: hotTypes,hotTops: hotTops,updates: updates,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {source: source}})})})}"
		},
		"search": {
			"label": "搜索功能",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {ERR_OK,ERR_FALSE,xhr,gb2312,Book,replaceHTML} = context;xhr.postget(baseUrl.replace('www', 'm') + '/search.asp', {mimeType: 'text/html; charset=gb2312',params: {word: gb2312(params.keyword),page: params.page[source]},headers: {Referer: baseUrl.replace('www', 'm'),Host: baseUrl.replace('http://www', 'm'),Charset: 'gb2312',}}).then((res) => {let str = replaceHTML(res.data);let lis = str.match(/<div[^>]*class=([""]?)booklist_a\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);let list = [];if (lis) {lis.forEach(li => {let author = li.match(/作者:*([\s\S]*?)时间:/)[1];let reds = author.match(/<font[^>]*>*([\s\S]*?)<\/font>/ig);if ( reds ) {reds.forEach(red => {author = author.replace(red, red.match(/<font[^>]*>*([\s\S]*?)<\/font>/)[1]);})}list.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/id=*([\s\S]*\b)/)[1],cover: baseUrl + li.match(/src=\"*([\s\S]*?)\"/)[1],title: li.match(/alt=\"*([\s\S]*?)\"/)[1],style: li.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1],author: author,updateTime: li.match(/时间:*([\s\S]*?)<\/span>/)[1],desc: li.match(/<span[^>]*class=([""]?)intro\1[^>]*>*([\s\S]*?)<\/span>/)[2].replace(/<br>/g, ''),isAdult: true,source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 30,currentPage: params.page[source],source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: true,currentPage: params.page[source] - 1,source: source}})})})}"
		},
		"getHotKeyword": {
			"label": "热门关键词",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {xhr,ERR_OK,ERR_FALSE,replaceHTML} = context;xhr.get(baseUrl, {mimeType: 'text/html; charset=gb2312',headers: {Referer: baseUrl,UserAgent: 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let list = [];let words = str.match(/<td[^>]*class=([""]?)headx\1[^>]*>*([\s\S]*?)<\/td>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);if (words) {words.forEach((word, key) => {if (key > 0) {list.push(word.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1])}})}resolve({code: ERR_OK,data: {list: list,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {list: [],source: source}})})})}"
		},
		"getTypeList": {
			"label": "分类列表",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {xhr,ERR_OK,ERR_FALSE,replaceHTML} = context;xhr.get(baseUrl, {mimeType: 'text/html; charset=gb2312',headers: {Referer: baseUrl,UserAgent: 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let heads = str.match(/<td[^>]*class=([""]?)(heads|headz)\1[^>]*>*([\s\S]*?)<\/td>/ig);if ( heads ) {heads.forEach(head => {let lis = head.match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);if ( lis ) {lis.forEach(li => {if ( !li.match(/<font[^>]*>*([\s\S]*?)<\/font>/) ) {let value = li.match(/href=\"*([\s\S]*?)\"/)[1];if ( value.indexOf('id=') > -1 ) {list.push({label: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],value: value.match(/id=*([\s\S]*\b)/)[1],source: source})}}})}})}resolve({code: ERR_OK,data: {list: list,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],source: source}})})})}"
		},
		"getTypeDetail": {
			"label": "分类详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {xhr,ERR_OK,ERR_FALSE,Book,replaceHTML,} = context;xhr.get(baseUrl.replace('www', 'm') + '/date.asp', {mimeType: 'text/html; charset=gb2312',params: {id: params.id,page: params.page},headers: {Referer: baseUrl.replace('www', 'm')}}).then((res) => {let list = [];let str = replaceHTML(res.data);let lis = str.match(/<div[^>]*class=([""]?)booklist_a\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if ( lis ) {lis.forEach(li => {list.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/id=*([\s\S]*\b)/)[1],cover: baseUrl + li.match(/src=\"*([\s\S]*?)\"/)[1],title: li.match(/alt=\"*([\s\S]*?)\"/)[1],style: params.title,author: li.match(/作者:*([\s\S]*?)更新:/)[1],updateTime: li.match(/更新:*([\s\S]*?)<\/span>/)[1],desc: li.match(/<span[^>]*class=([""]?)intro\1[^>]*>*([\s\S]*?)<\/span>/)[2].replace(/<br>/g, ''),isEnd: li.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1] == '已完结',isAdult: true,source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 30,currentPage: params.page,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: true,currentPage: params.page - 1,source: source}})})})}"
		},
		"getDetail": {
			"label": "书籍详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {xhr,ERR_OK,ERR_FALSE,replaceHTML,getTag,Chapter,Book} = context;xhr.get(baseUrl + '/read.asp', {mimeType: 'text/html; charset=gb2312',params: {id: params.id},headers: {Referer: baseUrl,UserAgent: 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let str = replaceHTML(res.data);let table = str.match(/<table[^>]*width=([""]?)962\1[^>]*>*([\s\S]*?)<\/table>/ig)[2];let image = table.match(/<img[^>]*width=([""]?)110\1[^>]*>/);let cover = '';if ( image ) {cover = baseUrl + image[0].match(/src=\"*([\s\S]*?)\"/)[1];}let title = table.match(/<td[^>]*class=([""]?)lookmc\1[^>]*>*([\s\S]*?)<\/td>/)[2].match(/<strong[^>]*>*([\s\S]*?)<\/strong>/)[1];let author = table.match(/作者: *([\s\S]*?)<\/td>/)[1].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];let style = table.match(/类别: *([\s\S]*?)<\/td>/)[1].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];let isEnd = table.match(/进程: *([\s\S]*?)<\/td>/)[1].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1] == '已完结';let size = table.match(/字数: *([\s\S]*?)<\/td>/)[1] + '字';let updateTime = table.match(/更新: *([\s\S]*?)<\/td>/)[1];let desc = table.match(/<div[^>]*class=([""]?)js\1[^>]*>*([\s\S]*?)<\/div>/)[2];let aas = desc.match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);if ( aas ) {aas.forEach(aa => {desc = desc.replace(aa, aa.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1]);})}let fonts = desc.match(/<font[^>]*>*([\s\S]*?)<\/font>/ig);if ( fonts ) {fonts.forEach(font => {desc = desc.replace(font, font.match(/<font[^>]*>*([\s\S]*?)<\/font>/)[1]);})}let imgs =  desc.match(/<img[^>]*>/ig);if ( imgs ) {imgs.forEach(img => {desc = desc.replace(img, img.match(/in\/*([\s\S]*?)\.jpg/)[1]);})}let tag = getTag(source, desc + '_' + style + '_' + title);let chapters = [];let trs = str.match(/<table[^>]*class=([""]?)mread\1[^>]*>*([\s\S]*?)<\/table>/)[0].match(/<tr[^>]*>*([\s\S]*?)<\/tr>/ig);let k = 0;if (trs) {trs.forEach((tr, i) => {if ( i > 0 ) {let bas = tr.match(/<div[^>]*class=([""]?)bai\1[^>]*>*([\s\S]*?)<\/div>/ig) || [];let dus = tr.match(/<div[^>]*class=([""]?)du\1[^>]*>*([\s\S]*?)<\/div>/ig) || [];let lis = bas.concat(dus);if ( lis ) {lis.forEach(li => {if ( li.match(/<a[^>]*>*([\s\S]*?)<\/a>/) ) {chapters.push(new Chapter({id: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/id=*([\s\S]*\b)/)[1],chapter: k + 1,title: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],isStart: k == 0,isEnd: false,source: source}));k++;}})}}})}chapters[chapters.length - 1].isEnd = true;let sames = [];let guess = [];let mreads = str.match(/<table[^>]*class=([""]?)mread\1[^>]*>*([\s\S]*?)<\/table>/ig);if ( mreads ) {mreads.forEach((mread, i) => {if ( i > 0 ) {let books = [];let lis = mread.match(/<div[^>]*class=([""]?)bai\1[^>]*>*([\s\S]*?)<\/div>/ig);if ( lis ) {lis.forEach(li => {books.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/id=*([\s\S]*\b)/)[1],title: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],author: li.match(/<\/a> \/ *([\s\S]*?)<\/div>/)[1],isAdult: true,source: source}))})}i == 1 ? guess = books : sames = books;}})}resolve({code: ERR_OK,data: {bookInfo: {title: title,cover: cover,desc: desc,author: author,tag: tag,style: style,size: size,isEnd: isEnd,updateTime: updateTime,},chapters: chapters,guess: guess,sames: sames,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {bookInfo: {},source: source}})})})}"
		},
		"getContent": {
			"label": "书籍内容",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {xhr,ERR_OK,ERR_FALSE,replaceHTML,htmlDecodeByRegExp} = context;xhr.get(baseUrl + '/view.asp', {mimeType: 'text/html; charset=gb2312',params: {id: params.id},headers: {Referer: baseUrl,UserAgent: 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let str = replaceHTML(res.data);let content = str.match(/<td[^>]*class=([""]?)content\1[^>]*>*([\s\S]*?)<\/td>/)[2];let imgs = content.match(/<img[^>]*>/ig);if (imgs) {imgs.forEach(img => {content = content.replace(img, img.match(/image\/*([\s\S]*?)\.jpg/)[1]);})}let htmls = content.match(/<[^>]+>*([\s\S]*?)<\/[^>]+>/ig);if (htmls) {htmls.forEach(html => {content = content.replace(html, html.match(/<[^>]+>*([\s\S]*?)<\/[^>]+>/)[1]);})}content = content.replace(/<br>/ig, '\n');resolve({code: ERR_OK,data: {content: {title: params.title,chapter: params.chapter,content: htmlDecodeByRegExp(content),isStart: params.isStart,isEnd: params.isEnd},source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {content: '',source: source}})})})}"
		}
	}
}