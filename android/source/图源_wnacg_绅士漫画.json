{
	"id": "wnacg",
	"title": "绅士漫画",
	"href": "https://hentaicomic.org",
	"isAdult": true,
	"type": "comic",
	"request": {
		"getRecome": {
			"label": "获取热门推荐",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,Bookshelf,replaceHTML} = context;http.get(baseUrl, {headers: {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let inners = str.match(/<div[^>]*class=([""]?)title_sort\1[^>]*>*([\s\S]*?)<\/ul>/ig);let updates = [];let hotTypes = [];if (inners) {inners.forEach((inner, key) => {let lis = inner.match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (key < 1) {lis.forEach(li => {let desc = li.match(/<div[^>]*class=([""]?)info_col\1[^>]*>*([\s\S]*?)<\/div>/)[2];updates.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1],title: li.match(/title=\"*([\s\S]*?)\"/)[1],cover: 'https:' + li.match(/src=\"*([\s\S]*?)\"/)[1],desc: desc,updateTime: desc.split(', ')[0],size: desc.split(', ')[1].replace('張照片','P'),isAdult: true,type: 'comic',source: source}))})} else {let a = inner.match(/<div[^>]*class=([""]?)r\1[^>]*>*([\s\S]*?)<\/div>/)[0];hotTypes.push(new Bookshelf({shelfId: a.match(/href=\"*([\s\S]*?)\"/)[1],title: a.match(/title=\"*([\s\S]*?)\"/)[1],style: 'type',type: 'comic',isAdult: true,source: source}));lis.forEach(li => {let desc = li.match(/<div[^>]*class=([""]?)info_col\1[^>]*>*([\s\S]*?)<\/div>/)[2];hotTypes[hotTypes.length - 1].book.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1],title: li.match(/title=\"*([\s\S]*?)\"/)[1],cover: 'https:' + li.match(/src=\"*([\s\S]*?)\"/)[1],desc: desc,updateTime: desc.split(', ')[0],size: desc.split(', ')[1].replace('張照片','P'),type: 'comic',isAdult: true,source: source}))})}})}resolve({code: ERR_OK,data: {updates: updates,hotTypes: hotTypes,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {source: source}})})})}"
		},
		"search": {
			"label": "搜索功能",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,replaceHTML,htmlDecodeByRegExp} = context;http.get(baseUrl + '/search/', {params: {q: params.keyword,p: params.page[source],m: '',f: '_all',s: 'create_time_DESC'},headers: {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let list = [];let lis = str.match(/<li[^>]*class=([""]?)li gallary_item\1[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {let desc = li.match(/<div[^>]*class=([""]?)info_col\1[^>]*>*([\s\S]*?)<\/div>/)[2];let title = li.match(/title=\"*([\s\S]*?)\"/)[1];let ems = title.match(/<em[^>]*>*([\s\S]*?)<\/em>/ig);if (ems) {ems.forEach(em => {let emt = em.match(/<em[^>]*>*([\s\S]*?)<\/em>/)[1];title = title.replace(em, emt);})}list.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1],title: htmlDecodeByRegExp(title),cover: 'https:' + li.match(/src=\"*([\s\S]*?)\"/)[1],desc: desc,updateTime: desc.split('，')[1].replace('創建於', '').split(' ')[0],size: desc.split('， ')[0].replace('張照片', 'P'),isAdult: true,type: 'comic',source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 20,currentPage: params.page[source],source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page[source] - 1,source: source}})})})}"
		},
		"getTypeList": {
			"label": "分类列表",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML} = context;http.get(baseUrl, {headers: {Referer: baseUrl,'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let ul = str.match(/<ul[^>]*id=([""]?)album_tabs\1[^>]*>*([\s\S]*?)<\/ul>/)[0];let lis = ul.match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach((li, key) => {let value = li.match(/href=\"*([\s\S]*?)\"/)[1];if ( key > 0 && value.indexOf('http') == -1 ) {let title = li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];list.push({label: title,value: value == '/albums.html' ? '' : value.match(/albums-index-*([\s\S]*?).html/)[1],source: source});let subs = li.match(/<div[^>]*class=([""]?)onemenulayout visible-desktop\1[^>]*>*([\s\S]*?)<\/div>/ig);if ( subs ) {subs.forEach(sub => {let label = sub.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];let subValue = sub.match(/href=\"*([\s\S]*?)\"/)[1];list.push({label: label.length < 3 ? title.split('&')[0] + '>' + label : label,value: subValue == '/albums.html' ? '' : subValue.match(/albums-index-*([\s\S]*?).html/)[1],source: source})})}}})}resolve({code: ERR_OK,data: {list: list,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],source: source}})})})}"
		},
		"getTypeDetail": {
			"label": "分类详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,replaceHTML,htmlDecodeByRegExp} = context;http.get(baseUrl + '/albums-index-page-' + params.page + '-' + params.id, {headers: {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let list = [];let lis = str.match(/<li[^>]*class=([""]?)li gallary_item\1[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {let desc = li.match(/<div[^>]*class=([""]?)info_col\1[^>]*>*([\s\S]*?)<\/div>/)[2];let title = li.match(/title=\"*([\s\S]*?)\"/)[1];let em = title.match(/<em[^>]*>*([\s\S]*?)<\/em>/);if (em) {title = title.replace(em[0], em[1]);}list.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1],title: htmlDecodeByRegExp(title),cover: 'https:' + li.match(/src=\"*([\s\S]*?)\"/)[1],desc: desc,updateTime: desc.split('，')[1].replace('創建於', '').split(' ')[0],size: desc.split('，')[0].replace('張照片', 'P'),type: 'comic',isAdult: true,source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 20,currentPage: params.page,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page - 1,source: source}})})})}"
		},
		"getDetail": {
			"label": "书籍详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML,htmlDecodeByRegExp,getTag,Chapter} = context;http.get(baseUrl + params.id, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(async (res) => {let str = replaceHTML(res.data);let con = str.match(/<div[^>]*class=([""]?)asTBcell uwthumb\1[^>]*>*([\s\S]*?)<\/a>/)[0];let title = con.match(/alt=\"*([\s\S]*?)\"/)[1];let cover = con.match(/src=\"*([\s\S]*?)\"/)[1].replace(/\/\/\/\/|\/\//, 'https://');let desc = str.match(/簡介：*([\s\S]*?)<\/p>/)[1];let style = str.match(/分類：*([\s\S]*?)<\/label>/)[1];let size = str.match(/頁數：*([\s\S]*?)<\/label>/)[1];let tags = str.match(/<a[^>]*class=([""]?)tagshow\1[^>]*>*([\s\S]*?)<\/a>/ig);let tag = getTag(source, title + '_' + desc + '_' + style);if (tags) {tags.forEach(t => {tag.push(t.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1]);})}let author = str.match(/<div[^>]*class=([""]?)asTBcell uwuinfo\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1];let href = con.match(/href=\"*([\s\S]*?)\"/)[1].replace(/slide|list/, 'webp');let chapters = await http.get(baseUrl + href, {headers: {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'}}).then((ret) => {str = replaceHTML(ret.data);let write = str.match(/document.writeln\("*([\s\S]*?)"\);/ig);let imgStr = write[10].match(/document.writeln\(\"var imglist = \[\{*([\s\S]*?)\}\];\"\);/)[1];let arr = imgStr.split('},{');let images = [];for (let i in arr) {let img = arr[i].match(/fast_img_host\+\"*([\s\S]*?)\",/)[1];images.push('https://' + img.replace('//', ''))}let len = Math.ceil(images.length / 100);let data = [];for (let i = 0; i < len; i++) {let content = images.slice(i * 100, (i + 1) * 100);data.push(new Chapter({id: (i + 1) + '_' + source,title: '第' + (i + 1) + '部分' + '（共' + content.length +'P）',chapter: i + 1,isStart: i == 0,isEnd: i == len - 1,content: content}))}return data;});resolve({code: ERR_OK,data: {bookInfo: {title: htmlDecodeByRegExp(title),cover: cover,desc: htmlDecodeByRegExp(desc),author: author,tag: tag,style: style,isEnd: true},chapters: chapters,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {bookInfo: {},source: source}})})})}"
		}
	}
}