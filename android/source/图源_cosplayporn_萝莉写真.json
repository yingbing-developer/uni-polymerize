{
	"id": "cosplayporn",
	"title": "萝莉写真",
	"href": "https://cosplayporn.cc",
	"isAdult": true,
	"type": "comic",
	"request": {
		"getRecome": {
			"label": "获取热门推荐",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,Bookshelf,replaceHTML} = context;http.get(baseUrl, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let banners = [];let inners = str.match(/<section[^>]*class=([""]?)g1-row g1-row-fluid g1-row-nogutter g1-row-layout-page archive-featured archive-featured-stretched\1[^>]*>*([\s\S]*?)<\/section>/)[0].match(/<a[^>]*class=([""]?)g1-frame\1[^>]*>*([\s\S]*?)<\/a>/ig);if (inners) {inners.forEach(inner => {banners.push(new Book({bookId: inner.match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl, ''),title: inner.match(/title=\"*([\s\S]*?)\"/)[1],cover: inner.match(/src=\"*([\s\S]*?)\"/)[1],isAdult: true,isEnd: true,type: 'comic',source: source}))})}let hotBooks = [];let lis = str.match(/<ul[^>]*class=([""]?)g1-collection-items\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*class=([""]?)g1-collection-item g1-collection-item-1of3\1[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {let title = li.match(/title=\"*([\s\S]*?)\"/)[1];let emojis = title.match(/&#*([\s\S]*?);/ig);if (emojis) {emojis.forEach(emoji => {title = title.replace(emoji, '')})}let tags = li.match(/<div[^>]*class=([""]?)entry-before-title\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);let desc = '';if (tags) {tags.forEach((tag, key) => {desc += tag.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1] + (key ==tags.length - 1 ? '' : ' ');})}let cover = li.match(/src=\"*([\s\S]*?)\"/)[1];let fit = cover.match(/resize=*([\s\S]*?)&|fit=*([\s\S]*?)&/);cover = cover.replace(fit[1], '192%2C108');hotBooks.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl,''),title: title,cover: cover,style: '热门',desc: desc,isEnd: true,isAdult: true,type: 'comic',source: source}))})}resolve({code: ERR_OK,data: {hotBooks: hotBooks,banners: banners,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {source: source}})})})}"
		},
		"search": {
			"label": "搜索功能",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,replaceHTML,htmlDecodeByRegExp} = context;http.get(baseUrl + '/page/' + params.page[source] + '/', {params: {s: params.keyword},headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let list = [];let lis = str.match(/<ul[^>]*class=([""]?)g1-collection-items\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*class=([""]?)g1-collection-item\1[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {let title = li.match(/title=\"*([\s\S]*?)\"/)[1];let emojis = title.match(/&#*([\s\S]*?);/ig);if (emojis) {emojis.forEach(emoji => {title = title.replace(emoji, '')})}let tags = li.match(/<div[^>]*class=([""]?)entry-before-title\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);let desc = '';if (tags) {tags.forEach((tag, key) => {desc += tag.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1] + (key ==tags.length - 1 ? '' : ' ');})}let cover = li.match(/src=\"*([\s\S]*?)\"/)[1];let fit = cover.match(/resize=*([\s\S]*?)&|fit=*([\s\S]*?)&/);cover = cover.replace(fit[1], '192%2C108');list.push(new Book({bookId: li.match(/<a[^>]*class=([""]?)g1-frame\1[^>]*>*([\s\S]*?)<\/a>/)[0].match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl, ''),title: title,cover: cover,style: '热门',desc: desc,isAdult: true,isEnd: true,type: 'comic',source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 12,currentPage: params.page[source],source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: true,currentPage: params.page[source],source: source}})})})}"
		},
		"getTypeList": {
			"label": "分类列表",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML} = context;http.get(baseUrl, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let lis = str.match(/<ul[^>]*class=([""]?)sub-menu\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {list.push({label: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],value: li.match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl, ''),source: source});})}resolve({code: ERR_OK,data: {list: list,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],source: source}})})})}"
		},
		"getTypeDetail": {
			"label": "分类详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,replaceHTML,htmlDecodeByRegExp} = context;http.get(baseUrl + params.id + 'page/' + params.page + '/', {headers: {Referer: baseUrl,'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let list = [];let lis = str.match(/<ul[^>]*class=([""]?)g1-collection-items\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*class=([""]?)g1-collection-item g1-collection-item-1of3\1[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {let title = li.match(/title=\"*([\s\S]*?)\"/)[1];let emojis = title.match(/&#*([\s\S]*?);/ig);if (emojis) {emojis.forEach(emoji => {title = title.replace(emoji, '')})}let tags = li.match(/<div[^>]*class=([""]?)entry-before-title\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);let desc = '';if (tags) {tags.forEach((tag, key) => {desc += tag.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1] + (key ==tags.length - 1 ? '' : ' ');})}let cover = li.match(/src=\"*([\s\S]*?)\"/)[1];let fit = cover.match(/resize=*([\s\S]*?)&|fit=*([\s\S]*?)&/);cover = cover.replace(fit[1], '192%2C108');list.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl,''),title: title,cover: cover,style: params.title,desc: desc,isEnd: true,isAdult: true,type: 'comic',source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 12,currentPage: params.page,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page - 1,source: source}})})})}"
		},
		"getDetail": {
			"label": "书籍详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML,getTag,Chapter,Book,} = context;http.get(baseUrl + params.id, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let str = replaceHTML(res.data);let title = str.match(/<h1[^>]*class=([""]?)g1-mega g1-mega-1st entry-title\1[^>]*>*([\s\S]*?)<\/h1>/)[2];let tags = str.match(/<div[^>]*class=([""]?)entry-before-title\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);let tag = getTag(source, title);let desc = '';let style = '';if (tags) {tags.forEach((ta, key) => {style = ta.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1];tag.push(style);desc += style + (key == tags.length - 1 ? '' : ' ');})}let entag = str.match(/<p[^>]*class=([""]?)entry-tags \1[^>]*>*([\s\S]*?)<\/p>/);if (entag) {tags = entag[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);if (tags) {tags.forEach(ta => {tag.push(ta.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1]);})}}let chapters = [];let imgs = str.match(/<div[^>]*class=([""]?)g1-content-narrow g1-typography-xl entry-content\1[^>]*>*([\s\S]*?)<div[^>]*class=([""]?)snax snax-post-container\1[^>]*>/)[0].match(/<img[^>]*>/ig);if (imgs) {let content = [];imgs.forEach(img => {content.push(img.match(/src=\"*([\s\S]*?)\"/)[1])});chapters.push(new Chapter({id: 'cosplayporn_' + source,title: '全本' + '（' + content.length + 'P）',chapter: 1,isStart: true,isEnd: true,content: content}))}let guess = [];let sames = [];let uls = str.match(/<ul[^>]*class=([""]?)(g1-collection-items  |g1-collection-items)\1[^>]*>*([\s\S]*?)<\/ul>/ig);if (uls) {uls.forEach((ul, key) => {let lis = ul.match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {if (key != 1) {lis.forEach(li => {let subTitle = li.match(/title=\"*([\s\S]*?)\"/)[1];let emojis = subTitle.match(/&#*([\s\S]*?);/ig);if (emojis) {emojis.forEach(emoji => {subTitle = subTitle.replace(emoji, '')})}let desc = '';if (key == 0) {let entrys = li.match(/<div[^>]*class=([""]?)entry-before-title\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);if (entrys) {entrys.forEach((entry, i) => {desc += entry.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1] + (i == entrys.length -1 ? '' : ' ');})}}let cover = li.match(/src=\"*([\s\S]*?)\"/)[1];let fit = cover.match(/resize=*([\s\S]*?)&|fit=*([\s\S]*?)&/);cover = cover.replace(fit[1], '192%2C108');let book = new Book({bookId: li.match(/<a[^>]*class=([""]?)g1-frame\1[^>]*>*([\s\S]*?)<\/a>/)[0].match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl, ''),title: subTitle,cover: cover,desc: desc,isAdult: true,isEnd: true,type: 'comic',source: source});key == 0 ? guess.push(book) : sames.push(book);})}}})}resolve({code: ERR_OK,data: {bookInfo: {tag: tag,desc: desc,style: style,isEnd: true},chapters: chapters,guess: guess,sames: sames,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {bookInfo: {},source: source}})})})}"
		}
	}
}