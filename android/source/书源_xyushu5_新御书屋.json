{
	"id": "xyushu5",
	"title": "新御书屋",
	"href": "https://www.xyushu5.com",
	"isAdult": true,
	"type": "story",
	"request": {
		"getRecome": {
			"label": "获取热门推荐",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {xhr,ERR_OK,ERR_FALSE,Book,Bookshelf,replaceHTML} = context;xhr.get(baseUrl, {mimeType: 'text/html;charset=gb2312',headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let inners = str.match(/<div[^>]*class=([""]?)titletop\1[^>]*>*([\s\S]*?)<\/div>/ig);let lis = inners[4].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);let hotBooks = [];if (lis) {lis.forEach(li => {hotBooks.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl,''),title: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],type: 'story',source: source}))})}let hotTops = [];inners.forEach((inner, key) => {if ( key != 4 && key != 3 ) {let title = inner.match(/<h3[^>]*>*([\s\S]*?)<\/h3>/)[1];if ( key == 5 ) {title = title.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];} else {let span = title.match(/<span[^>]*>*([\s\S]*?)<\/span>/ig)[0];title = title.replace(span, '');}hotTops.push(new Bookshelf({shelfId: 'rank_' + key + '_' + source,title: title,style: 'top',type: 'story',source: source}));let lis = inner.match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {hotTops[hotTops.length - 1].book.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl,''),title: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],type: 'story',source: source}));})}}});let updates = [];lis = str.match(/<ul[^>]*class=([""]?)titlelist\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {let name = li.match(/<a[^>]*class=([""]?)name\1[^>]*>*([\s\S]*?)<\/a>/)[0];updates.push(new Book({bookId: name.match(/href=\"*([\s\S]*?)\"/)[1].replace(baseUrl, ''),title: name.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],author: li.match(/<div[^>]*class=([""]?)zz\1[^>]*>*([\s\S]*?)<\/div>/)[2],style: li.match(/<div[^>]*class=([""]?)lb\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],type: 'story',source: source}))})}resolve({code: ERR_OK,data: {banners: [],hotBooks: hotBooks,populars: [],updates: updates,hotTops: hotTops,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {banners: [],hotBooks: [],populars: [],updates: [],hotTops: [],source: source}})})})}"
		},
		"search": {
			"label": "搜索功能",
			"value": "function(context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {ERR_OK,ERR_FALSE,xhr,http,gb2312,Book,Bookshelf,replaceHTML,htmlDecodeByRegExp} = context;http.postget(baseUrl + '/search.asp', {params: {word: gb2312(params.keyword),m: 2,ChannelID: 0,page: params.page[source]},headers: {Referer: baseUrl,Host: baseUrl.replace('http://', ''),Charset: 'gb2312',}}).then((res) => {let str = replaceHTML(res.data);let all = str.match(/<div[^>]*class=([""]?)sslist\1[^>]*>*([\s\S]*?)<\/div>/ig);let arr = all[0].match(/<li[^>]*>*([\s\S]*?)<\/p>/ig);let list = [];if (arr) {arr.forEach(ar => {const h1 = ar.match(/<h1[^>]*>*([\s\S]*?)<\/h1>/ig);const a = h1[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);const path = a[1].match(/href=\"*(\S*)\"/)[1];const tag = a[0].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];let name = a[1].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];const redNameStr = name.match(/<font[^>]*>*([\s\S]*?)<\/font>/);if (redNameStr) {name = name.replace(redNameStr[0], redNameStr[1]);}let desc = ar.match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1];const redDescStr = desc.match(/<font[^>]*>*([\s\S]*?)<\/font>/);if (redDescStr) {desc = desc.replace(redDescStr[0], redDescStr[1]);}list.push(new Book({bookId: path,cover: '/static/cover/cover_default.jpg',title: htmlDecodeByRegExp(name),style: tag || '其它',author: '不详',desc: desc ? htmlDecodeByRegExp(desc.replace('简介：', '')) : '',isEnd: true,source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 20,currentPage: params.page[source],source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page[source] - 1,source: source}})})})}"
		},
		"getTypeList": {
			"label": "分类列表",
			"value": "function (context, params) {return new Promise(resolve => {const { baseUrl, source} = params;const {ERR_OK,ERR_FALSE, xhr, replaceHTML } = context;xhr.get(baseUrl, {mimeType: 'text/html;charset=gb2312',headers: {Referer: baseUrl,Host: baseUrl.replace('http://', '')}}).then((res) => {let str = replaceHTML(res.data);let nans = str.match(/<div[^>]*class=([""]?)nan\1[^>]*>*([\s\S]*?)<\/div>/ig);let typeList = [];nans.forEach(nan => {const as = nan.match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);as.forEach(a => {let shelfId = a.match(/href=\"*(\S*)\"/)[1];shelfId = shelfId.replace(shelfId.match(/_(\S*)\.html/)[0], '_');let title = a.match(/title=\"*([\s\S]*?)\"/)[1];typeList.push({label: title,value: shelfId,source: source})})});resolve({code: ERR_OK,data: {list: typeList,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],source: source}})})})}"
		},
		"getTypeDetail": {
			"label": "分类详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {ERR_OK,ERR_FALSE,xhr,Book,replaceHTML,htmlDecodeByRegExp} = context;xhr.get(baseUrl + params.id + params.page + '.html', {mimeType: 'text/html;charset=gb2312',headers: {Referer: baseUrl,Host: baseUrl.replace('http://', '')}}).then((res) => {let str = replaceHTML(res.data);let man = str.match(/<div[^>]*class=([""]?)man_first\1[^>]*>*([\s\S]*?)<\/div>/)[0];let ul = man.match(/<ul[^>]*>*([\s\S]*?)<\/ul>/)[0];let lis = ul.match(/<li[^>]*>*([\s\S]*?)<\/p>/ig);let list = [];if ( lis ) {lis.forEach(li => {const bookId = li.match(/href=\"*([\s\S]*?)\"/)[1];const title = li.match(/title=\"*([\s\S]*?)\"/)[1];const author = li.match(/<h3[^>]*>*([\s\S]*?)<\/h3>/)[1].split('/')[0];const size = li.match(/<h4[^>]*>*([\s\S]*?)<\/h4>/)[1].replace('大小:', '');const desc = li.match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1];list.push(new Book({bookId: bookId,title: htmlDecodeByRegExp(title),author: author,style: params.title,desc: htmlDecodeByRegExp(desc),size: size,isEnd: true,source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 20,currentPage: params.page,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page - 1,source: source}})})})}"
		},
		"getDetail": {
			"label": "书籍详情",
			"value": "function (context, params) {return new Promise(async (resolve) => {const {baseUrl,source} = params;const {ERR_OK,ERR_FALSE,getTag,xhr,gb2312,Book,Chapter,replaceHTML,htmlDecodeByRegExp} = context;let infoHttp = await xhr.get(baseUrl + params.id, {mimeType: 'text/html;charset=gb2312',headers: {Referer: baseUrl,Host: baseUrl.replace('http://', '')}}).then(res => {if (res.code == 200) {let str = replaceHTML(res.data);let mlist = str.match(/<div[^>]*class=([""]?)mlist\1[^>]*>*([\s\S]*?)<\/div>/)[0];let title = mlist.match(/<h1[^\s]>*([\s\S]*?)<\/h1>/)[1];let img = mlist.match(/<img[^>]*border=([""]?)0\1[^>]*>/);let cover = '';if (img) {cover = img[0].match(/src=\"*([\s\S]*?)\"/)[1];}let ul = mlist.match(/<ul[^\s]>*([\s\S]*?)<\/ul>/)[0];let author = ul.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];let style = ul.match(/类型：<\/i[^\s]>*([\s\S]*?)<li>/)[1];let size = ul.match(/大小：<\/i[^\s]>*([\s\S]*?)<\/ul>/)[1];let createTime = mlist.match(/<h3[^\s]>*简介：（入库时间([\s\S]*?)）<\/h3>/)[1];let chapter = str.match(/<a[^>]*class=([""]?)left\1[^>]*>*([\s\S]*?)<\/a>/ig)[1];let chapterId = chapter.match(/href=\"*([\s\S]*?)\"/)[1];let lastIndex = chapterId.lastIndexOf('/');let allLength = chapterId.length;let urlTxt = gb2312(chapterId.substring(lastIndex + 1, allLength));let content = str.match(/<div[^>]*class=([""]?)conten\1[^>]*>*([\s\S]*?)<\/div>/)[0];let desc = content.match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1];desc = desc.replace(/<br\/>/ig, '\n');desc = htmlDecodeByRegExp(desc);let spans = desc.match(/<span[^>]*>*([\s\S]*?)<\/span>/ig);if (spans) {spans.forEach(span => {desc = desc.replace(span, span.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1]);})}let tag = getTag(source, title + '_' + desc + '_' + style);let guess = [];let tjs = str.match(/<div[^>]*class=([""]?)tj\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<ul[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/a>/ig);tjs.forEach(tj => {guess.push(new Book({bookId: tj.match(/href=\"*([\s\S]*?)\"/)[1],title: htmlDecodeByRegExp(tj.match(/title=\"*([\s\S]*?)\"/)[1]),cover: baseUrl + tj.match(/src=\"*([\s\S]*?)\"/)[1],style: style || '',isEnd: true,source: source}))});let sames = [];let other = [];let tjlists = str.match(/<div[^>]*class=([""]?)tjlist\1[^>]*>*([\s\S]*?)<\/div>/ig);tjlists.forEach((tjlist, key) => {let tlis = tjlist.match(/<ul[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/a>/ig);tlis.forEach(li => {let book = new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1],title: htmlDecodeByRegExp(li.match(/title=\"*([\s\S]*?)\"/)[1]),author: key == 1 ? author : '',style: key == 0 ? style : '',isEnd: true,source: source});if (book.bookId != params.id) {if (key == 0) {sames.push(book);} else {other.push(book);}}});});return {bookInfo: {title: htmlDecodeByRegExp(title),cover: cover ? baseUrl + cover : '',author: author,style: style,size: size,desc: htmlDecodeByRegExp(desc),createTime: createTime,tag: tag},guess: guess,sames: sames,other: other,chapterId: chapterId.substr(0, lastIndex + 1) + urlTxt}}}).catch(() => {return {bookInfo: '',guess: [],sames: [],other: [],chapterId: ''}});let chapterHttp = await xhr.get(baseUrl + infoHttp.chapterId, {mimeType: 'text/html;charset=gb2312',headers: {Referer: baseUrl,Host: baseUrl.replace('http://', '')}}).then(res => {if (res.code == 200) {let str = replaceHTML(res.data);let bottom = str.match(/<div[^>]*id=([""]?)gobottom\1[^>]*>*([\s\S]*?)<br\/>/)[0];let lastChapter = bottom.match(/当前是第:    1    \/*([\s\S]*?)页/)[1];let chapters = new Array(lastChapter);for (let i = 0; i <= lastChapter; i++) {chapters[i] = new Chapter({id: infoHttp.chapterId + '&yeshu=' + i,title: '第' + (i + 1) + '页',chapter: i + 1,isStart: i == 0,isEnd: i == lastChapter,source: source})};return chapters;}}).catch(() => {return []});console.log(infoHttp);resolve({code: ERR_OK,data: {bookInfo: infoHttp.bookInfo,guess: infoHttp.guess,sames: infoHttp.sames,other: infoHttp.other,chapters: chapterHttp,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {bookInfo: '',guess: [],sames: [],other: [],chapters: [],source: source}})})}"
		},
		"getContent": {
			"label": "书籍内容",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {xhr,ERR_OK,ERR_FALSE,replaceHTML} = context;xhr.get(baseUrl + params.id, {mimeType: 'text/html;charset=gb2312',headers: {Referer: baseUrl,Host: baseUrl.replace('http://', '')}}).then(res => {let result = {};if ( res.code == 200 ) {let str = replaceHTML(res.data);let content = str.match(/<span[^>]*id=([""]?)Content\1[^>]*>*([\s\S]*?)<\/span>/);let unstr = content[2].match(/<font[^>]*>*([\s\S]*?)<\/font>/);content = content[2].replace(unstr[0], '');content = content.replace('</font>', '');content = content.replace(/<br \/>/ig, '\n');content = content.replace(/<br>/ig, '\n');result = {chapter: params.chapter,content: content,title: params.title,isStart: params.isStart,isEnd: params.isEnd}}resolve({code: ERR_OK,data: {content: result,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {content: '',source: source}})})})}"
		}
	}
}