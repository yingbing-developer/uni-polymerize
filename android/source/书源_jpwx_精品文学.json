{
	"id": "jpwx",
	"title": "精品文学",
	"href": "https://www.jpwx01.xyz",
	"isAdult": true,
	"type": "story",
	"request": {
		"getRecome": {
			"label": "获取热门推荐",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,Bookshelf,replaceHTML} = context;http.get(baseUrl, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then(res => {let str = replaceHTML(res.data);let populars = [];let lis = str.match(/<ul[^>]*class=([""]?)flex\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {populars.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/book\/*([\s\S]*?)\//)[1],title: li.match(/title=\"*([\s\S]*?)\"/)[1],cover: li.match(/src=\"*([\s\S]*?)\"/)[1],author: li.match(/<i[^>]*class=([""]?)fa fa-user-circle-o\1[^>]*>*([\s\S]*?)<\/i>/)[2].replace(/\s/ig,''),desc: li.match(/<p[^>]*class=([""]?)indent\1[^>]*>*([\s\S]*?)<\/p>/)[2],style: li.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1].split(' / ')[0],isEnd: li.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1].split(' / ')[1] == '全本',size: li.match(/<em[^>]*class=([""]?)orange\1[^>]*>*([\s\S]*?)<\/em>/)[2],updateTime: li.match(/<em[^>]*class=([""]?)blue\1[^>]*>*([\s\S]*?)<\/em>/)[2],type: 'story',isAdult: true,source: source}))})}let hotBooks = [];let updates = [];let ffs = str.match(/<ul[^>]*class=([""]?)popular odd\1[^>]*>*([\s\S]*?)<\/ul>/ig);if (ffs) {ffs.forEach((ff, i) => {lis = ff.match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if ( lis ) {lis.forEach(li => {let book = new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/book\/*([\s\S]*?)\//)[1],title: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],author: li.match(/<a[^>]*class=([""]?)gray\1[^>]*>*([\s\S]*?)<\/a>/)[2],type: 'story',isAdult: true,source: source});if ( i == 0 ) {hotBooks.push(book)} else {updates.push(book)}})}})}lis = str.match(/<div[^>]*class=([""]?)lastupdate\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {updates.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/book\/*([\s\S]*?)\//)[1],title: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],author: li.match(/<a[^>]*class=([""]?)gray\1[^>]*>*([\s\S]*?)<\/a>/ig)[1].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],style: li.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1].match(/「*([\s\S]*?)」/)[1],lastChapter: li.match(/<a[^>]*class=([""]?)gray\1[^>]*>*([\s\S]*?)<\/a>/)[2],type: 'story',isAdult: true,source: source}))})}let hotTypes = [];let tts = str.match(/<div[^>]*class=([""]?)sortvisit\1[^>]*>*([\s\S]*?)<\/ul>/ig);if (tts) {tts.forEach((tt, i) => {hotTypes.push(new Bookshelf({shelfId: tt.match(/href=\"*([\s\S]*?)\"/)[1],title: tt.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],cover: tt.match(/data-original=\"*([\s\S]*?)\"/)[1],style: 'type',type: 'story',isAdult: true,source: source}));lis = tt.match(/<ul[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>|<div[^>]*>*([\s\S]*?)<\/div>/ig);if (lis) {lis.forEach((li, key) => {hotTypes[hotTypes.length - 1].book.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/book\/*([\s\S]*?)\//)[1],title: key == 0 ? li.match(/title=\"*([\s\S]*?)\"/)[1] : li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],cover: key == 0 ? li.match(/data-original=\"*([\s\S]*?)\"/)[1] : '',author: li.match(/<i[^>]*>*([\s\S]*?)<\/i>/)[1] .replace('/ ', ''),desc: key == 0 ? li.match(/<br[^>]*>*([\s\S]*?)<\/p>/)[1] : '',type: 'story',isAdult: true,source: source}))})}})}resolve({code: ERR_OK,data: {hotTypes: hotTypes,updates: updates,hotBooks: hotBooks,populars: populars,source: source}})}).catch(() => {resolve({code: ERR_FALSE,data: {source: source}})})})}"
		},
		"search": {
			"label": "搜索功能",
			"value": "function(context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML,Book} = context;http.get(baseUrl + '/search/', {params: {searchkey: params.keyword,searchtype: 'all',Submit: ''},headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let con = str.match(/<ul[^>]*class=([""]?)flex\1[^>]*>*([\s\S]*?)<\/ul>/);if (con) {let lis = con[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {let author = li.match(/<i[^>]*class=([""]?)fa fa-user-circle-o\1[^>]*>*([\s\S]*?)<span[^>]*class=([""]?)s_gray\1[^>]*>/)[2];author = author.replace('</i>', '');let hots = author.match(/<span[^>]*class=([""]?)hot\1[^>]*>*([\s\S]*?)<\/span>/ig);if ( hots ) {hots.forEach(hot => {author = author.replace(hot, hot.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1])})}list.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/book\/*([\s\S]*?)\//)[1],title: li.match(/title=\"*([\s\S]*?)\"/)[1],cover: li.match(/data-original=\"*([\s\S]*?)\"/)[1],author: author,style: li.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1].split(' / ')[0],isEnd: li.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1].split(' / ')[1] == '全本',desc: li.match(/<p[^>]*class=([""]?)searchresult_p\1[^>]*>*([\s\S]*?)<\/p>/)[2],lastChapter: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/ig)[2].match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],type: 'story',isAdult: true,source: source}))})}}resolve({code: ERR_OK,data: {list: list,isLastPage: true,currentPage: params.page[source],source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page[source] - 1,source: source}})})})}"
		},
		"getTypeList": {
			"label": "分类列表",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML} = context;http.get(baseUrl + '/sort/', {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let con = str.match(/<div[^>]*id=([""]?)store_right\1[^>]*>*([\s\S]*?)<\/div>/)[0];let lis = con.match(/<a[^>]*>*([\s\S]*?)<\/a>/ig);if (lis) {lis.forEach(li => {list.push({label: li.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1],value: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/sort\/*([\s\S]*?)\//)[1],source: source})})}resolve({code: ERR_OK,data: {list: list,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],source: source}})})})}"
		},
		"getTypeDetail": {
			"label": "分类详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,Book,replaceHTML,} = context;http.get(baseUrl + '/sort/' + params.id + '/' + params.page + '/', {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let list = [];let str = replaceHTML(res.data);let lis = str.match(/<ul[^>]*class=([""]?)flex\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach(li => {list.push(new Book({bookId: li.match(/href=\"*([\s\S]*?)\"/)[1].match(/book\/*([\s\S]*?)\//)[1],title: li.match(/title=\"*([\s\S]*?)\"/)[1],cover: li.match(/data-original=\"*([\s\S]*?)\"/)[1],author: li.match(/<i[^>]*class=([""]?)fa fa-user-circle-o\1[^>]*>*([\s\S]*?)<\/i>/)[2].replace(/\s/ig, ''),desc: li.match(/<p[^>]*class=([""]?)indent\1[^>]*>*([\s\S]*?)<\/p>/)[2],style: li.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1].split(' / ')[0],isEnd: li.match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1].split(' / ')[1] == '全本',size: li.match(/<em[^>]*class=([""]?)orange\1[^>]*>*([\s\S]*?)<\/em>/)[2],updateTime: li.match(/<em[^>]*class=([""]?)blue\1[^>]*>*([\s\S]*?)<\/em>/)[2],type: 'story',isAdult: true,source: source}))})}resolve({code: ERR_OK,data: {list: list,isLastPage: list.length < 10,currentPage: params.page,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {list: [],isLastPage: false,currentPage: params.page - 1,source: source}})})})}"
		},
		"getDetail": {
			"label": "书籍详情",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML,getTag,Chapter,Book} = context;http.get(baseUrl + '/book/' + params.id + '/', {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', ''),'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'}}).then((res) => {let str = replaceHTML(res.data);let main = str.match(/<div[^>]*class=([""]?)novel_info_main\1[^>]*>*([\s\S]*?)<\/div>/)[0];let cover = main.match(/src=\"*([\s\S]*?)\"/)[1];let title = main.match(/alt=\"*([\s\S]*?)\"/)[1];let info = str.match(/<div[^>]*class=([""]?)novel_info_title\1[^>]*>*([\s\S]*?)<\/div>/)[0];let author = info.match(/<a[^>]*>*([\s\S]*?)<\/a>/)[1];let spans = info.match(/<span[^>]*>*([\s\S]*?)<\/span>/ig);let style = spans[0].match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1];let size = spans[1].match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1];let isEnd = spans[2].match(/<span[^>]*>*([\s\S]*?)<\/span>/)[1] == '全本';let updateTime = str.match(/<em[^>]*class=([""]?)s_gray\1[^>]*>*([\s\S]*?)<\/em>/)[2];let ps = str.match(/<div[^>]*class=([""]?)intro\1[^>]*>*([\s\S]*?)<\/div>/)[0].match(/<p[^>]*>*([\s\S]*?)<\/p>/ig);let desc = '';if ( ps ) {ps.forEach(p => {desc += p.match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1] + '\n'})}desc = desc.replace('<p>', '');let tag = getTag(source, desc + '_' + style + '_' + title);let chapters = [];let lis = str.match(/<ul[^>]*id=([""]?)ul_all_chapters\1[^>]*>*([\s\S]*?)<\/ul>/)[0].match(/<li[^>]*>*([\s\S]*?)<\/li>/ig);if (lis) {lis.forEach((li, key) => {chapters.push(new Chapter({id: li.match(/href=\"*([\s\S]*?)\"/)[1],chapter: key + 1,title: li.match(/title=\"*([\s\S]*?)\"/)[1],isStart: key == 0,isEnd: key == lis.length - 1,source: source}));})}resolve({code: ERR_OK,data: {bookInfo: {title: title,cover: cover,desc: desc,author: author,tag: tag,style: style,size: size,isEnd: isEnd,updateTime: updateTime,},chapters: chapters,source: source}})}).catch((err) => {resolve({code: ERR_FALSE,data: {bookInfo: {},source: source}})})})}"
		},
		"getContent": {
			"label": "书籍内容",
			"value": "function (context, params) {return new Promise(resolve => {const {baseUrl,source} = params;const {http,ERR_OK,ERR_FALSE,replaceHTML,htmlDecodeByRegExp} = context;http.get(baseUrl + params.id, {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', '')}}).then((res) => {let str = replaceHTML(res.data);let num = str.match(/<p[^>]*class=([""]?)style_h1\1[^>]*>*([\s\S]*?)<\/p>/)[2].match(/（*([\s\S]*?)）/)[1].split(' / ')[1];let arr = [];for ( let i = 1; i <= num; i++ ) {arr.push(http.get(baseUrl + params.id.replace('.html', '_' + i + '.html'), {headers: {Referer: baseUrl,Host: baseUrl.replace('https://', '')}}))}Promise.all(arr).then(ress => {let content = '';ress.forEach(ret => {let sstr = replaceHTML(ret.data);let ps = sstr.match(/<article[^>]*class=([""]?)content\1[^>]*>*([\s\S]*?)<\/article>/)[2].match(/<p[^>]*>*([\s\S]*?)<\/p>/ig);if (ps) {ps.forEach(p => {content += '     ' + p.match(/<p[^>]*>*([\s\S]*?)<\/p>/)[1] + '\r\n';})}});resolve({code: ERR_OK,data: {content: {title: params.title,chapter: params.chapter,content: htmlDecodeByRegExp(content),isStart: params.isStart,isEnd: params.isEnd},source: source}})}).catch(err => {resolve({code: ERR_FALSE,data: {content: '',source: source}})})}).catch((err) => {resolve({code: ERR_FALSE,data: {content: '',source: source}})})})}"
		}
	}
}