<template>
	<view class="pannel" :style="{position: position}" v-if="visibleSync">
		<yb-mask ref="mask" :top="offset" :style="{opacity: 0}" @click="hide" :color="hideMaskColor ? 'rgba(0,0,0,0)' : 'rgba(0,0,0,0.5)'" v-if="!hideMask" />
		<view class="popup" ref="popup" :style="popupStyle">
			<slot></slot>
		</view>
	</view>
</template>

<script>
	const animation = weex.requireModule('animation');
	export default {
		props: {
			offset: {
				type: Number | String,
				default: 0
			},
			direction: {
				type: String,
				default: 'bottom'
			},
			height: {
				type: Number | String,
				default: 0
			},
			width: {
				type: Number,
				default: 0
			},
			//关闭动画 fade/auto
			popout: {
				type: String,
				default: 'auto'
			},
			duration: {
				type: Number,
				default: 500
			},
			//是否显示，支持.sync
			visible: {
				type: Boolean,
				default: false
			},
			//隐藏遮罩层的颜色
			hideMaskColor: {
				type: Boolean,
				default: false
			},
			//关闭遮罩层
			hideMask: {
				type: Boolean,
				default: false
			},
			position: {
				type: String,
				default: 'fixed'
			}
		},
		data () {
			return {
				opac: 1,
				visibleSync: false
			}
		},
		computed: {
			popupStyle () {
				return this.direction == 'bottom' ? {
					position: this.position,
					bottom: this.offset,
					left: 0,
					right: 0,
					height: this.height,
					transform: 'translateY(' + this.height + ')'
				} : this.direction == 'top' ? {
					position: this.position,
					top: this.offset,
					left: 0,
					right: 0,
					height: this.height,
					transform: 'translateY(-' + this.height + ')'
				} : this.direction == 'left' ? {
					position: this.position,
					bottom: 0,
					left: this.offset,
					top: 0,
					width: this.width,
					transform: 'translateX(-' + this.width + ')'
				} : {
					position: this.position,
					bottom: 0,
					right: this.offset,
					top: 0,
					width: this.width,
					transform: 'translateX(' + this.width + ')'
				}
			}
		},
		created() {
			this.visibleSync = this.visible
		},
		mounted () {
			if ( this.visible ) {
				this.show()
			}
		},
		methods: {
			show () {
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: this.opac
				    },
				    duration: this.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				const styles = this.getShowStyles()
				animation.transition(this.$refs.popup, {
				    styles: styles,
				    duration: this.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
			},
			getShowStyles () {
				return {
					transform: 'translate(0)'
				}
				// if ( this.animationType.indexOf('slide') > -1 ) {
				// 	return {
				// 		transform: 'translate(0)'
				// 	}
				// } else if ( this.animationType == 'zoom-out' ) {
				// 	return {
				// 		transform: 'scale(1)'
				// 	}
				// } else {
				// 	return {
				// 		opacity: 1
				// 	}
				// }
			},
			getHideStyles () {
				if ( this.popout == 'auto' ) {
					return this.direction == 'bottom' ? {
						transform: 'translateY(' + this.height + ')'
					} : this.direction == 'top' ? {
						transform: 'translateY(-' + this.height + ')'
					} : this.direction == 'left' ? {
						transform: 'translateX(-' + this.width + ')'
					} : {
						transform: 'translateX(' + this.width + ')'
					}
				} else {
					return {
						opacity: 0
					}
				}
			},
			hide () {
				animation.transition(this.$refs.mask, {
				    styles: {
						opacity: 0
				    },
				    duration: this.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				const styles = this.getHideStyles()
				animation.transition(this.$refs.popup, {
				    styles: styles,
				    duration: this.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				},(res) => {
					this.$emit('update:visible', false)
					this.visibleSync = false
					this.$emit('hide')
				})
			}
		},
		watch: {
			visible (newVal) {
				if ( newVal ) {
					this.visibleSync = newVal
					setTimeout(() => {
						this.show()
					}, 30)
				} else {
					this.hide()
				}
			}
		}
	}
</script>

<style scoped>
	.pannel {
		/* position: fixed; */
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
	.popup {
		/* position: fixed; */
	}
</style>
