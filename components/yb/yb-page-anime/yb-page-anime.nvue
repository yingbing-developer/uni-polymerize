<template>
	<view>
		<view class="mask" :style="{opacity: opacity}"></view>
		<view class="yb-page-anime" ref="ybPageAnime" v-if="touch"
		:style="{
			transform: transform,
			opacity: opacity,
			'background-color': bgColor
		}">
			<slot></slot>
		</view>
		<view class="yb-page-anime" ref="ybPageAnime" @touchmove.stop.prevent="" v-else
		:style="{
			transform: transform,
			opacity: opacity,
			'background-color': bgColor
		}">
			<slot></slot>
		</view>
	</view>
</template>

<script>
	export default {
		props: {
			bgColor: {
				type: String,
				default: '#FAFAFA'
			},
			animationType: {
				type: String,
				default: 'slide-in-right'
			},
			duration: {
				type: Number,
				default: 300
			},
			//是否允许点击穿透
			touch: {
				type: Boolean,
				default: false
			},
			//是否是tabbar页面
			tabbar: {
				type: Boolean,
				default: false
			}
		},
		data () {
			return {
				transform: '',
				opacity: 0,
				isBack: false
			}
		},
		beforeCreate() {
			const pages = getCurrentPages()
			if ( pages.length - 2 >= 0 ) {
				const page = pages[pages.length - 2]
				if ( page.$vm.$refs.ybPageAnime ) {
					page.$vm.$refs.ybPageAnime.hide()
				}
			}
		},
		created () {
			if ( !this.tabbar ) {
				this.init()
				this.onBack()
			} else {
				this.opacity = 1
				const pages = getCurrentPages()
				const page = pages[pages.length - 1]
				const shows = page.$vm.$options.onShow
				const showEvnet = (e) => {
					shows ? shows[0](e) : false
					uni.showTabBar()
				}
				page.$vm.$options.onShow = new Array(0)
				page.$vm.$options.onShow.push(showEvnet)
			}
		},
		mounted () {
			setTimeout(() => {
				this.pushin()
			}, 20)
		},
		methods: {
			init () {
				switch (this.animationType) {
					case 'slide-in-right':
						const windowWidth = uni.getSystemInfoSync().windowWidth
						this.transform = 'translateX(' + windowWidth + 'px)'
						break
					case 'slide-in-bottom':
						const windowHeight = uni.getSystemInfoSync().windowHeight
						this.transform = 'translateY(' + windowHeight + 'px)'
						break
					case 'zoom-out':
						this.transform = 'scale(0)'
						break
					default:
						this.transform = ''
				}
			},
			//页面显示时效果
			show () {
				const animation = weex.requireModule('animation');
				// #ifdef APP-NVUE
				animation.transition(this.$refs.ybPageAnime, {
				    styles: {
						transform: 'scale(1)'
				    },
				    duration: this.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				// #endif
				// #ifndef APP-NVUE
				this.transform = 'scale(1)'
				// #endif
			},
			//页面隐藏时效果
			hide () {
				const animation = weex.requireModule('animation');
				// #ifdef APP-NVUE
				animation.transition(this.$refs.ybPageAnime, {
				    styles: {
						transform: 'scale(0.97)'
				    },
				    duration: this.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				// #endif
				// #ifndef APP-NVUE
				this.transform = 'scale(0.97)'
				// #endif
			},
			pushin () {
				const animation = weex.requireModule('animation');
				const transform = this.animationType == 'slide-in-right' ? 'translateX(0)' : this.animationType == 'zoom-out' ? 'scale(1)' : 'translateY(0)'
				// #ifdef APP-NVUE
				animation.transition(this.$refs.ybPageAnime, {
				    styles: {
						transform: transform,
						opacity: 1
				    },
				    duration: this.duration, //ms
				    timingFunction: 'ease',
				    needLayout:false,
				    delay: 0 //ms
				})
				// #endif
				// #ifndef APP-NVUE
				this.transform = transform
				this.opacity = 1
				// #endif
				
			},
			popout () {
				this.isBack = true
				let animationType = ''
				switch (this.animationType) {
					case 'slide-in-right':
						animationType = 'slide-out-right'
						break
					case 'slide-in-bottom':
						animationType = 'slide-out-bottom'
						break
					case 'zoom-out':
						animationType = 'zoom-in'
						break
					default:
						animationType = 'fade-out'
				}
				const pages = getCurrentPages()
				if ( pages.length - 2 >= 0 ) {
					const page = pages[pages.length - 2]
					if ( page.$vm.$refs.ybPageAnime ) {
						page.$vm.$refs.ybPageAnime.show()
					}
				}
				uni.navigateBack({
					animationType: animationType,
					animationDuration: this.duration,
					delta: 1
				})
			},
			onBack () {
				const pages = getCurrentPages()
				const page = pages[pages.length - 1]
				const backs = page.$vm.$options.onBackPress
				const evnet = (e) => {
					const bol = backs ? backs[0](e) : false
					if ( bol ) return bol
					if ( !this.isBack ) {
						this.popout()
						return true;
					}
					return false
				}
				page.$vm.$options.onBackPress = new Array(0)
				page.$vm.$options.onBackPress.push(evnet)
			}
		}
	}
</script>

<style scoped>
	/* #ifdef APP-NVUE */
	.yb-page-anime {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		opacity: 0;
	}
	/* #endif */
	
	/* #ifndef APP-NVUE */
	.yb-page-anime {
		width: 100vw;
		min-height: 100vh;
		transition: all .3s;
		opacity: 0;
	}
	/* #endif */
	.mask {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: #000000;
	}
</style>
