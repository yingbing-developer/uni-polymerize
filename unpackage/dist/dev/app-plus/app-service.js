(this["webpackJsonp"] = this["webpackJsonp"] || []).push([["app-service"],[
/* 0 */
/*!********************************************!*\
  !*** G:/my-project/uni-polymerize/main.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("__webpack_require__(/*! uni-pages */ 1);var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 2));\nvar _App = _interopRequireDefault(__webpack_require__(/*! ./App */ 3));\nvar _store = _interopRequireDefault(__webpack_require__(/*! ./store */ 17));\n__webpack_require__(/*! @/plugins */ 59);\n__webpack_require__(/*! @/assets/js */ 60);\nvar _api = _interopRequireDefault(__webpack_require__(/*! @/assets/api */ 56));\nvar _index = _interopRequireDefault(__webpack_require__(/*! @/js_sdk/yb-native-ui/index.js */ 33));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n_vue.default.config.productionTip = false;\n\n_vue.default.prototype.$api = _api.default;\n_vue.default.prototype.$nativeUI = _index.default;\n\n_App.default.mpType = 'app';\n\nvar app = new _vue.default(_objectSpread(_objectSpread({},\n_App.default), {}, {\n  store: _store.default }));\n\napp.$mount();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbWFpbi5qcyJdLCJuYW1lcyI6WyJWdWUiLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwicHJvdG90eXBlIiwiJGFwaSIsImFwaSIsIiRuYXRpdmVVSSIsIk5hdGl2ZVVJIiwiQXBwIiwibXBUeXBlIiwiYXBwIiwic3RvcmUiLCIkbW91bnQiXSwibWFwcGluZ3MiOiJBQUFBLHdDQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUc7O0FBRUFBLGFBQUlDLE1BQUosQ0FBV0MsYUFBWCxHQUEyQixLQUEzQjs7QUFFQUYsYUFBSUcsU0FBSixDQUFjQyxJQUFkLEdBQXFCQyxZQUFyQjtBQUNBTCxhQUFJRyxTQUFKLENBQWNHLFNBQWQsR0FBMEJDLGNBQTFCOztBQUVBQyxhQUFJQyxNQUFKLEdBQWEsS0FBYjs7QUFFQSxJQUFNQyxHQUFHLEdBQUcsSUFBSVYsWUFBSjtBQUNMUSxZQURLO0FBRVhHLE9BQUssRUFBTEEsY0FGVyxJQUFaOztBQUlBRCxHQUFHLENBQUNFLE1BQUoiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcclxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCdcclxuaW1wb3J0IHN0b3JlIGZyb20gJy4vc3RvcmUnLy/lvJXlhaV2dWV4XHJcbmltcG9ydCAnQC9wbHVnaW5zJ1xyXG5pbXBvcnQgJ0AvYXNzZXRzL2pzJ1xyXG5pbXBvcnQgYXBpIGZyb20gJ0AvYXNzZXRzL2FwaSdcclxuaW1wb3J0IE5hdGl2ZVVJIGZyb20gJ0AvanNfc2RrL3liLW5hdGl2ZS11aS9pbmRleC5qcydcclxuXHJcblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlXHJcblxyXG5WdWUucHJvdG90eXBlLiRhcGkgPSBhcGlcclxuVnVlLnByb3RvdHlwZS4kbmF0aXZlVUkgPSBOYXRpdmVVSVxyXG5cclxuQXBwLm1wVHlwZSA9ICdhcHAnXHJcblxyXG5jb25zdCBhcHAgPSBuZXcgVnVlKHtcclxuICAgIC4uLkFwcCxcclxuXHRzdG9yZVxyXG59KVxyXG5hcHAuJG1vdW50KCkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!***********************************************!*\
  !*** G:/my-project/uni-polymerize/pages.json ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


if (typeof Promise !== 'undefined' && !Promise.prototype.finally) {
  Promise.prototype.finally = function (callback) {
    var promise = this.constructor;
    return this.then(
    function (value) {return promise.resolve(callback()).then(function () {return value;});},
    function (reason) {return promise.resolve(callback()).then(function () {
        throw reason;
      });});

  };
}

if (uni.restoreGlobal) {
  uni.restoreGlobal(weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}

/***/ }),
/* 2 */
/*!**********************!*\
  !*** external "Vue" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Vue;

/***/ }),
/* 3 */
/*!********************************************!*\
  !*** G:/my-project/uni-polymerize/App.vue ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ 4);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 58);\nvar render, staticRenderFns, recyclableRender, components\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"App.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUN1RDtBQUNMOzs7QUFHbEQ7QUFDcUs7QUFDckssZ0JBQWdCLCtLQUFVO0FBQzFCLEVBQUUseUVBQU07QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNlLGdGIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMsIHJlY3ljbGFibGVSZW5kZXIsIGNvbXBvbmVudHNcbnZhciByZW5kZXJqc1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiFGOlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXHJ1bnRpbWVcXFxcY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGwsXG4gIGZhbHNlLFxuICBjb21wb25lbnRzLFxuICByZW5kZXJqc1xuKVxuXG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIkFwcC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!*********************************************************************!*\
  !*** G:/my-project/uni-polymerize/App.vue?vue&type=script&lang=js& ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _F_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./App.vue?vue&type=script&lang=js& */ 5);\n/* harmony import */ var _F_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_F_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _F_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _F_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_F_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_F_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQThoQixDQUFnQixpa0JBQUcsRUFBQyIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSFGOlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxiYWJlbC1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzIUY6XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS02LTEhRjpcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXVuaS1hcHAtbG9hZGVyXFxcXHVzaW5nLWNvbXBvbmVudHMuanMhRjpcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSFGOlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxiYWJlbC1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzIUY6XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS02LTEhRjpcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXVuaS1hcHAtbG9hZGVyXFxcXHVzaW5nLWNvbXBvbmVudHMuanMhRjpcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!G:/my-project/uni-polymerize/App.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\nvar _router = __webpack_require__(/*! @/plugins/router/router.js */ 7);\n\n\nvar _router2 = _interopRequireDefault(__webpack_require__(/*! @/plugins/router */ 8));\nvar _request = _interopRequireDefault(__webpack_require__(/*! @/plugins/request */ 9));\nvar _xhr = _interopRequireDefault(__webpack_require__(/*! @/plugins/xhr */ 12));\nvar _dom = _interopRequireDefault(__webpack_require__(/*! @/plugins/dom */ 14));\nvar _util = _interopRequireDefault(__webpack_require__(/*! @/assets/js/util.js */ 15));\nvar _config = _interopRequireDefault(__webpack_require__(/*! @/assets/js/config.js */ 11));\nvar _business = _interopRequireDefault(__webpack_require__(/*! @/assets/js/business.js */ 16));\nvar _index = _interopRequireDefault(__webpack_require__(/*! @/assets/api/index.js */ 56));\nvar _index2 = _interopRequireDefault(__webpack_require__(/*! @/js_sdk/yb-native-ui/index.js */ 33));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n  globalData: {\n    $Router: _router2.default,\n    $Route: new _router.Route(),\n    $http: _request.default,\n    $xhr: _xhr.default,\n    $dom: _dom.default,\n    $utils: _util.default,\n    $config: _config.default,\n    $business: _business.default,\n    $api: _index.default,\n    $nativeUI: _index2.default },\n\n  onLaunch: function onLaunch() {\n    __f__(\"log\", 'App Launch', \" at App.vue:28\");\n    plus.screen.lockOrientation('portrait-primary');\n    //重写toast方法如果内容为 ‘再次返回退出应用’ 就隐藏应用，其他正常toast\n    var toast = plus.nativeUI.toast;\n    plus.nativeUI.toast = function (message, styles) {\n      if (message == '再按一次退出应用') {\n        _index2.default.confirm({\n          content: '真的要退出app吗？',\n          confirmText: '隐藏至后台',\n          cancelText: '直接退出',\n          success: function success(res) {\n            if (res.confirm) {\n              plus.android.runtimeMainActivity().moveTaskToBack(false);\n            }\n            if (res.cancel) {\n              plus.runtime.quit();\n            }\n          } });\n\n      } else {\n        toast(message, styles);\n      }\n    };\n  },\n  onShow: function onShow() {\n    __f__(\"log\", 'App Show', \" at App.vue:53\");\n  },\n  onHide: function onHide() {\n    __f__(\"log\", 'App Hide', \" at App.vue:56\");\n    uni.$emit('app-hide');\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 6)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vQXBwLnZ1ZSJdLCJuYW1lcyI6WyJnbG9iYWxEYXRhIiwiJFJvdXRlciIsIlJvdXRlciIsIiRSb3V0ZSIsIlJvdXRlIiwiJGh0dHAiLCJIdHRwIiwiJHhociIsIlhociIsIiRkb20iLCJEb20iLCIkdXRpbHMiLCJVdGlscyIsIiRjb25maWciLCJDb25maWciLCIkYnVzaW5lc3MiLCJCdXNpbmVzcyIsIiRhcGkiLCJBcGkiLCIkbmF0aXZlVUkiLCJOYXRpdmVVSSIsIm9uTGF1bmNoIiwicGx1cyIsInNjcmVlbiIsImxvY2tPcmllbnRhdGlvbiIsInRvYXN0IiwibmF0aXZlVUkiLCJtZXNzYWdlIiwic3R5bGVzIiwiY29uZmlybSIsImNvbnRlbnQiLCJjb25maXJtVGV4dCIsImNhbmNlbFRleHQiLCJzdWNjZXNzIiwicmVzIiwiYW5kcm9pZCIsInJ1bnRpbWVNYWluQWN0aXZpdHkiLCJtb3ZlVGFza1RvQmFjayIsImNhbmNlbCIsInJ1bnRpbWUiLCJxdWl0Iiwib25TaG93Iiwib25IaWRlIiwidW5pIiwiJGVtaXQiXSwibWFwcGluZ3MiOiI7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9HO0FBQ2U7QUFDZEEsWUFBVSxFQUFFO0FBQ1hDLFdBQU8sRUFBRUMsZ0JBREU7QUFFWEMsVUFBTSxFQUFFLElBQUlDLGFBQUosRUFGRztBQUdYQyxTQUFLLEVBQUVDLGdCQUhJO0FBSVhDLFFBQUksRUFBRUMsWUFKSztBQUtYQyxRQUFJLEVBQUVDLFlBTEs7QUFNWEMsVUFBTSxFQUFFQyxhQU5HO0FBT1hDLFdBQU8sRUFBRUMsZUFQRTtBQVFYQyxhQUFTLEVBQUVDLGlCQVJBO0FBU1hDLFFBQUksRUFBRUMsY0FUSztBQVVYQyxhQUFTLEVBQUVDLGVBVkEsRUFERTs7QUFhZEMsVUFBUSxFQUFFLG9CQUFXO0FBQ3BCLGlCQUFZLFlBQVo7QUFDQUMsUUFBSSxDQUFDQyxNQUFMLENBQVlDLGVBQVosQ0FBNEIsa0JBQTVCO0FBQ0E7QUFDQSxRQUFNQyxLQUFLLEdBQUdILElBQUksQ0FBQ0ksUUFBTCxDQUFjRCxLQUE1QjtBQUNBSCxRQUFJLENBQUNJLFFBQUwsQ0FBY0QsS0FBZCxHQUF1QixVQUFTRSxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUNoRCxVQUFJRCxPQUFPLElBQUksVUFBZixFQUEyQjtBQUMxQlAsd0JBQVNTLE9BQVQsQ0FBaUI7QUFDaEJDLGlCQUFPLEVBQUUsWUFETztBQUVoQkMscUJBQVcsRUFBRSxPQUZHO0FBR2hCQyxvQkFBVSxFQUFFLE1BSEk7QUFJaEJDLGlCQUFPLEVBQUUsaUJBQUNDLEdBQUQsRUFBUztBQUNqQixnQkFBS0EsR0FBRyxDQUFDTCxPQUFULEVBQW1CO0FBQ2xCUCxrQkFBSSxDQUFDYSxPQUFMLENBQWFDLG1CQUFiLEdBQW1DQyxjQUFuQyxDQUFrRCxLQUFsRDtBQUNBO0FBQ0QsZ0JBQUtILEdBQUcsQ0FBQ0ksTUFBVCxFQUFrQjtBQUNqQmhCLGtCQUFJLENBQUNpQixPQUFMLENBQWFDLElBQWI7QUFDQTtBQUNELFdBWGUsRUFBakI7O0FBYUEsT0FkRCxNQWNPO0FBQ05mLGFBQUssQ0FBQ0UsT0FBRCxFQUFVQyxNQUFWLENBQUw7QUFDQTtBQUNELEtBbEJEO0FBbUJBLEdBckNhO0FBc0NkYSxRQUFNLEVBQUUsa0JBQVc7QUFDbEIsaUJBQVksVUFBWjtBQUNBLEdBeENhO0FBeUNkQyxRQUFNLEVBQUUsa0JBQVc7QUFDbEIsaUJBQVksVUFBWjtBQUNBQyxPQUFHLENBQUNDLEtBQUosQ0FBVSxVQUFWO0FBQ0EsR0E1Q2EsRSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge1xuXHRSb3V0ZVxufSBmcm9tICdAL3BsdWdpbnMvcm91dGVyL3JvdXRlci5qcyc7XG5pbXBvcnQgUm91dGVyIGZyb20gJ0AvcGx1Z2lucy9yb3V0ZXInO1xuaW1wb3J0IEh0dHAgZnJvbSAnQC9wbHVnaW5zL3JlcXVlc3QnXG5pbXBvcnQgWGhyIGZyb20gJ0AvcGx1Z2lucy94aHInXG5pbXBvcnQgRG9tIGZyb20gJ0AvcGx1Z2lucy9kb20nXG5pbXBvcnQgVXRpbHMgZnJvbSAnQC9hc3NldHMvanMvdXRpbC5qcydcbmltcG9ydCBDb25maWcgZnJvbSAnQC9hc3NldHMvanMvY29uZmlnLmpzJ1xuaW1wb3J0IEJ1c2luZXNzIGZyb20gJ0AvYXNzZXRzL2pzL2J1c2luZXNzLmpzJ1xuaW1wb3J0IEFwaSBmcm9tICdAL2Fzc2V0cy9hcGkvaW5kZXguanMnXG5pbXBvcnQgTmF0aXZlVUkgZnJvbSAnQC9qc19zZGsveWItbmF0aXZlLXVpL2luZGV4LmpzJ1xuZXhwb3J0IGRlZmF1bHQge1xuXHRnbG9iYWxEYXRhOiB7XG5cdFx0JFJvdXRlcjogUm91dGVyLFxuXHRcdCRSb3V0ZTogbmV3IFJvdXRlKCksXG5cdFx0JGh0dHA6IEh0dHAsXG5cdFx0JHhocjogWGhyLFxuXHRcdCRkb206IERvbSxcblx0XHQkdXRpbHM6IFV0aWxzLFxuXHRcdCRjb25maWc6IENvbmZpZyxcblx0XHQkYnVzaW5lc3M6IEJ1c2luZXNzLFxuXHRcdCRhcGk6IEFwaSxcblx0XHQkbmF0aXZlVUk6IE5hdGl2ZVVJXG5cdH0sXG5cdG9uTGF1bmNoOiBmdW5jdGlvbigpIHtcblx0XHRjb25zb2xlLmxvZygnQXBwIExhdW5jaCcpXG5cdFx0cGx1cy5zY3JlZW4ubG9ja09yaWVudGF0aW9uKCdwb3J0cmFpdC1wcmltYXJ5Jyk7XG5cdFx0Ly/ph43lhpl0b2FzdOaWueazleWmguaenOWGheWuueS4uiDigJjlho3mrKHov5Tlm57pgIDlh7rlupTnlKjigJkg5bCx6ZqQ6JeP5bqU55So77yM5YW25LuW5q2j5bi4dG9hc3Rcblx0XHRjb25zdCB0b2FzdCA9IHBsdXMubmF0aXZlVUkudG9hc3Q7XG5cdFx0cGx1cy5uYXRpdmVVSS50b2FzdCA9IChmdW5jdGlvbihtZXNzYWdlLCBzdHlsZXMpIHtcblx0XHRcdGlmIChtZXNzYWdlID09ICflho3mjInkuIDmrKHpgIDlh7rlupTnlKgnKSB7XG5cdFx0XHRcdE5hdGl2ZVVJLmNvbmZpcm0oe1xuXHRcdFx0XHRcdGNvbnRlbnQ6ICfnnJ/nmoTopoHpgIDlh7phcHDlkJfvvJ8nLFxuXHRcdFx0XHRcdGNvbmZpcm1UZXh0OiAn6ZqQ6JeP6Iez5ZCO5Y+wJyxcblx0XHRcdFx0XHRjYW5jZWxUZXh0OiAn55u05o6l6YCA5Ye6Jyxcblx0XHRcdFx0XHRzdWNjZXNzOiAocmVzKSA9PiB7XG5cdFx0XHRcdFx0XHRpZiAoIHJlcy5jb25maXJtICkge1xuXHRcdFx0XHRcdFx0XHRwbHVzLmFuZHJvaWQucnVudGltZU1haW5BY3Rpdml0eSgpLm1vdmVUYXNrVG9CYWNrKGZhbHNlKTtcblx0XHRcdFx0XHRcdH0gXG5cdFx0XHRcdFx0XHRpZiAoIHJlcy5jYW5jZWwgKSB7XG5cdFx0XHRcdFx0XHRcdHBsdXMucnVudGltZS5xdWl0KClcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0b2FzdChtZXNzYWdlLCBzdHlsZXMpXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdG9uU2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0Y29uc29sZS5sb2coJ0FwcCBTaG93Jylcblx0fSxcblx0b25IaWRlOiBmdW5jdGlvbigpIHtcblx0XHRjb25zb2xlLmxvZygnQXBwIEhpZGUnKVxuXHRcdHVuaS4kZW1pdCgnYXBwLWhpZGUnKTtcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! exports provided: log, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return formatLog; });
function typof (v) {
  var s = Object.prototype.toString.call(v)
  return s.substring(8, s.length - 1)
}

function isDebugMode () {
  /* eslint-disable no-undef */
  return typeof __channelId__ === 'string' && __channelId__
}

function jsonStringifyReplacer (k, p) {
  switch (typof(p)) {
    case 'Function':
      return 'function() { [native code] }'
    default :
      return p
  }
}

function log (type) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key]
  }
  console[type].apply(console, args)
}

function formatLog () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key]
  }
  var type = args.shift()
  if (isDebugMode()) {
    args.push(args.pop().replace('at ', 'uni-app:///'))
    return console[type].apply(console, args)
  }

  var msgs = args.map(function (v) {
    var type = Object.prototype.toString.call(v).toLowerCase()

    if (type === '[object object]' || type === '[object array]') {
      try {
        v = '---BEGIN:JSON---' + JSON.stringify(v, jsonStringifyReplacer) + '---END:JSON---'
      } catch (e) {
        v = type
      }
    } else {
      if (v === null) {
        v = '---NULL---'
      } else if (v === undefined) {
        v = '---UNDEFINED---'
      } else {
        var vType = typof(v).toUpperCase()

        if (vType === 'NUMBER' || vType === 'BOOLEAN') {
          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---'
        } else {
          v = String(v)
        }
      }
    }

    return v
  })
  var msg = ''

  if (msgs.length > 1) {
    var lastMsg = msgs.pop()
    msg = msgs.join('---COMMA---')

    if (lastMsg.indexOf(' at ') === 0) {
      msg += lastMsg
    } else {
      msg += '---COMMA---' + lastMsg
    }
  } else {
    msg = msgs[0]
  }

  console[type](msg)
}


/***/ }),
/* 7 */
/*!*************************************************************!*\
  !*** G:/my-project/uni-polymerize/plugins/router/router.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.Route = exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} /**\r\nurl拼接\r\nparam {String} url 路由路径\r\nparam {Object} query 路由携带的参数\r\nnfunction urlJoint(path, query) {\n  if (!query) {\n    return path;\n  }\n  var str = '';\n  var num = 0;\n  for (var i in query) {\n    str = num == 0 ? \"\".concat(i, \"=\").concat(query[i]) : str + '&' + \"\".concat(i, \"=\").concat(query[i]);\n    num += 1;\n  }\n  return \"\".concat(path, \"?\").concat(str);\n}var\n\nRouter = /*#__PURE__*/function () {\n  function Router() {_classCallCheck(this, Router);\n    this.beforeHooks = [];\n    this.afterHooks = [];\n    this.errorCbs = [];\n    this.$_hackUniRoute();\n  }\n\n  /**\r\n     * 注册 钩子\r\n     * @param {Function[]} list 钩子列表\r\n     * @param {Function} callback 回调函数\r\n     * @returns {Function} 用于注销当前注册钩子的闭包函数\r\n     */_createClass(Router, [{ key: \"$_registerHook\", value: function $_registerHook(\n    list, callback) {\n      list.push(callback);\n      return function () {\n        var index = list.indexOf(callback);\n        if (index !== -1) list.splice(index, 1);\n      };\n    }\n\n    /**\r\n       * 保存当前页面跳往新页面\r\n       * @param {String} url 路径\r\n       * @param {Object} query 参数\r\n       * @param {String} animationType 动画类型\r\n       * @param {Number} animationDuration 动画时间\r\n      */ }, { key: \"push\", value: function push(\n    rule) {\n      var url = urlJoint(rule.path, rule.query);\n      uni.navigateTo({\n        url: url,\n        animationType: rule.animationType || 'fade-in',\n        animationDuration: rule.animationDuration || 300 });\n\n    }\n\n    /**\r\n       * 关闭当前页面跳往新页面\r\n       * @param {String} url 路径\r\n       * @param {Object} query 参数\r\n      */ }, { key: \"replace\", value: function replace(\n    rule) {\n      var url = urlJoint(rule.path, rule.query);\n      uni.redirectTo({\n        url: url });\n\n    }\n\n    /**\r\n       * 关闭所有页面跳往新页面\r\n       * @param {String} url 路径\r\n      */ }, { key: \"replaceAll\", value: function replaceAll(\n    rule) {\n      var url = rule.path;\n      uni.reLaunch({\n        url: url });\n\n    }\n\n    /**\r\n       * 关闭所有非tab页面跳往tab页面\r\n       * @param {String} url 路径\r\n      */ }, { key: \"pushTab\", value: function pushTab(\n    rule) {\n      var url = rule.path;\n      uni.switchTab({\n        url: url });\n\n    }\n\n    /**\r\n       * 关闭所有非tab页面跳往tab页面\r\n       * @param {Number} num 返回级数\r\n      */ }, { key: \"back\", value: function back()\n    {var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var pages = getCurrentPages();\n      var page = pages.length > num ? pages[pages.length - 1 - num] : pages[0];\n      this.pop({\n        num: num,\n        path: '/' + page.route });\n\n    } }, { key: \"pop\", value: function pop(\n\n    rule) {\n      uni.navigateBack({\n        delta: rule.num });\n\n    }\n\n    /**\r\n       * 注册 全局前置守卫\r\n       * @param {Function} callback 回调函数\r\n       */ }, { key: \"beforeEach\", value: function beforeEach(\n    callback) {\n      return this.$_registerHook(this.beforeHooks, callback);\n    }\n\n    /**\r\n       * 注册 全局后置守卫\r\n       * @param {Function} callback 回调函数\r\n       */ }, { key: \"afterEach\", value: function afterEach(\n    callback) {\n      return this.$_registerHook(this.afterHooks, callback);\n    }\n\n    /**\r\n       * 注册 错误回调\r\n       * @param {Function} errCb 错误回调函数\r\n       */ }, { key: \"onError\", value: function onError(\n    errCb) {\n      return this.$_registerHook(this.errorCbs, errCb);\n    }\n\n    /**\r\n       * 获取当前路由栈的信息\r\n       * @return {Object}\r\n       */ }, { key: \"$_getCurStack\", value: function $_getCurStack()\n    {\n      var stackAll = getCurrentPages();\n      var stackLen = stackAll.length;\n\n      // 跳过路由栈为空的情况\n      if (stackLen === 0) {\n        return false;\n      }\n\n      var curStack = stackAll[stackLen - 1];\n      var from = { url: '/' + curStack.route };\n\n      return from;\n    }\n\n\n    /**\r\n       * hack uniapp的路由函数\r\n       */ }, { key: \"$_hackUniRoute\", value: function $_hackUniRoute()\n    {var _this = this;\n      var ROUTE_ACTIONS = [\n      'push',\n      'replace',\n      'replaceAll',\n      'pushTab',\n      'pop'];\n\n\n      var cacheFunc = {};\n\n      // 保存原函数引用\n      ROUTE_ACTIONS.forEach(function (key) {\n        cacheFunc[key] = _this[key];\n      });\n\n      ROUTE_ACTIONS.forEach(function (key) {\n        // 重写方法\n        _this[key] = function (options) {\n          _this.$_handleBeforeHook(\n          Object.assign({ action: key }, options),\n          function () {var newOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            var opts = Object.assign({ action: key }, options, newOptions);\n            cacheFunc[opts.action](opts);\n          });\n\n        };\n      });\n    }\n\n    /**\r\n       * 处理 全局前置钩子\r\n       * @param {Object} to\r\n       * @param {Function} runRoute\r\n       */ }, { key: \"$_handleBeforeHook\", value: function $_handleBeforeHook(\n    to, runRoute) {var _this2 = this;\n      // 跳过 h5环境中, 调用系统的tabbar功能或系统的navbar上的返回功能,会触发uni的路由方法\n      if (['tabBar', 'backbutton'].includes(to.from)) return runRoute();\n\n      var from = this.$_getCurStack();\n\n      // 跳过 app端 首次进入页面会调用uni路由方法, 导致获取当前路由栈(from)为空\n      if (from === false) return runRoute();\n\n      this.$_iteratorHook(\n      this.beforeHooks,\n      this.$_handleHookEveryRun,\n      function () {\n        runRoute();\n        _this2.$_handleAfterHook(to, from);\n      },\n      {\n        to: to,\n        from: from,\n        runRoute: runRoute });\n\n\n    }\n\n    /**\r\n       * 处理 全局后置钩子\r\n       * @param {Object} to\r\n       * @param {Object} from\r\n       */ }, { key: \"$_handleAfterHook\", value: function $_handleAfterHook(\n    to, from) {\n      this.afterHooks.forEach(function (hook) {\n        hook && hook(to, from);\n      });\n    }\n\n    /**\r\n       * 遍历并运行 钩子\r\n       * @param {Function[]} queueHook 钩子队列\r\n       * @param {Function} everyCb 每次遍历都会运行的回调函数\r\n       * @param {Function} endCb 队列运行结束后运行的回调函数\r\n       * @param {Object} hookOptions 钩子运行需要的参数\r\n       */ }, { key: \"$_iteratorHook\", value: function $_iteratorHook(\n    queueHook, everyCb, endCb, hookOptions) {var _this3 = this;\n      var step = function step() {var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        // 队列运行结束，运行回调函数\n        if (i >= queueHook.length) {\n          endCb.call(_this3);\n        } else {\n          // 跳过队列内容为假值的，例如：undefined\n          if (queueHook[i]) {\n            everyCb.call(_this3, queueHook[i], hookOptions, function () {\n              step(i + 1);\n            });\n          } else {\n            step(i + 1);\n          }\n        }\n      };\n      step();\n    }\n\n    /**\r\n       * 运行钩子并处理 next的返回值\r\n       * @param {Function} hook 钩子函数\r\n       * @param {Object} hookOptions 钩子运行需要的参数\r\n       * @param {Function} iteratorNext 运行下一个钩子\r\n       */ }, { key: \"$_handleHookEveryRun\", value: function $_handleHookEveryRun(\n    hook, hookOptions, iteratorNext) {var _this4 = this;\n      hook(hookOptions.to, hookOptions.from, function (nextVal) {\n        try {\n          // next(false) or next(new Error('xxx')) 中断当前的路径跳转，或中断且注册错误回调\n          if (nextVal === false || _this4.$_isError(nextVal)) {\n            _this4.$_handleAbort(nextVal);\n          } else if (\n          // next('/pages/a') or next({ url: '/pages/a' }) 添加或修改 路由\n          typeof nextVal === 'string' ||\n          typeof nextVal === 'object' && typeof nextVal.path === 'string')\n          {\n            var newNextVal = typeof nextVal === 'string' ? { path: nextVal } : nextVal;\n\n            uni.navigateTo({\n              url: newNextVal.path });\n\n            // hookOptions.runRoute(newNextVal);\n\n            // 更新引用\n            hookOptions.to = Object.assign(hookOptions.to, newNextVal);\n\n            _this4.$_handleAfterHook(hookOptions.to, hookOptions.from);\n          } else {\n            // next()\n            iteratorNext();\n          }\n        } catch (err) {\n          _this4.$_handleAbort(err);\n        }\n      });\n    }\n\n    /**\r\n       * 处理 错误信息\r\n       * @param {Object|string} err 错误信息、错误栈\r\n       */ }, { key: \"$_handleAbort\", value: function $_handleAbort(\n    err) {\n      if (this.errorCbs.length > 0) {\n        this.errorCbs.forEach(function (cb) {\n          cb(err);\n        });\n      } else {\n        this.$_print('error', err);\n      }\n    }\n\n    /**\r\n       * 控制台打印内容\r\n       * @param {string} type 打印的类型\r\n       * @param {string} value 内容\r\n       */ }, { key: \"$_print\", value: function $_print(\n    type, value) {\n      console[type]('[route-guards] ' + value);\n    }\n\n    /**\r\n       * 判断错误对象是否是由 Error对象实例化出来的\r\n       * @param {Object} err 错误对象\r\n       */ }, { key: \"$_isError\", value: function $_isError(\n    err) {\n      return Object.prototype.toString.call(err).includes('Error');\n    } }]);return Router;}();exports.default = Router;var\n\n\nRoute = /*#__PURE__*/function () {function Route() {_classCallCheck(this, Route);}_createClass(Route, [{ key: \"getPageQuery\",\n\n\n\n\n\n\n\n\n    /**\r\n                                                                                                                               * 获取 页面 参数\r\n                                                                                                                               */value: function getPageQuery()\n    {\n      var pages = getCurrentPages();\n      var page = pages[pages.length - 1];\n\n\n\n\n      return page.options;\n\n    }\n\n    /**\r\n       * 获取 页面 配置\r\n       */ }, { key: \"getPageRoute\", value: function getPageRoute()\n    {\n      var pages = getCurrentPages();\n      var page = pages[pages.length - 1];\n      return {\n        path: page.route };\n\n    } }, { key: \"query\", get: function get() {return this.getPageQuery();} }, { key: \"meta\", get: function get() {return this.getPageRoute();} }]);return Route;}();exports.Route = Route;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/*!************************************************************!*\
  !*** G:/my-project/uni-polymerize/plugins/router/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 2));\nvar _router = _interopRequireDefault(__webpack_require__(/*! ./router.js */ 7));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nvar guard = new _router.default();\n/**\r\n                                    * 路由前置守卫\r\n                                   */\nguard.beforeEach(function (to, from, next) {\n  next();\n});\n\n\n/**\r\n     * 路由后置守卫\r\n    */\nguard.afterEach(function (to, from) {\n});\n\n\n/**\r\n     * 报错钩子\r\n    */\nguard.onError(function (errMsg) {\n  __f__(\"log\", 'my route-guards error: ' + errMsg, \" at plugins/router/index.js:24\");\n});var _default =\nguard;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 6)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGx1Z2lucy9yb3V0ZXIvaW5kZXguanMiXSwibmFtZXMiOlsiZ3VhcmQiLCJSb3V0ZXIiLCJiZWZvcmVFYWNoIiwidG8iLCJmcm9tIiwibmV4dCIsImFmdGVyRWFjaCIsIm9uRXJyb3IiLCJlcnJNc2ciXSwibWFwcGluZ3MiOiJvSUFBQTtBQUNBLGdGOztBQUVBLElBQU1BLEtBQUssR0FBRyxJQUFJQyxlQUFKLEVBQWQ7QUFDQTs7O0FBR0FELEtBQUssQ0FBQ0UsVUFBTixDQUFpQixVQUFDQyxFQUFELEVBQUtDLElBQUwsRUFBV0MsSUFBWCxFQUFvQjtBQUNwQ0EsTUFBSTtBQUNKLENBRkQ7OztBQUtBOzs7QUFHQUwsS0FBSyxDQUFDTSxTQUFOLENBQWdCLFVBQUNILEVBQUQsRUFBS0MsSUFBTCxFQUFjO0FBQzdCLENBREQ7OztBQUlBOzs7QUFHQUosS0FBSyxDQUFDTyxPQUFOLENBQWMsVUFBQ0MsTUFBRCxFQUFZO0FBQ3RCLGVBQVksNEJBQTRCQSxNQUF4QztBQUNILENBRkQsRTtBQUdlUixLIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XHJcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9yb3V0ZXIuanMnO1xyXG5cclxuY29uc3QgZ3VhcmQgPSBuZXcgUm91dGVyKCk7XHJcbi8qKlxyXG4gKiDot6/nlLHliY3nva7lrojljatcclxuKi9cclxuZ3VhcmQuYmVmb3JlRWFjaCgodG8sIGZyb20sIG5leHQpID0+IHtcclxuXHRuZXh0KCk7XHJcbn0pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDot6/nlLHlkI7nva7lrojljatcclxuKi9cclxuZ3VhcmQuYWZ0ZXJFYWNoKCh0bywgZnJvbSkgPT4ge1xyXG59KTtcclxuXHJcblxyXG4vKipcclxuICog5oql6ZSZ6ZKp5a2QXHJcbiovXHJcbmd1YXJkLm9uRXJyb3IoKGVyck1zZykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ215IHJvdXRlLWd1YXJkcyBlcnJvcjogJyArIGVyck1zZyk7XHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBndWFyZDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!*************************************************************!*\
  !*** G:/my-project/uni-polymerize/plugins/request/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _request = _interopRequireDefault(__webpack_require__(/*! ./request.js */ 10));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nvar http = new _request.default();var _default =\nhttp;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGx1Z2lucy9yZXF1ZXN0L2luZGV4LmpzIl0sIm5hbWVzIjpbImh0dHAiLCJIdHRwIl0sIm1hcHBpbmdzIjoidUZBQUEsbUY7QUFDQSxJQUFNQSxJQUFJLEdBQUcsSUFBSUMsZ0JBQUosRUFBYixDO0FBQ2VELEkiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIdHRwIGZyb20gJy4vcmVxdWVzdC5qcydcclxuY29uc3QgaHR0cCA9IG5ldyBIdHRwKCk7XHJcbmV4cG9ydCBkZWZhdWx0IGh0dHA7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!***************************************************************!*\
  !*** G:/my-project/uni-polymerize/plugins/request/request.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = _interopRequireDefault(__webpack_require__(/*! @/assets/js/config.js */ 11));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\nTIMEOUT = _config.default.TIMEOUT;\n\n\n//request封装\nfunction request() {var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GET';var url = arguments.length > 1 ? arguments[1] : undefined;var options = arguments.length > 2 ? arguments[2] : undefined;\n  return new Promise(function (resolve, reject) {\n    uni.request({\n      url: url,\n      data: options.params || {},\n      method: type || 'GET',\n      header: options.headers || {},\n      responseType: options.responseType || 'text',\n      timeout: TIMEOUT,\n      sslVerify: false,\n      success: function success(res) {\n        resolve(res);\n      },\n      fail: function fail(err) {\n        plus.nativeUI.toast(\"网络错误！\", { verticalAlign: 'bottom' });\n        reject(err);\n      } });\n\n  });\n}var\n\nhttp = /*#__PURE__*/function () {function http() {_classCallCheck(this, http);}_createClass(http, [{ key: \"get\", value: function get(\n    url) {var _options$headers;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      url += (url.indexOf('?') < 0 ? '?' : '&') + param(options.params || {}, ((_options$headers = options.headers) === null || _options$headers === void 0 ? void 0 : _options$headers.Charset) || 'utf-8') || ''; // 请求路径\n      return request('GET', url, options);\n    } }, { key: \"postget\", value: function postget(\n    url) {var _options$headers2;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      url += (url.indexOf('?') < 0 ? '?' : '&') + param(options.params || {}, ((_options$headers2 = options.headers) === null || _options$headers2 === void 0 ? void 0 : _options$headers2.Charset) || 'utf-8') || ''; // 请求路径\n      return request('POST', url, options);\n    } }, { key: \"post\", value: function post(\n    url) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return request('POST', url, options);\n    } }]);return http;}();exports.default = http;\n\n\nfunction param(data, charset) {\n  var url = '';\n  for (var k in data) {\n    var value = data[k] !== undefined ? data[k] : '';\n    url += charset == 'utf-8' ? \"&\".concat(k, \"=\").concat(encodeURIComponent(value)) : \"&\".concat(k, \"=\").concat(value);\n  }\n  return url ? url.substring(1) : '';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGx1Z2lucy9yZXF1ZXN0L3JlcXVlc3QuanMiXSwibmFtZXMiOlsiVElNRU9VVCIsIkNvbmZpZyIsInJlcXVlc3QiLCJ0eXBlIiwidXJsIiwib3B0aW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidW5pIiwiZGF0YSIsInBhcmFtcyIsIm1ldGhvZCIsImhlYWRlciIsImhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJ0aW1lb3V0Iiwic3NsVmVyaWZ5Iiwic3VjY2VzcyIsInJlcyIsImZhaWwiLCJlcnIiLCJwbHVzIiwibmF0aXZlVUkiLCJ0b2FzdCIsInZlcnRpY2FsQWxpZ24iLCJodHRwIiwiaW5kZXhPZiIsInBhcmFtIiwiQ2hhcnNldCIsImNoYXJzZXQiLCJrIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzdWJzdHJpbmciXSwibWFwcGluZ3MiOiJ1RkFBQSwyRjtBQUNRQSxPLEdBQVlDLGUsQ0FBWkQsTzs7O0FBR1I7QUFDQSxTQUFTRSxPQUFULEdBQThDLEtBQTVCQyxJQUE0Qix1RUFBckIsS0FBcUIsS0FBZEMsR0FBYyx1REFBVEMsT0FBUztBQUM3QyxTQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVNDLE1BQVQsRUFBb0I7QUFDdENDLE9BQUcsQ0FBQ1AsT0FBSixDQUFZO0FBQ1hFLFNBQUcsRUFBRUEsR0FETTtBQUVYTSxVQUFJLEVBQUVMLE9BQU8sQ0FBQ00sTUFBUixJQUFrQixFQUZiO0FBR1hDLFlBQU0sRUFBRVQsSUFBSSxJQUFJLEtBSEw7QUFJWFUsWUFBTSxFQUFFUixPQUFPLENBQUNTLE9BQVIsSUFBbUIsRUFKaEI7QUFLWEMsa0JBQVksRUFBRVYsT0FBTyxDQUFDVSxZQUFSLElBQXdCLE1BTDNCO0FBTVhDLGFBQU8sRUFBRWhCLE9BTkU7QUFPWGlCLGVBQVMsRUFBRSxLQVBBO0FBUVhDLGFBQU8sRUFBRyxpQkFBQ0MsR0FBRCxFQUFTO0FBQ2xCWixlQUFPLENBQUNZLEdBQUQsQ0FBUDtBQUNBLE9BVlU7QUFXWEMsVUFBSSxFQUFFLGNBQUNDLEdBQUQsRUFBTztBQUNaQyxZQUFJLENBQUNDLFFBQUwsQ0FBY0MsS0FBZCxDQUFvQixPQUFwQixFQUE2QixFQUFDQyxhQUFhLEVBQUUsUUFBaEIsRUFBN0I7QUFDQWpCLGNBQU0sQ0FBQ2EsR0FBRCxDQUFOO0FBQ0EsT0FkVSxFQUFaOztBQWdCQSxHQWpCTSxDQUFQO0FBa0JBLEM7O0FBRW9CSyxJO0FBQ2hCdEIsTyxFQUFtQiwwQkFBZEMsT0FBYyx1RUFBSixFQUFJO0FBQ3RCRCxTQUFHLElBQUksQ0FBQ0EsR0FBRyxDQUFDdUIsT0FBSixDQUFZLEdBQVosSUFBbUIsQ0FBbkIsR0FBdUIsR0FBdkIsR0FBNkIsR0FBOUIsSUFBcUNDLEtBQUssQ0FBQ3ZCLE9BQU8sQ0FBQ00sTUFBUixJQUFrQixFQUFuQixFQUF1QixxQkFBQU4sT0FBTyxDQUFDUyxPQUFSLHNFQUFpQmUsT0FBakIsS0FBNEIsT0FBbkQsQ0FBMUMsSUFBeUcsRUFBaEgsQ0FEc0IsQ0FDOEY7QUFDcEgsYUFBTzNCLE9BQU8sQ0FBQyxLQUFELEVBQVFFLEdBQVIsRUFBYUMsT0FBYixDQUFkO0FBQ0EsSztBQUNPRCxPLEVBQW1CLDJCQUFkQyxPQUFjLHVFQUFKLEVBQUk7QUFDMUJELFNBQUcsSUFBSSxDQUFDQSxHQUFHLENBQUN1QixPQUFKLENBQVksR0FBWixJQUFtQixDQUFuQixHQUF1QixHQUF2QixHQUE2QixHQUE5QixJQUFxQ0MsS0FBSyxDQUFDdkIsT0FBTyxDQUFDTSxNQUFSLElBQWtCLEVBQW5CLEVBQXVCLHNCQUFBTixPQUFPLENBQUNTLE9BQVIsd0VBQWlCZSxPQUFqQixLQUE0QixPQUFuRCxDQUExQyxJQUF5RyxFQUFoSCxDQUQwQixDQUMwRjtBQUNwSCxhQUFPM0IsT0FBTyxDQUFDLE1BQUQsRUFBU0UsR0FBVCxFQUFjQyxPQUFkLENBQWQ7QUFDQSxLO0FBQ0lELE8sRUFBbUIsS0FBZEMsT0FBYyx1RUFBSixFQUFJO0FBQ3ZCLGFBQU9ILE9BQU8sQ0FBQyxNQUFELEVBQVNFLEdBQVQsRUFBY0MsT0FBZCxDQUFkO0FBQ0EsSzs7O0FBR0YsU0FBU3VCLEtBQVQsQ0FBZWxCLElBQWYsRUFBcUJvQixPQUFyQixFQUE4QjtBQUMxQixNQUFJMUIsR0FBRyxHQUFHLEVBQVY7QUFDQSxPQUFLLElBQUkyQixDQUFULElBQWNyQixJQUFkLEVBQW9CO0FBQ2hCLFFBQUlzQixLQUFLLEdBQUd0QixJQUFJLENBQUNxQixDQUFELENBQUosS0FBWUUsU0FBWixHQUF3QnZCLElBQUksQ0FBQ3FCLENBQUQsQ0FBNUIsR0FBa0MsRUFBOUM7QUFDQTNCLE9BQUcsSUFBSTBCLE9BQU8sSUFBSSxPQUFYLGNBQXlCQyxDQUF6QixjQUE4Qkcsa0JBQWtCLENBQUNGLEtBQUQsQ0FBaEQsZUFBZ0VELENBQWhFLGNBQXFFQyxLQUFyRSxDQUFQO0FBQ0g7QUFDRCxTQUFPNUIsR0FBRyxHQUFHQSxHQUFHLENBQUMrQixTQUFKLENBQWMsQ0FBZCxDQUFILEdBQXNCLEVBQWhDO0FBQ0giLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29uZmlnIGZyb20gJ0AvYXNzZXRzL2pzL2NvbmZpZy5qcydcclxuY29uc3QgeyBUSU1FT1VUIH0gPSBDb25maWdcclxuXHJcblxyXG4vL3JlcXVlc3TlsIHoo4VcclxuZnVuY3Rpb24gcmVxdWVzdCAodHlwZSA9ICdHRVQnLCB1cmwsIG9wdGlvbnMpIHtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KSA9PiB7XHJcblx0XHR1bmkucmVxdWVzdCh7XHJcblx0XHRcdHVybDogdXJsLFxyXG5cdFx0XHRkYXRhOiBvcHRpb25zLnBhcmFtcyB8fCB7fSxcclxuXHRcdFx0bWV0aG9kOiB0eXBlIHx8ICdHRVQnLFxyXG5cdFx0XHRoZWFkZXI6IG9wdGlvbnMuaGVhZGVycyB8fCB7fSxcclxuXHRcdFx0cmVzcG9uc2VUeXBlOiBvcHRpb25zLnJlc3BvbnNlVHlwZSB8fCAndGV4dCcsXHJcblx0XHRcdHRpbWVvdXQ6IFRJTUVPVVQsXHJcblx0XHRcdHNzbFZlcmlmeTogZmFsc2UsXHJcblx0XHRcdHN1Y2Nlc3M6ICgocmVzKSA9PiB7XHJcblx0XHRcdFx0cmVzb2x2ZShyZXMpXHJcblx0XHRcdH0pLFxyXG5cdFx0XHRmYWlsOigoZXJyKT0+e1xyXG5cdFx0XHRcdHBsdXMubmF0aXZlVUkudG9hc3QoXCLnvZHnu5zplJnor6/vvIFcIiwge3ZlcnRpY2FsQWxpZ246ICdib3R0b20nfSk7XHJcblx0XHRcdFx0cmVqZWN0KGVycik7XHJcblx0XHRcdH0pXHJcblx0XHR9KVxyXG5cdH0pXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGh0dHAge1xyXG5cdGdldCh1cmwsIG9wdGlvbnMgPSB7fSkge1xyXG5cdFx0dXJsICs9ICh1cmwuaW5kZXhPZignPycpIDwgMCA/ICc/JyA6ICcmJykgKyBwYXJhbShvcHRpb25zLnBhcmFtcyB8fCB7fSwgb3B0aW9ucy5oZWFkZXJzPy5DaGFyc2V0IHx8ICd1dGYtOCcpIHx8ICcnOyAvLyDor7fmsYLot6/lvoRcclxuXHRcdHJldHVybiByZXF1ZXN0KCdHRVQnLCB1cmwsIG9wdGlvbnMpXHJcblx0fVxyXG5cdHBvc3RnZXQodXJsLCBvcHRpb25zID0ge30pIHtcclxuXHRcdHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA8IDAgPyAnPycgOiAnJicpICsgcGFyYW0ob3B0aW9ucy5wYXJhbXMgfHwge30sIG9wdGlvbnMuaGVhZGVycz8uQ2hhcnNldCB8fCAndXRmLTgnKSB8fCAnJzsgLy8g6K+35rGC6Lev5b6EXHJcblx0XHRyZXR1cm4gcmVxdWVzdCgnUE9TVCcsIHVybCwgb3B0aW9ucylcclxuXHR9XHJcblx0cG9zdCh1cmwsIG9wdGlvbnMgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHJlcXVlc3QoJ1BPU1QnLCB1cmwsIG9wdGlvbnMpXHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJhbShkYXRhLCBjaGFyc2V0KSB7XHJcbiAgICBsZXQgdXJsID0gJydcclxuICAgIGZvciAodmFyIGsgaW4gZGF0YSkge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGRhdGFba10gIT09IHVuZGVmaW5lZCA/IGRhdGFba10gOiAnJ1xyXG4gICAgICAgIHVybCArPSBjaGFyc2V0ID09ICd1dGYtOCcgPyBgJiR7a309JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWAgOiBgJiR7a309JHt2YWx1ZX1gXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXJsID8gdXJsLnN1YnN0cmluZygxKSA6ICcnXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!********************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/js/config.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  //小说网站链接\n  BOOKURL: {\n    'baoshuu': {\n      title: '手机宝书',\n      href: 'http://m.baoshuu.com' },\n\n    'bamxs': {\n      title: '八毛小说',\n      href: 'http://m.bamxs.com',\n      isAdult: true //是否属于青壮年内容\n    },\n    'xquge': {\n      title: '笔趣阁',\n      href: 'https://www.xquge.com' },\n\n    'linovel': {\n      title: '轻之文库',\n      href: 'https://www.linovel.net/' } },\n\n\n\n  //漫画网站链接\n  COMICURL: {\n    'mangabz': {\n      title: 'mangaBz',\n      href: 'http://www.mangabz.com' },\n\n    // '18comic': {\n    // \ttitle: '禁漫天堂',\n    // \thref: 'https://18comic2.art'\n    // },\n    'sixmh': {\n      title: '6漫画',\n      href: 'http://m.sixmh7.com' },\n\n    'dmzj': {\n      title: '动漫之家',\n      href: 'https://www.dmzj.com' },\n\n    'loli': {\n      title: '写真网',\n      href: 'https://cosplayporn.cc',\n      isAdult: true //是否属于青壮年内容\n    },\n    'wnacg': {\n      title: '绅士漫画',\n      href: 'https://hentaicomic.org',\n      isAdult: true //是否属于青壮年内容\n    },\n    'nightpic': {\n      title: '深夜图鉴',\n      href: 'https://nightpics1.xyz',\n      isAdult: true //是否属于青壮年内容\n    },\n    'suyingyy': {\n      title: '速影TV',\n      href: 'https://www.suyingyy.com/arttype/5.html',\n      isAdult: true //是否属于青壮年内容\n    } },\n\n  //音乐网站链接\n  MUSICURL: {\n    '163music': {\n      title: '网易云音乐',\n      href: 'https://autumnfish.cn',\n      search: true, //是否有搜索功能\n      hotKey: true, //是否有热门搜索关键词功能\n      recome: true, //是否有热门推荐功能\n      banner: true, //是否有banner功能\n      album: true, //是否有歌单功能\n      singer: true, //是否有歌手功能\n      top: true, //是否有排行榜功能\n      newSong: true //是否有新歌首发功能\n    },\n    'qqmusic': {\n      title: 'QQ音乐',\n      href: 'https://u.y.qq.com',\n      search: true, //是否有搜索功能\n      hotKey: true, //是否有热门搜索关键词功能\n      recome: true, //是否有热门推荐功能\n      banner: true, //是否有banner功能\n      album: true, //是否有歌单功能\n      singer: true, //是否有歌手功能\n      top: true, //是否有排行榜功能\n      newSong: true //是否有新歌首发功能\n    } },\n\n\n  //请求成功编码\n  ERR_OK: 200,\n  //请求失败编码\n  ERR_FALSE: 300,\n  //请求超时时间\n  TIMEOUT: 50000 };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2pzL2NvbmZpZy5qcyJdLCJuYW1lcyI6WyJCT09LVVJMIiwidGl0bGUiLCJocmVmIiwiaXNBZHVsdCIsIkNPTUlDVVJMIiwiTVVTSUNVUkwiLCJzZWFyY2giLCJob3RLZXkiLCJyZWNvbWUiLCJiYW5uZXIiLCJhbGJ1bSIsInNpbmdlciIsInRvcCIsIm5ld1NvbmciLCJFUlJfT0siLCJFUlJfRkFMU0UiLCJUSU1FT1VUIl0sIm1hcHBpbmdzIjoic0dBQWU7QUFDZDtBQUNBQSxTQUFPLEVBQUU7QUFDUixlQUFXO0FBQ1ZDLFdBQUssRUFBRSxNQURHO0FBRVZDLFVBQUksRUFBRSxzQkFGSSxFQURIOztBQUtSLGFBQVM7QUFDUkQsV0FBSyxFQUFFLE1BREM7QUFFUkMsVUFBSSxFQUFFLG9CQUZFO0FBR1JDLGFBQU8sRUFBRSxJQUhELENBR0s7QUFITCxLQUxEO0FBVVIsYUFBUztBQUNSRixXQUFLLEVBQUUsS0FEQztBQUVSQyxVQUFJLEVBQUUsdUJBRkUsRUFWRDs7QUFjUixlQUFXO0FBQ1ZELFdBQUssRUFBRSxNQURHO0FBRVZDLFVBQUksRUFBRSwwQkFGSSxFQWRILEVBRks7Ozs7QUFzQmQ7QUFDQUUsVUFBUSxFQUFFO0FBQ1QsZUFBVztBQUNWSCxXQUFLLEVBQUUsU0FERztBQUVWQyxVQUFJLEVBQUUsd0JBRkksRUFERjs7QUFLVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQVM7QUFDUkQsV0FBSyxFQUFFLEtBREM7QUFFUkMsVUFBSSxFQUFFLHFCQUZFLEVBVEE7O0FBYVQsWUFBUTtBQUNQRCxXQUFLLEVBQUUsTUFEQTtBQUVQQyxVQUFJLEVBQUUsc0JBRkMsRUFiQzs7QUFpQlQsWUFBUTtBQUNQRCxXQUFLLEVBQUUsS0FEQTtBQUVQQyxVQUFJLEVBQUUsd0JBRkM7QUFHUEMsYUFBTyxFQUFFLElBSEYsQ0FHTTtBQUhOLEtBakJDO0FBc0JULGFBQVM7QUFDUkYsV0FBSyxFQUFFLE1BREM7QUFFUkMsVUFBSSxFQUFFLHlCQUZFO0FBR1JDLGFBQU8sRUFBRSxJQUhELENBR0s7QUFITCxLQXRCQTtBQTJCVCxnQkFBWTtBQUNYRixXQUFLLEVBQUUsTUFESTtBQUVYQyxVQUFJLEVBQUUsd0JBRks7QUFHWEMsYUFBTyxFQUFFLElBSEUsQ0FHRTtBQUhGLEtBM0JIO0FBZ0NULGdCQUFZO0FBQ1hGLFdBQUssRUFBRSxNQURJO0FBRVhDLFVBQUksRUFBRSx5Q0FGSztBQUdYQyxhQUFPLEVBQUUsSUFIRSxDQUdFO0FBSEYsS0FoQ0gsRUF2Qkk7O0FBNkRkO0FBQ0FFLFVBQVEsRUFBRTtBQUNULGdCQUFZO0FBQ1hKLFdBQUssRUFBRSxPQURJO0FBRVhDLFVBQUksRUFBRSx1QkFGSztBQUdYSSxZQUFNLEVBQUUsSUFIRyxFQUdFO0FBQ2JDLFlBQU0sRUFBRSxJQUpHLEVBSUU7QUFDYkMsWUFBTSxFQUFFLElBTEcsRUFLRTtBQUNiQyxZQUFNLEVBQUUsSUFORyxFQU1FO0FBQ2JDLFdBQUssRUFBRSxJQVBJLEVBT0M7QUFDWkMsWUFBTSxFQUFFLElBUkcsRUFRRTtBQUNiQyxTQUFHLEVBQUUsSUFUTSxFQVNEO0FBQ1ZDLGFBQU8sRUFBRSxJQVZFLENBVUU7QUFWRixLQURIO0FBYVQsZUFBVztBQUNWWixXQUFLLEVBQUUsTUFERztBQUVWQyxVQUFJLEVBQUUsb0JBRkk7QUFHVkksWUFBTSxFQUFFLElBSEUsRUFHRztBQUNiQyxZQUFNLEVBQUUsSUFKRSxFQUlHO0FBQ2JDLFlBQU0sRUFBRSxJQUxFLEVBS0c7QUFDYkMsWUFBTSxFQUFFLElBTkUsRUFNRztBQUNiQyxXQUFLLEVBQUUsSUFQRyxFQU9FO0FBQ1pDLFlBQU0sRUFBRSxJQVJFLEVBUUc7QUFDYkMsU0FBRyxFQUFFLElBVEssRUFTQTtBQUNWQyxhQUFPLEVBQUUsSUFWQyxDQVVHO0FBVkgsS0FiRixFQTlESTs7O0FBeUZkO0FBQ0FDLFFBQU0sRUFBRSxHQTFGTTtBQTJGZDtBQUNBQyxXQUFTLEVBQUUsR0E1Rkc7QUE2RmQ7QUFDQUMsU0FBTyxFQUFFLEtBOUZLLEUiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XHJcblx0Ly/lsI/or7TnvZHnq5npk77mjqVcclxuXHRCT09LVVJMOiB7XHJcblx0XHQnYmFvc2h1dSc6IHtcclxuXHRcdFx0dGl0bGU6ICfmiYvmnLrlrp3kuaYnLFxyXG5cdFx0XHRocmVmOiAnaHR0cDovL20uYmFvc2h1dS5jb20nXHJcblx0XHR9LFxyXG5cdFx0J2JhbXhzJzoge1xyXG5cdFx0XHR0aXRsZTogJ+WFq+avm+Wwj+ivtCcsXHJcblx0XHRcdGhyZWY6ICdodHRwOi8vbS5iYW14cy5jb20nLFxyXG5cdFx0XHRpc0FkdWx0OiB0cnVlLy/mmK/lkKblsZ7kuo7pnZLlo67lubTlhoXlrrlcclxuXHRcdH0sXHJcblx0XHQneHF1Z2UnOiB7XHJcblx0XHRcdHRpdGxlOiAn56yU6Laj6ZiBJyxcclxuXHRcdFx0aHJlZjogJ2h0dHBzOi8vd3d3LnhxdWdlLmNvbSdcclxuXHRcdH0sXHJcblx0XHQnbGlub3ZlbCc6IHtcclxuXHRcdFx0dGl0bGU6ICfovbvkuYvmloflupMnLFxyXG5cdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cubGlub3ZlbC5uZXQvJ1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0XHJcblx0Ly/mvKvnlLvnvZHnq5npk77mjqVcclxuXHRDT01JQ1VSTDoge1xyXG5cdFx0J21hbmdhYnonOiB7XHJcblx0XHRcdHRpdGxlOiAnbWFuZ2FCeicsXHJcblx0XHRcdGhyZWY6ICdodHRwOi8vd3d3Lm1hbmdhYnouY29tJ1xyXG5cdFx0fSxcclxuXHRcdC8vICcxOGNvbWljJzoge1xyXG5cdFx0Ly8gXHR0aXRsZTogJ+emgea8q+WkqeWggicsXHJcblx0XHQvLyBcdGhyZWY6ICdodHRwczovLzE4Y29taWMyLmFydCdcclxuXHRcdC8vIH0sXHJcblx0XHQnc2l4bWgnOiB7XHJcblx0XHRcdHRpdGxlOiAnNua8q+eUuycsXHJcblx0XHRcdGhyZWY6ICdodHRwOi8vbS5zaXhtaDcuY29tJ1xyXG5cdFx0fSxcclxuXHRcdCdkbXpqJzoge1xyXG5cdFx0XHR0aXRsZTogJ+WKqOa8q+S5i+WuticsXHJcblx0XHRcdGhyZWY6ICdodHRwczovL3d3dy5kbXpqLmNvbSdcclxuXHRcdH0sXHJcblx0XHQnbG9saSc6IHtcclxuXHRcdFx0dGl0bGU6ICflhpnnnJ/nvZEnLFxyXG5cdFx0XHRocmVmOiAnaHR0cHM6Ly9jb3NwbGF5cG9ybi5jYycsXHJcblx0XHRcdGlzQWR1bHQ6IHRydWUvL+aYr+WQpuWxnuS6jumdkuWjruW5tOWGheWuuVxyXG5cdFx0fSxcclxuXHRcdCd3bmFjZyc6IHtcclxuXHRcdFx0dGl0bGU6ICfnu4Xlo6vmvKvnlLsnLFxyXG5cdFx0XHRocmVmOiAnaHR0cHM6Ly9oZW50YWljb21pYy5vcmcnLFxyXG5cdFx0XHRpc0FkdWx0OiB0cnVlLy/mmK/lkKblsZ7kuo7pnZLlo67lubTlhoXlrrlcclxuXHRcdH0sXHJcblx0XHQnbmlnaHRwaWMnOiB7XHJcblx0XHRcdHRpdGxlOiAn5rex5aSc5Zu+6Ym0JyxcclxuXHRcdFx0aHJlZjogJ2h0dHBzOi8vbmlnaHRwaWNzMS54eXonLFxyXG5cdFx0XHRpc0FkdWx0OiB0cnVlLy/mmK/lkKblsZ7kuo7pnZLlo67lubTlhoXlrrlcclxuXHRcdH0sXHJcblx0XHQnc3V5aW5neXknOiB7XHJcblx0XHRcdHRpdGxlOiAn6YCf5b2xVFYnLFxyXG5cdFx0XHRocmVmOiAnaHR0cHM6Ly93d3cuc3V5aW5neXkuY29tL2FydHR5cGUvNS5odG1sJyxcclxuXHRcdFx0aXNBZHVsdDogdHJ1ZS8v5piv5ZCm5bGe5LqO6Z2S5aOu5bm05YaF5a65XHJcblx0XHR9XHJcblx0fSxcclxuXHQvL+mfs+S5kOe9keermemTvuaOpVxyXG5cdE1VU0lDVVJMOiB7XHJcblx0XHQnMTYzbXVzaWMnOiB7XHJcblx0XHRcdHRpdGxlOiAn572R5piT5LqR6Z+z5LmQJyxcclxuXHRcdFx0aHJlZjogJ2h0dHBzOi8vYXV0dW1uZmlzaC5jbicsXHJcblx0XHRcdHNlYXJjaDogdHJ1ZSwvL+aYr+WQpuacieaQnOe0ouWKn+iDvVxyXG5cdFx0XHRob3RLZXk6IHRydWUsLy/mmK/lkKbmnInng63pl6jmkJzntKLlhbPplK7or43lip/og71cclxuXHRcdFx0cmVjb21lOiB0cnVlLC8v5piv5ZCm5pyJ54Ot6Zeo5o6o6I2Q5Yqf6IO9XHJcblx0XHRcdGJhbm5lcjogdHJ1ZSwvL+aYr+WQpuaciWJhbm5lcuWKn+iDvVxyXG5cdFx0XHRhbGJ1bTogdHJ1ZSwvL+aYr+WQpuacieatjOWNleWKn+iDvVxyXG5cdFx0XHRzaW5nZXI6IHRydWUsLy/mmK/lkKbmnInmrYzmiYvlip/og71cclxuXHRcdFx0dG9wOiB0cnVlLC8v5piv5ZCm5pyJ5o6S6KGM5qac5Yqf6IO9XHJcblx0XHRcdG5ld1Nvbmc6IHRydWUvL+aYr+WQpuacieaWsOatjOmmluWPkeWKn+iDvVxyXG5cdFx0fSxcclxuXHRcdCdxcW11c2ljJzoge1xyXG5cdFx0XHR0aXRsZTogJ1FR6Z+z5LmQJyxcclxuXHRcdFx0aHJlZjogJ2h0dHBzOi8vdS55LnFxLmNvbScsXHJcblx0XHRcdHNlYXJjaDogdHJ1ZSwvL+aYr+WQpuacieaQnOe0ouWKn+iDvVxyXG5cdFx0XHRob3RLZXk6IHRydWUsLy/mmK/lkKbmnInng63pl6jmkJzntKLlhbPplK7or43lip/og71cclxuXHRcdFx0cmVjb21lOiB0cnVlLC8v5piv5ZCm5pyJ54Ot6Zeo5o6o6I2Q5Yqf6IO9XHJcblx0XHRcdGJhbm5lcjogdHJ1ZSwvL+aYr+WQpuaciWJhbm5lcuWKn+iDvVxyXG5cdFx0XHRhbGJ1bTogdHJ1ZSwvL+aYr+WQpuacieatjOWNleWKn+iDvVxyXG5cdFx0XHRzaW5nZXI6IHRydWUsLy/mmK/lkKbmnInmrYzmiYvlip/og71cclxuXHRcdFx0dG9wOiB0cnVlLC8v5piv5ZCm5pyJ5o6S6KGM5qac5Yqf6IO9XHJcblx0XHRcdG5ld1Nvbmc6IHRydWUvL+aYr+WQpuacieaWsOatjOmmluWPkeWKn+iDvVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0XHJcblx0Ly/or7fmsYLmiJDlip/nvJbnoIFcclxuXHRFUlJfT0s6IDIwMCxcclxuXHQvL+ivt+axguWksei0pee8lueggVxyXG5cdEVSUl9GQUxTRTogMzAwLFxyXG5cdC8v6K+35rGC6LaF5pe25pe26Ze0XHJcblx0VElNRU9VVDogNTAwMDBcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/*!*********************************************************!*\
  !*** G:/my-project/uni-polymerize/plugins/xhr/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _xhr = _interopRequireDefault(__webpack_require__(/*! ./xhr.js */ 13));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nvar xhr = new _xhr.default();var _default =\nxhr;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGx1Z2lucy94aHIvaW5kZXguanMiXSwibmFtZXMiOlsieGhyIiwiWGhyIl0sIm1hcHBpbmdzIjoidUZBQUEsMkU7QUFDQSxJQUFNQSxHQUFHLEdBQUcsSUFBSUMsWUFBSixFQUFaLEM7QUFDZUQsRyIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBYaHIgZnJvbSAnLi94aHIuanMnXHJcbmNvbnN0IHhociA9IG5ldyBYaHIoKTtcclxuZXhwb3J0IGRlZmF1bHQgeGhyOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/*!*******************************************************!*\
  !*** G:/my-project/uni-polymerize/plugins/xhr/xhr.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = _interopRequireDefault(__webpack_require__(/*! @/assets/js/config.js */ 11));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\nTIMEOUT = _config.default.TIMEOUT;\n\n//xhr封装\nfunction xhrRequest() {var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GET';var url = arguments.length > 1 ? arguments[1] : undefined;var options = arguments.length > 2 ? arguments[2] : undefined;\n  var xhrHttp = new plus.net.XMLHttpRequest();\n  return new Promise(function (resolve, reject) {\n    xhrHttp.onreadystatechange = function () {\n      __f__(\"log\", xhrHttp.readyState, \" at plugins/xhr/xhr.js:9\");\n      if (xhrHttp.readyState == 4) {\n        if (xhrHttp.status == 200) {\n          resolve({ code: xhrHttp.status, data: xhrHttp.responseText });\n        } else {\n          plus.nativeUI.toast(\"网络错误！\", { verticalAlign: 'bottom' });\n          reject({ code: xhrHttp.status, data: '' });\n        }\n      }\n    };\n    xhrHttp.open(type, url);\n    if (options.mimeType) {\n      xhrHttp.overrideMimeType(options.mimeType);\n    }\n    xhrHttp.responseType = options.responseType || 'json';\n    for (var i in options.headers || {}) {\n      xhrHttp.setRequestHeader(i, options.headers[i]);\n    }\n    xhrHttp.timeout = TIMEOUT;\n    xhrHttp.send(options.params || {});\n  });\n}var\n\nXhr = /*#__PURE__*/function () {function Xhr() {_classCallCheck(this, Xhr);}_createClass(Xhr, [{ key: \"get\", value: function get(\n    url) {var _options$headers;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      url += (url.indexOf('?') < 0 ? '?' : '&') + param(options.params || {}, ((_options$headers = options.headers) === null || _options$headers === void 0 ? void 0 : _options$headers.Charset) || 'utf-8') || ''; // 请求路径\n      return xhrRequest('GET', url, options);\n    } }, { key: \"postget\", value: function postget(\n    url) {var _options$headers2;var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      url += (url.indexOf('?') < 0 ? '?' : '&') + param(options.params || {}, ((_options$headers2 = options.headers) === null || _options$headers2 === void 0 ? void 0 : _options$headers2.Charset) || 'utf-8') || ''; // 请求路径\n      return xhrRequest('POST', url, options);\n    } }, { key: \"post\", value: function post(\n    url) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return xhrRequest('POST', url, options);\n    } }]);return Xhr;}();exports.default = Xhr;\n\n\nfunction param(data, charset) {\n  var url = '';\n  for (var k in data) {\n    var value = data[k] !== undefined ? data[k] : '';\n    url += charset == 'utf-8' ? \"&\".concat(k, \"=\").concat(encodeURIComponent(value)) : \"&\".concat(k, \"=\").concat(value);\n  }\n  return url ? url.substring(1) : '';\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 6)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGx1Z2lucy94aHIveGhyLmpzIl0sIm5hbWVzIjpbIlRJTUVPVVQiLCJDb25maWciLCJ4aHJSZXF1ZXN0IiwidHlwZSIsInVybCIsIm9wdGlvbnMiLCJ4aHJIdHRwIiwicGx1cyIsIm5ldCIsIlhNTEh0dHBSZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiY29kZSIsImRhdGEiLCJyZXNwb25zZVRleHQiLCJuYXRpdmVVSSIsInRvYXN0IiwidmVydGljYWxBbGlnbiIsIm9wZW4iLCJtaW1lVHlwZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJyZXNwb25zZVR5cGUiLCJpIiwiaGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJ0aW1lb3V0Iiwic2VuZCIsInBhcmFtcyIsIlhociIsImluZGV4T2YiLCJwYXJhbSIsIkNoYXJzZXQiLCJjaGFyc2V0IiwiayIsInZhbHVlIiwidW5kZWZpbmVkIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic3Vic3RyaW5nIl0sIm1hcHBpbmdzIjoib0lBQUEsMkY7QUFDUUEsTyxHQUFZQyxlLENBQVpELE87O0FBRVI7QUFDQSxTQUFTRSxVQUFULEdBQWlELEtBQTVCQyxJQUE0Qix1RUFBckIsS0FBcUIsS0FBZEMsR0FBYyx1REFBVEMsT0FBUztBQUNoRCxNQUFJQyxPQUFPLEdBQUcsSUFBSUMsSUFBSSxDQUFDQyxHQUFMLENBQVNDLGNBQWIsRUFBZDtBQUNBLFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBU0MsTUFBVCxFQUFvQjtBQUN0Q04sV0FBTyxDQUFDTyxrQkFBUixHQUE2QixZQUFZO0FBQ3hDLG1CQUFZUCxPQUFPLENBQUNRLFVBQXBCO0FBQ0EsVUFBS1IsT0FBTyxDQUFDUSxVQUFSLElBQXNCLENBQTNCLEVBQStCO0FBQzlCLFlBQUtSLE9BQU8sQ0FBQ1MsTUFBUixJQUFrQixHQUF2QixFQUE2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Q0FBQ0YsS0FBRCxDQUFoRCxlQUFnRUQsQ0FBaEUsY0FBcUVDLEtBQXJFLENBQVA7QUFDSDtBQUNELFNBQU9sQyxHQUFHLEdBQUdBLEdBQUcsQ0FBQ3FDLFNBQUosQ0FBYyxDQUFkLENBQUgsR0FBc0IsRUFBaEM7QUFDSCxDIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbmZpZyBmcm9tICdAL2Fzc2V0cy9qcy9jb25maWcuanMnXHJcbmNvbnN0IHsgVElNRU9VVCB9ID0gQ29uZmlnXHJcblxyXG4vL3hocuWwgeijhVxyXG5mdW5jdGlvbiB4aHJSZXF1ZXN0ICh0eXBlID0gJ0dFVCcsIHVybCwgb3B0aW9ucykge1xyXG5cdGxldCB4aHJIdHRwID0gbmV3IHBsdXMubmV0LlhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCkgPT4ge1xyXG5cdFx0eGhySHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKHhockh0dHAucmVhZHlTdGF0ZSk7XHJcblx0XHRcdGlmICggeGhySHR0cC5yZWFkeVN0YXRlID09IDQgKSB7XHJcblx0XHRcdFx0aWYgKCB4aHJIdHRwLnN0YXR1cyA9PSAyMDAgKSB7XHJcblx0XHRcdFx0XHRyZXNvbHZlKHtjb2RlOiB4aHJIdHRwLnN0YXR1cywgZGF0YTogeGhySHR0cC5yZXNwb25zZVRleHR9KVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRwbHVzLm5hdGl2ZVVJLnRvYXN0KFwi572R57uc6ZSZ6K+v77yBXCIsIHt2ZXJ0aWNhbEFsaWduOiAnYm90dG9tJ30pO1xyXG5cdFx0XHRcdFx0cmVqZWN0KHtjb2RlOiB4aHJIdHRwLnN0YXR1cywgZGF0YTogJyd9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHhockh0dHAub3Blbih0eXBlLCB1cmwpO1xyXG5cdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICkge1xyXG5cdFx0XHR4aHJIdHRwLm92ZXJyaWRlTWltZVR5cGUob3B0aW9ucy5taW1lVHlwZSk7XHJcblx0XHR9XHJcblx0XHR4aHJIdHRwLnJlc3BvbnNlVHlwZSA9IG9wdGlvbnMucmVzcG9uc2VUeXBlIHx8ICdqc29uJztcclxuXHRcdGZvciAoIGxldCBpIGluIG9wdGlvbnMuaGVhZGVycyB8fCB7fSApIHtcclxuXHRcdFx0eGhySHR0cC5zZXRSZXF1ZXN0SGVhZGVyKGksIG9wdGlvbnMuaGVhZGVyc1tpXSk7XHJcblx0XHR9XHJcblx0XHR4aHJIdHRwLnRpbWVvdXQgPSBUSU1FT1VUO1xyXG5cdFx0eGhySHR0cC5zZW5kKG9wdGlvbnMucGFyYW1zIHx8IHt9KTtcclxuXHR9KVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYaHIge1xyXG5cdGdldCh1cmwsIG9wdGlvbnMgPSB7fSkge1xyXG5cdFx0dXJsICs9ICh1cmwuaW5kZXhPZignPycpIDwgMCA/ICc/JyA6ICcmJykgKyBwYXJhbShvcHRpb25zLnBhcmFtcyB8fCB7fSwgb3B0aW9ucy5oZWFkZXJzPy5DaGFyc2V0IHx8ICd1dGYtOCcpIHx8ICcnOyAvLyDor7fmsYLot6/lvoRcclxuXHRcdHJldHVybiB4aHJSZXF1ZXN0KCdHRVQnLCB1cmwsIG9wdGlvbnMpXHJcblx0fVxyXG5cdHBvc3RnZXQodXJsLCBvcHRpb25zID0ge30pIHtcclxuXHRcdHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA8IDAgPyAnPycgOiAnJicpICsgcGFyYW0ob3B0aW9ucy5wYXJhbXMgfHwge30sIG9wdGlvbnMuaGVhZGVycz8uQ2hhcnNldCB8fCAndXRmLTgnKSB8fCAnJzsgLy8g6K+35rGC6Lev5b6EXHJcblx0XHRyZXR1cm4geGhyUmVxdWVzdCgnUE9TVCcsIHVybCwgb3B0aW9ucylcclxuXHR9XHJcblx0cG9zdCh1cmwsIG9wdGlvbnMgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHhoclJlcXVlc3QoJ1BPU1QnLCB1cmwsIG9wdGlvbnMpXHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJhbShkYXRhLCBjaGFyc2V0KSB7XHJcbiAgICBsZXQgdXJsID0gJydcclxuICAgIGZvciAodmFyIGsgaW4gZGF0YSkge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGRhdGFba10gIT09IHVuZGVmaW5lZCA/IGRhdGFba10gOiAnJ1xyXG4gICAgICAgIHVybCArPSBjaGFyc2V0ID09ICd1dGYtOCcgPyBgJiR7a309JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWAgOiBgJiR7a309JHt2YWx1ZX1gXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXJsID8gdXJsLnN1YnN0cmluZygxKSA6ICcnXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/*!*********************************************************!*\
  !*** G:/my-project/uni-polymerize/plugins/dom/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  catalog: function catalog(type) {\n    return new Promise(function (resolve, reject) {\n      uni.navigateTo({\n        url: \"/modules/catalog?type=\".concat(type),\n        complete: function complete(res) {\n          uni.$once('catalog-btn', function (data) {\n            resolve(data);\n            uni.navigateBack({ delta: 1 });\n          });\n        } });\n\n    });\n  },\n  security: function security() {var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var type = data.type || 'input';\n    var title = data.title || '请输入安全密码';\n    return new Promise(function (resolve, reject) {\n      uni.navigateTo({\n        url: \"/modules/security?type=\".concat(type, \"&title=\").concat(title),\n        complete: function complete(res) {\n          uni.$once('security-btn', function (data) {\n            resolve(data);\n            uni.navigateBack({ delta: 1 });\n          });\n        } });\n\n    });\n  },\n  control: function control(position) {\n    return new Promise(function (resolve, reject) {\n      uni.navigateTo({\n        url: \"/modules/control?position=\".concat(JSON.stringify(position)),\n        complete: function complete(res) {\n          uni.$once('control-btn', function (data) {\n            resolve(data);\n            uni.navigateBack({ delta: 1 });\n          });\n        } });\n\n    });\n  } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGx1Z2lucy9kb20vaW5kZXguanMiXSwibmFtZXMiOlsiY2F0YWxvZyIsInR5cGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInVuaSIsIm5hdmlnYXRlVG8iLCJ1cmwiLCJjb21wbGV0ZSIsInJlcyIsIiRvbmNlIiwiZGF0YSIsIm5hdmlnYXRlQmFjayIsImRlbHRhIiwic2VjdXJpdHkiLCJ0aXRsZSIsImNvbnRyb2wiLCJwb3NpdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiJzR0FBZTtBQUNkQSxTQURjLG1CQUNMQyxJQURLLEVBQ0M7QUFDZCxXQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdkNDLFNBQUcsQ0FBQ0MsVUFBSixDQUFlO0FBQ2RDLFdBQUcsa0NBQTJCTixJQUEzQixDQURXO0FBRWRPLGdCQUFRLEVBQUUsa0JBQUNDLEdBQUQsRUFBUztBQUNsQkosYUFBRyxDQUFDSyxLQUFKLENBQVUsYUFBVixFQUF5QixVQUFDQyxJQUFELEVBQVU7QUFDbENSLG1CQUFPLENBQUNRLElBQUQsQ0FBUDtBQUNBTixlQUFHLENBQUNPLFlBQUosQ0FBaUIsRUFBQ0MsS0FBSyxFQUFFLENBQVIsRUFBakI7QUFDQSxXQUhEO0FBSUEsU0FQYSxFQUFmOztBQVNBLEtBVk0sQ0FBUDtBQVdBLEdBYmE7QUFjZEMsVUFkYyxzQkFjTyxLQUFYSCxJQUFXLHVFQUFKLEVBQUk7QUFDcEIsUUFBTVYsSUFBSSxHQUFHVSxJQUFJLENBQUNWLElBQUwsSUFBYSxPQUExQjtBQUNBLFFBQU1jLEtBQUssR0FBR0osSUFBSSxDQUFDSSxLQUFMLElBQWMsU0FBNUI7QUFDQSxXQUFPLElBQUliLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdkNDLFNBQUcsQ0FBQ0MsVUFBSixDQUFlO0FBQ2RDLFdBQUcsbUNBQTRCTixJQUE1QixvQkFBMENjLEtBQTFDLENBRFc7QUFFZFAsZ0JBQVEsRUFBRSxrQkFBQ0MsR0FBRCxFQUFTO0FBQ2xCSixhQUFHLENBQUNLLEtBQUosQ0FBVSxjQUFWLEVBQTBCLFVBQUNDLElBQUQsRUFBVTtBQUNuQ1IsbUJBQU8sQ0FBQ1EsSUFBRCxDQUFQO0FBQ0FOLGVBQUcsQ0FBQ08sWUFBSixDQUFpQixFQUFDQyxLQUFLLEVBQUUsQ0FBUixFQUFqQjtBQUNBLFdBSEQ7QUFJQSxTQVBhLEVBQWY7O0FBU0EsS0FWTSxDQUFQO0FBV0EsR0E1QmE7QUE2QmRHLFNBN0JjLG1CQTZCTEMsUUE3QkssRUE2Qks7QUFDbEIsV0FBTyxJQUFJZixPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3ZDQyxTQUFHLENBQUNDLFVBQUosQ0FBZTtBQUNkQyxXQUFHLHNDQUErQlcsSUFBSSxDQUFDQyxTQUFMLENBQWVGLFFBQWYsQ0FBL0IsQ0FEVztBQUVkVCxnQkFBUSxFQUFFLGtCQUFDQyxHQUFELEVBQVM7QUFDbEJKLGFBQUcsQ0FBQ0ssS0FBSixDQUFVLGFBQVYsRUFBeUIsVUFBQ0MsSUFBRCxFQUFVO0FBQ2xDUixtQkFBTyxDQUFDUSxJQUFELENBQVA7QUFDQU4sZUFBRyxDQUFDTyxZQUFKLENBQWlCLEVBQUNDLEtBQUssRUFBRSxDQUFSLEVBQWpCO0FBQ0EsV0FIRDtBQUlBLFNBUGEsRUFBZjs7QUFTQSxLQVZNLENBQVA7QUFXQSxHQXpDYSxFIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xyXG5cdGNhdGFsb2cgKHR5cGUpIHtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHVuaS5uYXZpZ2F0ZVRvKHtcclxuXHRcdFx0XHR1cmw6IGAvbW9kdWxlcy9jYXRhbG9nP3R5cGU9JHt0eXBlfWAsXHJcblx0XHRcdFx0Y29tcGxldGU6IChyZXMpID0+IHtcclxuXHRcdFx0XHRcdHVuaS4kb25jZSgnY2F0YWxvZy1idG4nLCAoZGF0YSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRyZXNvbHZlKGRhdGEpXHJcblx0XHRcdFx0XHRcdHVuaS5uYXZpZ2F0ZUJhY2soe2RlbHRhOiAxfSk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9KVxyXG5cdH0sXHJcblx0c2VjdXJpdHkgKGRhdGEgPSB7fSkge1xyXG5cdFx0Y29uc3QgdHlwZSA9IGRhdGEudHlwZSB8fCAnaW5wdXQnXHJcblx0XHRjb25zdCB0aXRsZSA9IGRhdGEudGl0bGUgfHwgJ+ivt+i+k+WFpeWuieWFqOWvhueggSdcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHVuaS5uYXZpZ2F0ZVRvKHtcclxuXHRcdFx0XHR1cmw6IGAvbW9kdWxlcy9zZWN1cml0eT90eXBlPSR7dHlwZX0mdGl0bGU9JHt0aXRsZX1gLFxyXG5cdFx0XHRcdGNvbXBsZXRlOiAocmVzKSA9PiB7XHJcblx0XHRcdFx0XHR1bmkuJG9uY2UoJ3NlY3VyaXR5LWJ0bicsIChkYXRhKSA9PiB7XHJcblx0XHRcdFx0XHRcdHJlc29sdmUoZGF0YSlcclxuXHRcdFx0XHRcdFx0dW5pLm5hdmlnYXRlQmFjayh7ZGVsdGE6IDF9KTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pXHJcblx0fSxcclxuXHRjb250cm9sIChwb3NpdGlvbikge1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0dW5pLm5hdmlnYXRlVG8oe1xyXG5cdFx0XHRcdHVybDogYC9tb2R1bGVzL2NvbnRyb2w/cG9zaXRpb249JHtKU09OLnN0cmluZ2lmeShwb3NpdGlvbil9YCxcclxuXHRcdFx0XHRjb21wbGV0ZTogKHJlcykgPT4ge1xyXG5cdFx0XHRcdFx0dW5pLiRvbmNlKCdjb250cm9sLWJ0bicsIChkYXRhKSA9PiB7XHJcblx0XHRcdFx0XHRcdHJlc29sdmUoZGF0YSlcclxuXHRcdFx0XHRcdFx0dW5pLm5hdmlnYXRlQmFjayh7ZGVsdGE6IDF9KTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pXHJcblx0fVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/*!******************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/js/util.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default =\n{\n  /* *\r\n   * 补零\r\n   * @param {Number} val 数字\r\n   * */\n  zeroize: function zeroize(val) {\n    return _zeroize(val);\n  },\n  /* *\r\n      * 时间格式化\r\n      * @param {String} time 时间戳or时间\r\n      * */\n  dateFormat: function dateFormat(time) {\n    var d = new Date(time);\n    return d.getFullYear() + '-' + _zeroize(d.getMonth() + 1) + '-' + _zeroize(d.getDate()) + ' ' + _zeroize(d.getHours()) + ':' + _zeroize(d.getMinutes());\n  },\n  /* *\r\n      * 秒数转化为分秒\r\n      * @param {String} value 秒数\r\n      * */\n  minutesFormat: function minutesFormat(value) {\n    var minutes = Math.floor(value / 60 % 60) >= 10 ? Math.floor(value / 60 % 60) : '0' + Math.floor(value / 60 % 60);\n    var seconds = Math.floor(value % 60) >= 10 ? Math.floor(value % 60) : '0' + Math.floor(value % 60);\n    return minutes + ':' + seconds;\n  },\n  /* *\r\n      * 时间转化为秒数\r\n      * @param {String} time 时间（HH:mm:ss）\r\n      * */\n  time2seconds: function time2seconds(time) {\n    var seconds = parseInt(time.split(':')[0]) * 60 + parseInt(time.split(':')[1].split('.')[0]) + parseInt(time.split(':')[1].split('.')[1]) / 1000;\n    return seconds;\n  },\n  /* *\r\n      * 移除url地址域名\r\n      * @param {String} str http地址\r\n      * */\n  removeUrl: function removeUrl(url) {\n    var str = url.replace(/^http:\\/\\/[^/]+/, '');\n    return str.substr(1);\n  },\n  /* *\r\n      * 获取文件后缀\r\n      * @param {String} name 带后缀的文件名称\r\n      * */\n  suffix: function suffix(name) {\n    //获取图片后缀\n    var fileName = name.lastIndexOf(\".\");\n    var fileNameLength = name.length;\n    var fileFormat = name.substring(fileName + 1, fileNameLength);\n    return fileFormat;\n  },\n\n  /* *\r\n      * 清除文件后缀\r\n      * @param {String} name 带后缀的文件名称\r\n      * */\n  removeSuffix: function removeSuffix(name) {\n    //获取图片后缀\n    var fileName = name.lastIndexOf(\".\");\n    if (fileName > -1) {\n      var fileNameFormat = name.substring(0, fileName);\n      return fileNameFormat;\n    } else {\n      return name;\n    }\n  },\n\n  /**\r\n      * 数组查找符合条件元素并返回下标\r\n      * @param {Array} arr 传入数组\r\n      * @param {String} value 条件元素\r\n      * @param {String} query 对比key值\r\n     */\n  indexOf: function indexOf(arr, query, value) {\n    var len = arr.length;\n    for (var i = 0; i < len; i++) {\n      if (arr[i][query] == value) {\n        return parseInt(i);\n      }\n    }\n    return -1;\n  },\n\n  /**\r\n      * 正则匹配\r\n      * @param {String} type 匹配类型\r\n      * @param {String} value 匹配值\r\n     */\n  reg: function reg(type, value) {\n    var regs = {\n      //身份证证则\n      idCard: new RegExp(/^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$|^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$/),\n      //手机正则\n      mobile: new RegExp(/^1[3456789]\\d{9}$/),\n      //固定电话正则\n      phone: new RegExp(/^(\\(\\d{3,4}\\)|\\d{3,4}-|\\s)?\\d{7,14}$/),\n      //金额验证\n      price: new RegExp(/^[1-9]\\d*(,\\d{3})*(\\.\\d{1,2})?$|^0.\\d{1,2}$/),\n      //邮箱验证\n      email: new RegExp(/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/),\n      //银行卡\n      bank: new RegExp(/^([1-9]{1})(\\d{15}|\\d{18})$/) };\n\n    return regs[type].test(value);\n  },\n  /**\r\n      * 计算2个时间差的分钟数或者秒钟数\r\n      * @param {datetime} time1 开始时间\r\n      * @param {datetime} time2 结束时间\r\n     */\n  timeMinuse: function timeMinuse(time1, time2) {var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'minutes';\n    //判断开始时间是否大于结束日期\n    var date1 = new Date(time1);\n    var date2 = new Date(time2);\n    if (date1 > date2) {\n      __f__(\"log\", \"开始时间不能大于结束时间！\", \" at assets/js/util.js:118\");\n      return false;\n    }\n    var seconds = date2.getTime() / 1000 - date1.getTime() / 1000;\n    return type == 'minutes' ? seconds / 60 : seconds;\n  },\n\n  /**\r\n      * 生成随机字符串\r\n      * @param {Number} len 长度\r\n     */\n  randomString: function randomString(len) {\n    len = len || 32;\n    var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'; /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/\n    var maxPos = $chars.length;\n    var pwd = '';\n    for (var i = 0; i < len; i++) {\n      pwd += $chars.charAt(Math.floor(Math.random() * maxPos));\n    }\n    return pwd;\n  },\n\n  /**\r\n      * 生成随机ID\r\n     */\n  randomID: function randomID() {\n    var mydate = new Date();\n    return mydate.getMinutes() + mydate.getSeconds() + mydate.getMilliseconds() + Math.round(Math.random() * 10000);\n  },\n\n  /**\r\n      * 生成随机不重复整数\r\n      * @param {Number} len 长度\r\n     */\n  randomSoleNumber: function randomSoleNumber(len) {\n    var min = 0;\n    var max = len - 1;\n    var arr = [];\n    while (arr.length < len) {\n      var value = Math.floor(Math.random() * (max - min + 1)) + min;\n      if (arr.indexOf(value) == -1) {\n        arr.push(value);\n      }\n    }\n    return arr;\n  },\n  /**\r\n      * 去除html字符串的无关内容\r\n      * @param {Number} html html字符串\r\n     */\n  replaceStr: function replaceStr(html) {\n    var str = JSON.stringify(html); //将html转化为字符\n    str = str.replace(/\\\\n/g, ''); //去除\\n\n    str = str.replace(/\\\\r/g, ''); //去除\\r\n    str = str.replace(/\\\\t/g, ''); //去除\\t\n    str = str.replace(/&nbsp;/g, ''); //去除&nbsp;\n    str = str.replace(/\\\\/g, ''); //去除掉无关的斜杠\n    return str;\n  },\n\n  /**\r\n      * 16进制颜色转化为rgb\r\n      * @param {String} hex 16进制颜色\r\n     */\n  hex2rgb: function hex2rgb(hex) {\n    var str = \"rgb(\";\n    var r = parseInt(hex.slice(1, 3), 16).toString(); //ff  slice不包括end\n    var g = parseInt(hex.slice(3, 5), 16).toString(); //00\n    var b = parseInt(hex.slice(5, 7), 16).toString(); //ff\n    str += r + \",\" + g + \",\" + b + \")\";\n    return str;\n  },\n\n  // 深度克隆\n  deepClone: function deepClone(obj) {\n    if (typeof obj !== \"object\" && typeof obj !== 'function') {\n      //原始类型直接返回\n      return obj;\n    }\n    var o = isArray(obj) ? [] : {};\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        o[i] = typeof obj[i] === \"object\" ? this.deepClone(obj[i]) : obj[i];\n      }\n    }\n    return o;\n  } };\n\n\n// 判断arr是否为一个数组，返回一个bool值\nexports.default = _default;function isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n}\n\nfunction _zeroize(val) {\n  return val >= 10 ? val : '0' + val;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 6)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/*!**********************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/js/business.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _store = _interopRequireDefault(__webpack_require__(/*! @/store */ 17));\nvar _util = _interopRequireDefault(__webpack_require__(/*! @/assets/js/util.js */ 15));\nvar _index = _interopRequireDefault(__webpack_require__(/*! @/js_sdk/yb-native-ui/index.js */ 33));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var\n\ngetters = _store.default.getters;var\nsuffix = _util.default.suffix;var _default =\n{\n  setSkinColor: function setSkinColor() {\n    var skinColor = getters['app/skinColor'];\n    var skinMode = getters['app/skinMode'];\n    var tabbars = ['book', 'comic', 'music', 'user'];\n    tabbars.forEach(function (item, key) {\n      uni.setTabBarItem({\n        index: key,\n        iconPath: 'static/tabbar/' + item + '_' + skinMode + '.png',\n        selectedIconPath: 'static/tabbar/' + item + '_' + skinMode + '-actived.png',\n        success: function success() {},\n        fail: function fail(err) {\n          __f__(\"log\", err, \" at assets/js/business.js:19\");\n        } });\n\n    });\n    uni.setTabBarStyle({\n      color: skinColor.color_1,\n      selectedColor: skinColor.color_actived_1,\n      backgroundColor: skinColor.color_bg_1,\n      success: function success() {},\n      fail: function fail(err) {\n        __f__(\"log\", err, \" at assets/js/business.js:29\");\n      } });\n\n  },\n  share: function share(src) {\n    var filePath = plus.io.convertLocalFileSystemURL(src);\n    var file = plus.android.newObject(\"java.io.File\", filePath);\n    if (plus.android.invoke(file, 'exists')) {\n      var main = plus.android.runtimeMainActivity();\n      var Intent = plus.android.importClass(\"android.content.Intent\");\n      var Uri = plus.android.importClass(\"android.net.Uri\");\n      var environment = plus.android.importClass(\"android.os.Environment\");\n      var MimeTypeMap = plus.android.importClass(\"android.webkit.MimeTypeMap\");\n      var accept = MimeTypeMap.getSingleton().getMimeTypeFromExtension(suffix(plus.android.invoke(file, 'getName')));\n      var shareIntent = new Intent(Intent.ACTION_SEND);\n      shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));\n      shareIntent.setType(accept);\n      main.startActivity(Intent.createChooser(shareIntent, \"分享文件\"));\n    } else {\n      var skinMode = getters['app/skinMode'];\n      _index.default.alert({\n        content: '文件路径无效',\n        dark: skinMode == 'night' });\n\n    }\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 6)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2pzL2J1c2luZXNzLmpzIl0sIm5hbWVzIjpbImdldHRlcnMiLCJTdG9yZSIsInN1ZmZpeCIsIlV0aWxzIiwic2V0U2tpbkNvbG9yIiwic2tpbkNvbG9yIiwic2tpbk1vZGUiLCJ0YWJiYXJzIiwiZm9yRWFjaCIsIml0ZW0iLCJrZXkiLCJ1bmkiLCJzZXRUYWJCYXJJdGVtIiwiaW5kZXgiLCJpY29uUGF0aCIsInNlbGVjdGVkSWNvblBhdGgiLCJzdWNjZXNzIiwiZmFpbCIsImVyciIsInNldFRhYkJhclN0eWxlIiwiY29sb3IiLCJjb2xvcl8xIiwic2VsZWN0ZWRDb2xvciIsImNvbG9yX2FjdGl2ZWRfMSIsImJhY2tncm91bmRDb2xvciIsImNvbG9yX2JnXzEiLCJzaGFyZSIsInNyYyIsImZpbGVQYXRoIiwicGx1cyIsImlvIiwiY29udmVydExvY2FsRmlsZVN5c3RlbVVSTCIsImZpbGUiLCJhbmRyb2lkIiwibmV3T2JqZWN0IiwiaW52b2tlIiwibWFpbiIsInJ1bnRpbWVNYWluQWN0aXZpdHkiLCJJbnRlbnQiLCJpbXBvcnRDbGFzcyIsIlVyaSIsImVudmlyb25tZW50IiwiTWltZVR5cGVNYXAiLCJhY2NlcHQiLCJnZXRTaW5nbGV0b24iLCJnZXRNaW1lVHlwZUZyb21FeHRlbnNpb24iLCJzaGFyZUludGVudCIsIkFDVElPTl9TRU5EIiwicHV0RXh0cmEiLCJFWFRSQV9TVFJFQU0iLCJmcm9tRmlsZSIsInNldFR5cGUiLCJzdGFydEFjdGl2aXR5IiwiY3JlYXRlQ2hvb3NlciIsIk5hdGl2ZVVJIiwiYWxlcnQiLCJjb250ZW50IiwiZGFyayJdLCJtYXBwaW5ncyI6Im9JQUFBO0FBQ0E7QUFDQSxtRzs7QUFFUUEsTyxHQUFZQyxjLENBQVpELE87QUFDQUUsTSxHQUFXQyxhLENBQVhELE07QUFDTztBQUNkRSxjQURjLDBCQUNFO0FBQ2YsUUFBTUMsU0FBUyxHQUFHTCxPQUFPLENBQUMsZUFBRCxDQUF6QjtBQUNBLFFBQU1NLFFB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WUFBSSxFQUFFbkQsUUFBUSxJQUFJLE9BRkosRUFBZjs7QUFJQTtBQUNELEdBL0NhLEUiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RvcmUgZnJvbSAnQC9zdG9yZSdcclxuaW1wb3J0IFV0aWxzIGZyb20gJ0AvYXNzZXRzL2pzL3V0aWwuanMnXHJcbmltcG9ydCBOYXRpdmVVSSBmcm9tICdAL2pzX3Nkay95Yi1uYXRpdmUtdWkvaW5kZXguanMnXHJcblxyXG5jb25zdCB7IGdldHRlcnMgfSA9IFN0b3JlXHJcbmNvbnN0IHsgc3VmZml4IH0gPSBVdGlsc1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0c2V0U2tpbkNvbG9yICgpIHtcclxuXHRcdGNvbnN0IHNraW5Db2xvciA9IGdldHRlcnNbJ2FwcC9za2luQ29sb3InXVxyXG5cdFx0Y29uc3Qgc2tpbk1vZGUgPSBnZXR0ZXJzWydhcHAvc2tpbk1vZGUnXVxyXG5cdFx0Y29uc3QgdGFiYmFycyA9IFsnYm9vaycsICdjb21pYycsICdtdXNpYycsICd1c2VyJ11cclxuXHRcdHRhYmJhcnMuZm9yRWFjaCgoaXRlbSAsIGtleSkgPT4ge1xyXG5cdFx0XHR1bmkuc2V0VGFiQmFySXRlbSh7XHJcblx0XHRcdFx0aW5kZXg6IGtleSxcclxuXHRcdFx0XHRpY29uUGF0aDogJ3N0YXRpYy90YWJiYXIvJyArIGl0ZW0gKyAnXycgKyBza2luTW9kZSArICcucG5nJyxcclxuXHRcdFx0XHRzZWxlY3RlZEljb25QYXRoOiAnc3RhdGljL3RhYmJhci8nICsgaXRlbSArICdfJyArIHNraW5Nb2RlICsgJy1hY3RpdmVkLnBuZycsXHJcblx0XHRcdFx0c3VjY2VzczogKCkgPT4ge30sXHJcblx0XHRcdFx0ZmFpbDogKGVycikgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coZXJyKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pXHJcblx0XHR9KVxyXG5cdFx0dW5pLnNldFRhYkJhclN0eWxlKHtcclxuXHRcdFx0Y29sb3I6IHNraW5Db2xvci5jb2xvcl8xLFxyXG5cdFx0XHRzZWxlY3RlZENvbG9yOiBza2luQ29sb3IuY29sb3JfYWN0aXZlZF8xLFxyXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IHNraW5Db2xvci5jb2xvcl9iZ18xLFxyXG5cdFx0XHRzdWNjZXNzOiAoKSA9PiB7fSxcclxuXHRcdFx0ZmFpbDogKGVycikgPT4ge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycik7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0fSxcclxuXHRzaGFyZSAoc3JjKSB7XHJcblx0XHRsZXQgZmlsZVBhdGggPSBwbHVzLmlvLmNvbnZlcnRMb2NhbEZpbGVTeXN0ZW1VUkwoc3JjKTtcclxuXHRcdGxldCBmaWxlID0gcGx1cy5hbmRyb2lkLm5ld09iamVjdChcImphdmEuaW8uRmlsZVwiLCBmaWxlUGF0aCk7XHJcblx0XHRpZiAoIHBsdXMuYW5kcm9pZC5pbnZva2UoZmlsZSwgJ2V4aXN0cycpICkge1xyXG5cdFx0XHRsZXQgbWFpbiA9IHBsdXMuYW5kcm9pZC5ydW50aW1lTWFpbkFjdGl2aXR5KCk7XHJcblx0XHRcdGxldCBJbnRlbnQgPSBwbHVzLmFuZHJvaWQuaW1wb3J0Q2xhc3MoXCJhbmRyb2lkLmNvbnRlbnQuSW50ZW50XCIpO1xyXG5cdFx0XHRsZXQgVXJpID0gcGx1cy5hbmRyb2lkLmltcG9ydENsYXNzKFwiYW5kcm9pZC5uZXQuVXJpXCIpO1xyXG5cdFx0XHRsZXQgZW52aXJvbm1lbnQgPSBwbHVzLmFuZHJvaWQuaW1wb3J0Q2xhc3MoXCJhbmRyb2lkLm9zLkVudmlyb25tZW50XCIpO1xyXG5cdFx0XHRsZXQgTWltZVR5cGVNYXAgPSBwbHVzLmFuZHJvaWQuaW1wb3J0Q2xhc3MoXCJhbmRyb2lkLndlYmtpdC5NaW1lVHlwZU1hcFwiKTtcclxuXHRcdFx0bGV0IGFjY2VwdCA9IE1pbWVUeXBlTWFwLmdldFNpbmdsZXRvbigpLmdldE1pbWVUeXBlRnJvbUV4dGVuc2lvbihzdWZmaXgocGx1cy5hbmRyb2lkLmludm9rZShmaWxlLCAnZ2V0TmFtZScpKSk7XHJcblx0XHRcdGxldCBzaGFyZUludGVudCA9IG5ldyBJbnRlbnQoSW50ZW50LkFDVElPTl9TRU5EKTtcclxuXHRcdFx0c2hhcmVJbnRlbnQucHV0RXh0cmEoSW50ZW50LkVYVFJBX1NUUkVBTSwgVXJpLmZyb21GaWxlKGZpbGUpKTtcclxuXHRcdFx0c2hhcmVJbnRlbnQuc2V0VHlwZShhY2NlcHQpO1xyXG5cdFx0XHRtYWluLnN0YXJ0QWN0aXZpdHkoSW50ZW50LmNyZWF0ZUNob29zZXIoc2hhcmVJbnRlbnQsXCLliIbkuqvmlofku7ZcIikpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y29uc3Qgc2tpbk1vZGUgPSBnZXR0ZXJzWydhcHAvc2tpbk1vZGUnXVxyXG5cdFx0XHROYXRpdmVVSS5hbGVydCh7XHJcblx0XHRcdFx0Y29udGVudDogJ+aWh+S7tui3r+W+hOaXoOaViCcsXHJcblx0XHRcdFx0ZGFyazogc2tpbk1vZGUgPT0gJ25pZ2h0J1xyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/*!***************************************************!*\
  !*** G:/my-project/uni-polymerize/store/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 2));\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 18));\nvar _app = _interopRequireDefault(__webpack_require__(/*! ./modules/app.js */ 20));\nvar _search = _interopRequireDefault(__webpack_require__(/*! ./modules/search.js */ 25));\nvar _cache = _interopRequireDefault(__webpack_require__(/*! ./modules/cache.js */ 26));\nvar _source = _interopRequireDefault(__webpack_require__(/*! ./modules/source.js */ 28));\nvar _collection = _interopRequireDefault(__webpack_require__(/*! ./modules/collection.js */ 29));\nvar _downer = _interopRequireDefault(__webpack_require__(/*! ./modules/downer.js */ 30));\nvar _audio = _interopRequireDefault(__webpack_require__(/*! ./modules/audio.js */ 32));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n_vue.default.use(_vuex.default);\nvar store = new _vuex.default.Store({\n  modules: {\n    app: _app.default,\n    search: _search.default,\n    cache: _cache.default,\n    source: _source.default,\n    collection: _collection.default,\n    downer: _downer.default,\n    audio: _audio.default } });var _default =\n\n\nstore;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvaW5kZXguanMiXSwibmFtZXMiOlsiVnVlIiwidXNlIiwiVnVleCIsInN0b3JlIiwiU3RvcmUiLCJtb2R1bGVzIiwiYXBwIiwic2VhcmNoIiwiY2FjaGUiLCJzb3VyY2UiLCJjb2xsZWN0aW9uIiwiZG93bmVyIiwiYXVkaW8iXSwibWFwcGluZ3MiOiJ1RkFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUY7QUFDQUEsYUFBSUMsR0FBSixDQUFRQyxhQUFSO0FBQ0EsSUFBTUMsS0FBSyxHQUFHLElBQUlELGNBQUtFLEtBQVQsQ0FBZTtBQUM1QkMsU0FBTyxFQUFFO0FBQ1JDLE9BQUcsRUFBSEEsWUFEUTtBQUVSQyxVQUFNLEVBQU5BLGVBRlE7QUFHUkMsU0FBSyxFQUFMQSxjQUhRO0FBSVJDLFVBQU0sRUFBTkEsZUFKUTtBQUtSQyxjQUFVLEVBQVZBLG1CQUxRO0FBTVJDLFVBQU0sRUFBTkEsZUFOUTtBQU9SQyxTQUFLLEVBQUxBLGNBUFEsRUFEbUIsRUFBZixDQUFkLEM7OztBQVdlVCxLIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBWdWV4IGZyb20gJ3Z1ZXgnXHJcbmltcG9ydCBhcHAgZnJvbSAnLi9tb2R1bGVzL2FwcC5qcydcclxuaW1wb3J0IHNlYXJjaCBmcm9tICcuL21vZHVsZXMvc2VhcmNoLmpzJ1xyXG5pbXBvcnQgY2FjaGUgZnJvbSAnLi9tb2R1bGVzL2NhY2hlLmpzJ1xyXG5pbXBvcnQgc291cmNlIGZyb20gJy4vbW9kdWxlcy9zb3VyY2UuanMnXHJcbmltcG9ydCBjb2xsZWN0aW9uIGZyb20gJy4vbW9kdWxlcy9jb2xsZWN0aW9uLmpzJ1xyXG5pbXBvcnQgZG93bmVyIGZyb20gJy4vbW9kdWxlcy9kb3duZXIuanMnXHJcbmltcG9ydCBhdWRpbyBmcm9tICcuL21vZHVsZXMvYXVkaW8uanMnXHJcblZ1ZS51c2UoVnVleClcclxuY29uc3Qgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7XHJcblx0bW9kdWxlczoge1xyXG5cdFx0YXBwLFxyXG5cdFx0c2VhcmNoLFxyXG5cdFx0Y2FjaGUsXHJcblx0XHRzb3VyY2UsXHJcblx0XHRjb2xsZWN0aW9uLFxyXG5cdFx0ZG93bmVyLFxyXG5cdFx0YXVkaW9cclxuXHR9XHJcbn0pXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, createNamespacedHelpers, install, mapActions, mapGetters, mapMutations, mapState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/*!
 * vuex v3.4.0
 * (c) 2020 Evan You
 * @license MIT
 */
function applyMixin (Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if ( options === void 0 ) options = {};

      options.init = options.init
        ? [vuexInit].concat(options.init)
        : vuexInit;
      _init.call(this, options);
    };
  }

  /**
   * Vuex init hook, injected into each instances init hooks list.
   */

  function vuexInit () {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function'
        ? options.store()
        : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var target = typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
    ? global
    : {};
var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin (store) {
  if (!devtoolHook) { return }

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  }, { prepend: true });

  store.subscribeAction(function (action, state) {
    devtoolHook.emit('vuex:action', action, state);
  }, { prepend: true });
}

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */

/**
 * forEach for object
 */
function forEachValue (obj, fn) {
  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
}

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function isPromise (val) {
  return val && typeof val.then === 'function'
}

function assert (condition, msg) {
  if (!condition) { throw new Error(("[vuex] " + msg)) }
}

function partial (fn, arg) {
  return function () {
    return fn(arg)
  }
}

// Base data struct for store's module, package with some attribute and method
var Module = function Module (rawModule, runtime) {
  this.runtime = runtime;
  // Store some children item
  this._children = Object.create(null);
  // Store the origin module object which passed by programmer
  this._rawModule = rawModule;
  var rawState = rawModule.state;

  // Store the origin module's state
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = { namespaced: { configurable: true } };

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced
};

Module.prototype.addChild = function addChild (key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild (key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild (key) {
  return this._children[key]
};

Module.prototype.hasChild = function hasChild (key) {
  return key in this._children
};

Module.prototype.update = function update (rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild (fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter (fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction (fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation (fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties( Module.prototype, prototypeAccessors );

var ModuleCollection = function ModuleCollection (rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get (path) {
  return path.reduce(function (module, key) {
    return module.getChild(key)
  }, this.root)
};

ModuleCollection.prototype.getNamespace = function getNamespace (path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '')
  }, '')
};

ModuleCollection.prototype.update = function update$1 (rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
    var this$1 = this;
    if ( runtime === void 0 ) runtime = true;

  if ((true)) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  if (!parent.getChild(key).runtime) { return }

  parent.removeChild(key);
};

ModuleCollection.prototype.isRegistered = function isRegistered (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  return parent.hasChild(key)
};

function update (path, targetModule, newModule) {
  if ((true)) {
    assertRawModule(path, newModule);
  }

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if ((true)) {
          console.warn(
            "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
            'manual reload is needed'
          );
        }
        return
      }
      update(
        path.concat(key),
        targetModule.getChild(key),
        newModule.modules[key]
      );
    }
  }
}

var functionAssert = {
  assert: function (value) { return typeof value === 'function'; },
  expected: 'function'
};

var objectAssert = {
  assert: function (value) { return typeof value === 'function' ||
    (typeof value === 'object' && typeof value.handler === 'function'); },
  expected: 'function or object with "handler" function'
};

var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule (path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) { return }

    var assertOptions = assertTypes[key];

    forEachValue(rawModule[key], function (value, type) {
      assert(
        assertOptions.assert(value),
        makeAssertionMessage(path, key, type, value, assertOptions.expected)
      );
    });
  });
}

function makeAssertionMessage (path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + (path.join('.')) + "\"";
  }
  buf += " is " + (JSON.stringify(value)) + ".";
  return buf
}

var Vue; // bind on install

var Store = function Store (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if ((true)) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
  }

  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];
  var strict = options.strict; if ( strict === void 0 ) strict = false;

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();
  this._makeLocalGettersCache = Object.create(null);

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch (type, payload) {
    return dispatch.call(store, type, payload)
  };
  this.commit = function boundCommit (type, payload, options) {
    return commit.call(store, type, payload, options)
  };

  // strict mode
  this.strict = strict;

  var state = this._modules.root.state;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) { return plugin(this$1); });

  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;
  if (useDevtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors$1 = { state: { configurable: true } };

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state
};

prototypeAccessors$1.state.set = function (v) {
  if ((true)) {
    assert(false, "use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit (_type, _payload, _options) {
    var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if ((true)) {
      console.error(("[vuex] unknown mutation type: " + type));
    }
    return
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator (handler) {
      handler(payload);
    });
  });

  this._subscribers
    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
    .forEach(function (sub) { return sub(mutation, this$1.state); });

  if (
    ( true) &&
    options && options.silent
  ) {
    console.warn(
      "[vuex] mutation type: " + type + ". Silent option has been removed. " +
      'Use the filter functionality in the vue-devtools'
    );
  }
};

Store.prototype.dispatch = function dispatch (_type, _payload) {
    var this$1 = this;

  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;

  var action = { type: type, payload: payload };
  var entry = this._actions[type];
  if (!entry) {
    if ((true)) {
      console.error(("[vuex] unknown action type: " + type));
    }
    return
  }

  try {
    this._actionSubscribers
      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
      .filter(function (sub) { return sub.before; })
      .forEach(function (sub) { return sub.before(action, this$1.state); });
  } catch (e) {
    if ((true)) {
      console.warn("[vuex] error in before action subscribers: ");
      console.error(e);
    }
  }

  var result = entry.length > 1
    ? Promise.all(entry.map(function (handler) { return handler(payload); }))
    : entry[0](payload);

  return new Promise(function (resolve, reject) {
    result.then(function (res) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.after; })
          .forEach(function (sub) { return sub.after(action, this$1.state); });
      } catch (e) {
        if ((true)) {
          console.warn("[vuex] error in after action subscribers: ");
          console.error(e);
        }
      }
      resolve(res);
    }, function (error) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.error; })
          .forEach(function (sub) { return sub.error(action, this$1.state, error); });
      } catch (e) {
        if ((true)) {
          console.warn("[vuex] error in error action subscribers: ");
          console.error(e);
        }
      }
      reject(error);
    });
  })
};

Store.prototype.subscribe = function subscribe (fn, options) {
  return genericSubscribe(fn, this._subscribers, options)
};

Store.prototype.subscribeAction = function subscribeAction (fn, options) {
  var subs = typeof fn === 'function' ? { before: fn } : fn;
  return genericSubscribe(subs, this._actionSubscribers, options)
};

Store.prototype.watch = function watch (getter, cb, options) {
    var this$1 = this;

  if ((true)) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }
  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
};

Store.prototype.replaceState = function replaceState (state) {
    var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule (path, rawModule, options) {
    if ( options === void 0 ) options = {};

  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule (path) {
    var this$1 = this;

  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hasModule = function hasModule (path) {
  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  return this._modules.isRegistered(path)
};

Store.prototype.hotUpdate = function hotUpdate (newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit (fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties( Store.prototype, prototypeAccessors$1 );

function genericSubscribe (fn, subs, options) {
  if (subs.indexOf(fn) < 0) {
    options && options.prepend
      ? subs.unshift(fn)
      : subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  }
}

function resetStore (store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM (store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  // reset local getters cache
  store._makeLocalGettersCache = Object.create(null);
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    // direct inline function use will lead to closure preserving oldVm.
    // using partial to return function with only arguments preserved in closure environment.
    computed[key] = partial(fn, store);
    Object.defineProperty(store.getters, key, {
      get: function () { return store._vm[key]; },
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () { return oldVm.$destroy(); });
  }
}

function installModule (store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    if (store._modulesNamespaceMap[namespace] && ("development" !== 'production')) {
      console.error(("[vuex] duplicate namespace " + namespace + " for the namespaced module " + (path.join('/'))));
    }
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      if ((true)) {
        if (moduleName in parentState) {
          console.warn(
            ("[vuex] state field \"" + moduleName + "\" was overridden by a module with the same name at \"" + (path.join('.')) + "\"")
          );
        }
      }
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */
function makeLocalContext (store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (( true) && !store._actions[type]) {
          console.error(("[vuex] unknown local action type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      return store.dispatch(type, payload)
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (( true) && !store._mutations[type]) {
          console.error(("[vuex] unknown local mutation type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      store.commit(type, payload, options);
    }
  };

  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace
        ? function () { return store.getters; }
        : function () { return makeLocalGetters(store, namespace); }
    },
    state: {
      get: function () { return getNestedState(store.state, path); }
    }
  });

  return local
}

function makeLocalGetters (store, namespace) {
  if (!store._makeLocalGettersCache[namespace]) {
    var gettersProxy = {};
    var splitPos = namespace.length;
    Object.keys(store.getters).forEach(function (type) {
      // skip if the target getter is not match this namespace
      if (type.slice(0, splitPos) !== namespace) { return }

      // extract local getter type
      var localType = type.slice(splitPos);

      // Add a port to the getters proxy.
      // Define as getter property because
      // we do not want to evaluate the getters in this time.
      Object.defineProperty(gettersProxy, localType, {
        get: function () { return store.getters[type]; },
        enumerable: true
      });
    });
    store._makeLocalGettersCache[namespace] = gettersProxy;
  }

  return store._makeLocalGettersCache[namespace]
}

function registerMutation (store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler (payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction (store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler (payload) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err
      })
    } else {
      return res
    }
  });
}

function registerGetter (store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if ((true)) {
      console.error(("[vuex] duplicate getter key: " + type));
    }
    return
  }
  store._wrappedGetters[type] = function wrappedGetter (store) {
    return rawGetter(
      local.state, // local state
      local.getters, // local getters
      store.state, // root state
      store.getters // root getters
    )
  };
}

function enableStrictMode (store) {
  store._vm.$watch(function () { return this._data.$$state }, function () {
    if ((true)) {
      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }
  }, { deep: true, sync: true });
}

function getNestedState (state, path) {
  return path.reduce(function (state, key) { return state[key]; }, state)
}

function unifyObjectStyle (type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if ((true)) {
    assert(typeof type === 'string', ("expects string as the type, but found " + (typeof type) + "."));
  }

  return { type: type, payload: payload, options: options }
}

function install (_Vue) {
  if (Vue && _Vue === Vue) {
    if ((true)) {
      console.error(
        '[vuex] already installed. Vue.use(Vuex) should be called only once.'
      );
    }
    return
  }
  Vue = _Vue;
  applyMixin(Vue);
}

/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */
var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  if (( true) && !isValidMap(states)) {
    console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState () {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function'
        ? val.call(this, state, getters)
        : state[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  if (( true) && !isValidMap(mutations)) {
    console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // Get the commit method from store
      var commit = this.$store.commit;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
        if (!module) {
          return
        }
        commit = module.context.commit;
      }
      return typeof val === 'function'
        ? val.apply(this, [commit].concat(args))
        : commit.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */
var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  if (( true) && !isValidMap(getters)) {
    console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    // The namespace has been mutated by normalizeNamespace
    val = namespace + val;
    res[key] = function mappedGetter () {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return
      }
      if (( true) && !(val in this.$store.getters)) {
        console.error(("[vuex] unknown getter: " + val));
        return
      }
      return this.$store.getters[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  if (( true) && !isValidMap(actions)) {
    console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // get dispatch function from store
      var dispatch = this.$store.dispatch;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
        if (!module) {
          return
        }
        dispatch = module.context.dispatch;
      }
      return typeof val === 'function'
        ? val.apply(this, [dispatch].concat(args))
        : dispatch.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */
var createNamespacedHelpers = function (namespace) { return ({
  mapState: mapState.bind(null, namespace),
  mapGetters: mapGetters.bind(null, namespace),
  mapMutations: mapMutations.bind(null, namespace),
  mapActions: mapActions.bind(null, namespace)
}); };

/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */
function normalizeMap (map) {
  if (!isValidMap(map)) {
    return []
  }
  return Array.isArray(map)
    ? map.map(function (key) { return ({ key: key, val: key }); })
    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
}

/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */
function isValidMap (map) {
  return Array.isArray(map) || isObject(map)
}

/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */
function normalizeNamespace (fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map)
  }
}

/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */
function getModuleByNamespace (store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if (( true) && !module) {
    console.error(("[vuex] module namespace not found in " + helper + "(): " + namespace));
  }
  return module
}

var index = {
  Store: Store,
  install: install,
  version: '3.4.0',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers
};

/* harmony default export */ __webpack_exports__["default"] = (index);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ 19)))

/***/ }),
/* 19 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 20 */
/*!*********************************************************!*\
  !*** G:/my-project/uni-polymerize/store/modules/app.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = __webpack_require__(/*! ../config.js */ 21);\nvar _index = _interopRequireDefault(__webpack_require__(/*! @/assets/skin/index.js */ 22));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nvar state = {\n  adult: uni.getStorageSync(_config.ADULT) || false, //青壮年模式\n  adultPwd: uni.getStorageSync(_config.ADULTPWD) || '', //青壮年模式密码\n  skin: uni.getStorageSync(_config.SKIN) || 'default' //皮肤\n};\n\nvar getters = {\n  getAdult: function getAdult(state) {\n    return state.adult;\n  },\n  getAdultPwd: function getAdultPwd(state) {\n    return state.adultPwd;\n  },\n  skinMode: function skinMode(state) {\n    return state.skin;\n  },\n  skinColor: function skinColor(state) {\n    return _index.default[state.skin];\n  } };\n\n\nvar mutations = {\n  setAdult: function setAdult(state, bol) {\n    state.adult = bol;\n    uni.setStorageSync(_config.ADULT, bol);\n  },\n  setAdultPwd: function setAdultPwd(state, pwd) {\n    state.adultPwd = pwd;\n    uni.setStorageSync(_config.ADULTPWD, pwd);\n  },\n  //改变皮肤模式\n  setSkin: function setSkin(state, skin) {\n    state.skin = skin;\n    uni.setStorageSync(_config.SKIN, skin);\n  } };\n\n\nvar actions = {\n  //改变皮肤模式\n  changeSkin: function changeSkin(_ref, skin) {var commit = _ref.commit;\n    commit('setSkin', skin);\n    getApp().globalData.$business.setSkinColor();\n  } };var _default =\n\n\n{\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvbW9kdWxlcy9hcHAuanMiXSwibmFtZXMiOlsic3RhdGUiLCJhZHVsdCIsInVuaSIsImdldFN0b3JhZ2VTeW5jIiwiQURVTFQiLCJhZHVsdFB3ZCIsIkFEVUxUUFdEIiwic2tpbiIsIlNLSU4iLCJnZXR0ZXJzIiwiZ2V0QWR1bHQiLCJnZXRBZHVsdFB3ZCIsInNraW5Nb2RlIiwic2tpbkNvbG9yIiwiU2tpbkNvbG9yIiwibXV0YXRpb25zIiwic2V0QWR1bHQiLCJib2wiLCJzZXRTdG9yYWdlU3luYyIsInNldEFkdWx0UHdkIiwicHdkIiwic2V0U2tpbiIsImFjdGlvbnMiLCJjaGFuZ2VTa2luIiwiY29tbWl0IiwiZ2V0QXBwIiwiZ2xvYmFsRGF0YSIsIiRidXNpbmVzcyIsInNldFNraW5Db2xvciIsIm5hbWVzcGFjZWQiXSwibWFwcGluZ3MiOiJ1RkFBQTtBQUNBLDJGOztBQUVBLElBQU1BLEtBQUssR0FBRztBQUNiQyxPQUFLLEVBQUVDLEdBQUcsQ0FBQ0MsY0FBSixDQUFtQkMsYUFBbkIsS0FBNkIsS0FEdkIsRUFDOEI7QUFDM0NDLFVBQVEsRUFBRUgsR0FBRyxDQUFDQyxjQUFKLENBQW1CRyxnQkFBbkIsS0FBZ0MsRUFGN0IsRUFFaUM7QUFDOUNDLE1BQUksRUFBRUwsR0FBRyxDQUFDQyxjQUFKLENBQW1CSyxZQUFuQixLQUE0QixTQUhyQixDQUcrQjtBQUgvQixDQUFkOztBQU1BLElBQU1DLE9BQU8sR0FBRztBQUNmQyxVQURlLG9CQUNMVixLQURLLEVBQ0U7QUFDaEIsV0FBT0EsS0FBSyxDQUFDQyxLQUFiO0FBQ0EsR0FIYztBQUlmVSxhQUplLHVCQUlGWCxLQUpFLEVBSUs7QUFDbkIsV0FBT0EsS0FBSyxDQUFDSyxRQUFiO0FBQ0EsR0FOYztBQU9mTyxVQVBlLG9CQU9MWixLQVBLLEVBT0U7QUFDaEIsV0FBT0EsS0FBSyxDQUFDTyxJQUFiO0FBQ0EsR0FUYztBQVVmTSxXQVZlLHFCQVVKYixLQVZJLEVBVUc7QUFDakIsV0FBT2MsZUFBVWQsS0FBSyxDQUFDTyxJQUFoQixDQUFQO0FBQ0EsR0FaYyxFQUFoQjs7O0FBZUEsSUFBTVEsU0FBUyxHQUFHO0FBQ2pCQyxVQURpQixvQkFDUGhCLEtBRE8sRUFDQWlCLEdBREEsRUFDSztBQUNyQmpCLFNBQUssQ0FBQ0MsS0FBTixHQUFjZ0IsR0FBZDtBQUNBZixPQUFHLENBQUNnQixjQUFKLENBQW1CZCxhQUFuQixFQUEwQmEsR0FBMUI7QUFDQSxHQUpnQjtBQUtqQkUsYUFMaUIsdUJBS0puQixLQUxJLEVBS0dvQixHQUxILEVBS1E7QUFDeEJwQixTQUFLLENBQUNLLFFBQU4sR0FBaUJlLEdBQWpCO0FBQ0FsQixPQUFHLENBQUNnQixjQUFKLENBQW1CWixnQkFBbkIsRUFBNkJjLEdBQTdCO0FBQ0EsR0FSZ0I7QUFTakI7QUFDQUMsU0FWaUIsbUJBVVJyQixLQVZRLEVBVURPLElBVkMsRUFVSztBQUNyQlAsU0FBSyxDQUFDTyxJQUFOLEdBQWFBLElBQWI7QUFDQUwsT0FBRyxDQUFDZ0IsY0FBSixDQUFtQlYsWUFBbkIsRUFBeUJELElBQXpCO0FBQ0EsR0FiZ0IsRUFBbEI7OztBQWdCQSxJQUFNZSxPQUFPLEdBQUc7QUFDZjtBQUNBQyxZQUZlLDRCQUVPaEIsSUFGUCxFQUVhLEtBQWZpQixNQUFlLFFBQWZBLE1BQWU7QUFDM0JBLFVBQU0sQ0FBQyxTQUFELEVBQVlqQixJQUFaLENBQU47QUFDQWtCLFVBQU0sR0FBR0MsVUFBVCxDQUFvQkMsU0FBcEIsQ0FBOEJDLFlBQTlCO0FBQ0EsR0FMYyxFQUFoQixDOzs7QUFRZTtBQUNYQyxZQUFVLEVBQUUsSUFERDtBQUVYN0IsT0FBSyxFQUFMQSxLQUZXO0FBR1hTLFNBQU8sRUFBUEEsT0FIVztBQUlYTSxXQUFTLEVBQVRBLFNBSlc7QUFLZE8sU0FBTyxFQUFQQSxPQUxjLEUiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBRFVMVCwgQURVTFRQV0QsIFNLSU4gfSBmcm9tICcuLi9jb25maWcuanMnXHJcbmltcG9ydCBTa2luQ29sb3IgZnJvbSAnQC9hc3NldHMvc2tpbi9pbmRleC5qcydcclxuXHJcbmNvbnN0IHN0YXRlID0ge1xyXG5cdGFkdWx0OiB1bmkuZ2V0U3RvcmFnZVN5bmMoQURVTFQpIHx8IGZhbHNlLCAvL+mdkuWjruW5tOaooeW8j1xyXG5cdGFkdWx0UHdkOiB1bmkuZ2V0U3RvcmFnZVN5bmMoQURVTFRQV0QpIHx8ICcnLCAvL+mdkuWjruW5tOaooeW8j+WvhueggVxyXG5cdHNraW46IHVuaS5nZXRTdG9yYWdlU3luYyhTS0lOKSB8fCAnZGVmYXVsdCcgLy/nmq7ogqRcclxufVxyXG5cclxuY29uc3QgZ2V0dGVycyA9IHtcclxuXHRnZXRBZHVsdCAoc3RhdGUpIHtcclxuXHRcdHJldHVybiBzdGF0ZS5hZHVsdFxyXG5cdH0sXHJcblx0Z2V0QWR1bHRQd2QgKHN0YXRlKSB7XHJcblx0XHRyZXR1cm4gc3RhdGUuYWR1bHRQd2RcclxuXHR9LFxyXG5cdHNraW5Nb2RlIChzdGF0ZSkge1xyXG5cdFx0cmV0dXJuIHN0YXRlLnNraW5cclxuXHR9LFxyXG5cdHNraW5Db2xvciAoc3RhdGUpIHtcclxuXHRcdHJldHVybiBTa2luQ29sb3Jbc3RhdGUuc2tpbl1cclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IG11dGF0aW9ucyA9IHtcclxuXHRzZXRBZHVsdCAoc3RhdGUsIGJvbCkge1xyXG5cdFx0c3RhdGUuYWR1bHQgPSBib2w7XHJcblx0XHR1bmkuc2V0U3RvcmFnZVN5bmMoQURVTFQsIGJvbClcclxuXHR9LFxyXG5cdHNldEFkdWx0UHdkIChzdGF0ZSwgcHdkKSB7XHJcblx0XHRzdGF0ZS5hZHVsdFB3ZCA9IHB3ZDtcclxuXHRcdHVuaS5zZXRTdG9yYWdlU3luYyhBRFVMVFBXRCwgcHdkKVxyXG5cdH0sXHJcblx0Ly/mlLnlj5jnmq7ogqTmqKHlvI9cclxuXHRzZXRTa2luIChzdGF0ZSwgc2tpbikge1xyXG5cdFx0c3RhdGUuc2tpbiA9IHNraW47XHJcblx0XHR1bmkuc2V0U3RvcmFnZVN5bmMoU0tJTiwgc2tpbilcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IGFjdGlvbnMgPSB7XHJcblx0Ly/mlLnlj5jnmq7ogqTmqKHlvI9cclxuXHRjaGFuZ2VTa2luICh7Y29tbWl0fSwgc2tpbikge1xyXG5cdFx0Y29tbWl0KCdzZXRTa2luJywgc2tpbilcclxuXHRcdGdldEFwcCgpLmdsb2JhbERhdGEuJGJ1c2luZXNzLnNldFNraW5Db2xvcigpXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lc3BhY2VkOiB0cnVlLFxyXG4gICAgc3RhdGUsXHJcbiAgICBnZXR0ZXJzLFxyXG4gICAgbXV0YXRpb25zLFxyXG5cdGFjdGlvbnNcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/*!****************************************************!*\
  !*** G:/my-project/uni-polymerize/store/config.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.LYRICSHOW = exports.PLAYMODE = exports.SOURCECLOSE = exports.COLLECTION = exports.SEARCHHISTORY = exports.FILECACHE = exports.ADULTPWD = exports.ADULT = exports.SKIN = void 0;var SKIN = 'UNI_READER_SKIN'; //皮肤\nexports.SKIN = SKIN;var ADULT = 'UNI_READER_ADULT'; //青壮年\nexports.ADULT = ADULT;var ADULTPWD = 'UNI_READER_ADULT_PWD'; //青壮年密码\nexports.ADULTPWD = ADULTPWD;var FILECACHE = 'UNI_READER_FILE_CACHE'; //文件缓存\nexports.FILECACHE = FILECACHE;var SEARCHHISTORY = 'UNI_READER_SEARCH_HISTORY'; //搜索历史\nexports.SEARCHHISTORY = SEARCHHISTORY;var COLLECTION = 'UNI_READER_COLLECTION'; //收藏列表\nexports.COLLECTION = COLLECTION;var SOURCECLOSE = 'UNI_READER_SOURCE_CLOSE'; //来源关闭\nexports.SOURCECLOSE = SOURCECLOSE;var PLAYMODE = 'UNI_READER_PLAY_MODE'; //音乐播放模式 <round | 顺序播放> <loop | 单曲循环> <random | 随机播放>\nexports.PLAYMODE = PLAYMODE;var LYRICSHOW = 'UNI_READER_LYRIC_SHOW'; //是否显示全局歌词\nexports.LYRICSHOW = LYRICSHOW;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvY29uZmlnLmpzIl0sIm5hbWVzIjpbIlNLSU4iLCJBRFVMVCIsIkFEVUxUUFdEIiwiRklMRUNBQ0hFIiwiU0VBUkNISElTVE9SWSIsIkNPTExFQ1RJT04iLCJTT1VSQ0VDTE9TRSIsIlBMQVlNT0RFIiwiTFlSSUNTSE9XIl0sIm1hcHBpbmdzIjoicVBBQU8sSUFBTUEsSUFBSSxHQUFHLGlCQUFiLEMsQ0FBOEI7b0JBQzlCLElBQU1DLEtBQUssR0FBRyxrQkFBZCxDLENBQWdDO3NCQUNoQyxJQUFNQyxRQUFRLEdBQUcsc0JBQWpCLEMsQ0FBdUM7NEJBQ3ZDLElBQU1DLFNBQVMsR0FBRyx1QkFBbEIsQyxDQUF5Qzs4QkFDekMsSUFBTUMsYUFBYSxHQUFHLDJCQUF0QixDLENBQWlEO3NDQUNqRCxJQUFNQyxVQUFVLEdBQUcsdUJBQW5CLEMsQ0FBMEM7Z0NBQzFDLElBQU1DLFdBQVcsR0FBRyx5QkFBcEIsQyxDQUE2QztrQ0FDN0MsSUFBTUMsUUFBUSxHQUFHLHNCQUFqQixDLENBQXVDOzRCQUN2QyxJQUFNQyxTQUFTLEdBQUcsdUJBQWxCLEMsQ0FBeUMiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgU0tJTiA9ICdVTklfUkVBREVSX1NLSU4nLy/nmq7ogqRcclxuZXhwb3J0IGNvbnN0IEFEVUxUID0gJ1VOSV9SRUFERVJfQURVTFQnLy/pnZLlo67lubRcclxuZXhwb3J0IGNvbnN0IEFEVUxUUFdEID0gJ1VOSV9SRUFERVJfQURVTFRfUFdEJy8v6Z2S5aOu5bm05a+G56CBXHJcbmV4cG9ydCBjb25zdCBGSUxFQ0FDSEUgPSAnVU5JX1JFQURFUl9GSUxFX0NBQ0hFJy8v5paH5Lu257yT5a2YXHJcbmV4cG9ydCBjb25zdCBTRUFSQ0hISVNUT1JZID0gJ1VOSV9SRUFERVJfU0VBUkNIX0hJU1RPUlknLy/mkJzntKLljoblj7JcclxuZXhwb3J0IGNvbnN0IENPTExFQ1RJT04gPSAnVU5JX1JFQURFUl9DT0xMRUNUSU9OJy8v5pS26JeP5YiX6KGoXHJcbmV4cG9ydCBjb25zdCBTT1VSQ0VDTE9TRSA9ICdVTklfUkVBREVSX1NPVVJDRV9DTE9TRScvL+adpea6kOWFs+mXrVxyXG5leHBvcnQgY29uc3QgUExBWU1PREUgPSAnVU5JX1JFQURFUl9QTEFZX01PREUnLy/pn7PkuZDmkq3mlL7mqKHlvI8gPHJvdW5kIHwg6aG65bqP5pKt5pS+PiA8bG9vcCB8IOWNleabsuW+queOrz4gPHJhbmRvbSB8IOmaj+acuuaSreaUvj5cclxuZXhwb3J0IGNvbnN0IExZUklDU0hPVyA9ICdVTklfUkVBREVSX0xZUklDX1NIT1cnLy/mmK/lkKbmmL7npLrlhajlsYDmrYzor40iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/*!*********************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/skin/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _skin = _interopRequireDefault(__webpack_require__(/*! ./default/skin.js */ 23));\nvar _skin2 = _interopRequireDefault(__webpack_require__(/*! ./night/skin.js */ 24));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n//常用颜色\nvar colors = {\n  color_green: '#21C088',\n  color_red: '#FF3B30',\n  color_red_2: '#d43c33',\n  color_blue: '#2ca2f9',\n  color_white: '#FAFAFA',\n  color_black: '#191919',\n  color_orange: '#ff962f' };\n\n\nObject.keys(colors).forEach(function (key) {\n  _skin.default[key] = colors[key],\n  _skin2.default[key] = colors[key];\n});var _default =\n\n{\n  'default': _skin.default,\n  'night': _skin2.default };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL3NraW4vaW5kZXguanMiXSwibmFtZXMiOlsiY29sb3JzIiwiY29sb3JfZ3JlZW4iLCJjb2xvcl9yZWQiLCJjb2xvcl9yZWRfMiIsImNvbG9yX2JsdWUiLCJjb2xvcl93aGl0ZSIsImNvbG9yX2JsYWNrIiwiY29sb3Jfb3JhbmdlIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJTa2luRGVmYXVsdCIsIlNraW5OaWdodCJdLCJtYXBwaW5ncyI6InVGQUFBO0FBQ0Esb0Y7O0FBRUE7QUFDQSxJQUFNQSxNQUFNLEdBQUc7QUFDZEMsYUFBVyxFQUFFLFNBREM7QUFFZEMsV0FBUyxFQUFFLFNBRkc7QUFHZEMsYUFBVyxFQUFFLFNBSEM7QUFJZEMsWUFBVSxFQUFFLFNBSkU7QUFLZEMsYUFBVyxFQUFFLFNBTEM7QUFNZEMsYUFBVyxFQUFFLFNBTkM7QUFPZEMsY0FBWSxFQUFFLFNBUEEsRUFBZjs7O0FBVUFDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVCxNQUFaLEVBQW9CVSxPQUFwQixDQUE0QixVQUFBQyxHQUFHLEVBQUk7QUFDbENDLGdCQUFZRCxHQUFaLElBQW1CWCxNQUFNLENBQUNXLEdBQUQsQ0FBekI7QUFDQUUsaUJBQVVGLEdBQVYsSUFBaUJYLE1BQU0sQ0FBQ1csR0FBRCxDQUR2QjtBQUVBLENBSEQsRTs7QUFLZTtBQUNkLGFBQVdDLGFBREc7QUFFZCxXQUFTQyxjQUZLLEUiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2tpbkRlZmF1bHQgZnJvbSBcIi4vZGVmYXVsdC9za2luLmpzXCJcclxuaW1wb3J0IFNraW5OaWdodCBmcm9tIFwiLi9uaWdodC9za2luLmpzXCJcclxuXHJcbi8v5bi455So6aKc6ImyXHJcbmNvbnN0IGNvbG9ycyA9IHtcclxuXHRjb2xvcl9ncmVlbjogJyMyMUMwODgnLFxyXG5cdGNvbG9yX3JlZDogJyNGRjNCMzAnLFxyXG5cdGNvbG9yX3JlZF8yOiAnI2Q0M2MzMycsXHJcblx0Y29sb3JfYmx1ZTogJyMyY2EyZjknLFxyXG5cdGNvbG9yX3doaXRlOiAnI0ZBRkFGQScsXHJcblx0Y29sb3JfYmxhY2s6ICcjMTkxOTE5JyxcclxuXHRjb2xvcl9vcmFuZ2U6ICcjZmY5NjJmJ1xyXG59XHJcblxyXG5PYmplY3Qua2V5cyhjb2xvcnMpLmZvckVhY2goa2V5ID0+IHtcclxuXHRTa2luRGVmYXVsdFtrZXldID0gY29sb3JzW2tleV0sXHJcblx0U2tpbk5pZ2h0W2tleV0gPSBjb2xvcnNba2V5XVxyXG59KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdCdkZWZhdWx0JzogU2tpbkRlZmF1bHQsXHJcblx0J25pZ2h0JzogU2tpbk5pZ2h0XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/*!****************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/skin/default/skin.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* 默认皮肤 */var _default =\n\n{\n  color_theme_1: '#2ca2f9',\n  color_theme_2: '#f2fbff',\n  color_bg_1: '#FFFFFF',\n  color_bg_2: '#fbfbfb',\n  color_actived_1: '#2ca2f9',\n  color_1: '#333',\n  color_2: '#666',\n  color_3: '#999',\n  color_4: '#fff',\n  color_5: '#737373',\n  color_gap_1: '#E0E0E0',\n  color_read_text: '#2E2B23',\n  color_read_bg: '#BFAD8A' };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL3NraW4vZGVmYXVsdC9za2luLmpzIl0sIm5hbWVzIjpbImNvbG9yX3RoZW1lXzEiLCJjb2xvcl90aGVtZV8yIiwiY29sb3JfYmdfMSIsImNvbG9yX2JnXzIiLCJjb2xvcl9hY3RpdmVkXzEiLCJjb2xvcl8xIiwiY29sb3JfMiIsImNvbG9yXzMiLCJjb2xvcl80IiwiY29sb3JfNSIsImNvbG9yX2dhcF8xIiwiY29sb3JfcmVhZF90ZXh0IiwiY29sb3JfcmVhZF9iZyJdLCJtYXBwaW5ncyI6IndGQUFBLFU7O0FBRWU7QUFDZEEsZUFBYSxFQUFFLFNBREQ7QUFFZEMsZUFBYSxFQUFFLFNBRkQ7QUFHZEMsWUFBVSxFQUFFLFNBSEU7QUFJZEMsWUFBVSxFQUFFLFNBSkU7QUFLZEMsaUJBQWUsRUFBRSxTQUxIO0FBTWRDLFNBQU8sRUFBRSxNQU5LO0FBT2RDLFNBQU8sRUFBRSxNQVBLO0FBUWRDLFNBQU8sRUFBRSxNQVJLO0FBU2RDLFNBQU8sRUFBRSxNQVRLO0FBVWRDLFNBQU8sRUFBRSxTQVZLO0FBV2RDLGFBQVcsRUFBRSxTQVhDO0FBWWRDLGlCQUFlLEVBQUUsU0FaSDtBQWFkQyxlQUFhLEVBQUUsU0FiRCxFIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyog6buY6K6k55qu6IKkICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0Y29sb3JfdGhlbWVfMTogJyMyY2EyZjknLFxyXG5cdGNvbG9yX3RoZW1lXzI6ICcjZjJmYmZmJyxcclxuXHRjb2xvcl9iZ18xOiAnI0ZGRkZGRicsXHJcblx0Y29sb3JfYmdfMjogJyNmYmZiZmInLFxyXG5cdGNvbG9yX2FjdGl2ZWRfMTogJyMyY2EyZjknLFxyXG5cdGNvbG9yXzE6ICcjMzMzJyxcclxuXHRjb2xvcl8yOiAnIzY2NicsXHJcblx0Y29sb3JfMzogJyM5OTknLFxyXG5cdGNvbG9yXzQ6ICcjZmZmJyxcclxuXHRjb2xvcl81OiAnIzczNzM3MycsXHJcblx0Y29sb3JfZ2FwXzE6ICcjRTBFMEUwJyxcclxuXHRjb2xvcl9yZWFkX3RleHQ6ICcjMkUyQjIzJyxcclxuXHRjb2xvcl9yZWFkX2JnOiAnI0JGQUQ4QSdcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/*!**************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/skin/night/skin.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* 夜间皮肤 */var _default =\n\n{\n  color_theme_1: '#3C3C3C',\n  color_theme_2: '#2C2C2C',\n  color_bg_1: '#131313',\n  color_bg_2: '#272822',\n  color_actived_1: '#FAFAFA',\n  color_1: '#f4f7f5',\n  color_2: '#8a8a8a',\n  color_3: '#888888',\n  color_4: '#777777',\n  color_5: '#737373',\n  color_gap_1: '#3F3F3F',\n  color_read_text: '#95A3A6',\n  color_read_bg: '#393E41' };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL3NraW4vbmlnaHQvc2tpbi5qcyJdLCJuYW1lcyI6WyJjb2xvcl90aGVtZV8xIiwiY29sb3JfdGhlbWVfMiIsImNvbG9yX2JnXzEiLCJjb2xvcl9iZ18yIiwiY29sb3JfYWN0aXZlZF8xIiwiY29sb3JfMSIsImNvbG9yXzIiLCJjb2xvcl8zIiwiY29sb3JfNCIsImNvbG9yXzUiLCJjb2xvcl9nYXBfMSIsImNvbG9yX3JlYWRfdGV4dCIsImNvbG9yX3JlYWRfYmciXSwibWFwcGluZ3MiOiJ3RkFBQSxVOztBQUVlO0FBQ2RBLGVBQWEsRUFBRSxTQUREO0FBRWRDLGVBQWEsRUFBRSxTQUZEO0FBR2RDLFlBQVUsRUFBRSxTQUhFO0FBSWRDLFlBQVUsRUFBRSxTQUpFO0FBS2RDLGlCQUFlLEVBQUUsU0FMSDtBQU1kQyxTQUFPLEVBQUUsU0FOSztBQU9kQyxTQUFPLEVBQUUsU0FQSztBQVFkQyxTQUFPLEVBQUUsU0FSSztBQVNkQyxTQUFPLEVBQUUsU0FUSztBQVVkQyxTQUFPLEVBQUUsU0FWSztBQVdkQyxhQUFXLEVBQUUsU0FYQztBQVlkQyxpQkFBZSxFQUFFLFNBWkg7QUFhZEMsZUFBYSxFQUFFLFNBYkQsRSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIOWknOmXtOearuiCpCAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdGNvbG9yX3RoZW1lXzE6ICcjM0MzQzNDJyxcclxuXHRjb2xvcl90aGVtZV8yOiAnIzJDMkMyQycsXHJcblx0Y29sb3JfYmdfMTogJyMxMzEzMTMnLFxyXG5cdGNvbG9yX2JnXzI6ICcjMjcyODIyJyxcclxuXHRjb2xvcl9hY3RpdmVkXzE6ICcjRkFGQUZBJyxcclxuXHRjb2xvcl8xOiAnI2Y0ZjdmNScsXHJcblx0Y29sb3JfMjogJyM4YThhOGEnLFxyXG5cdGNvbG9yXzM6ICcjODg4ODg4JyxcclxuXHRjb2xvcl80OiAnIzc3Nzc3NycsXHJcblx0Y29sb3JfNTogJyM3MzczNzMnLFxyXG5cdGNvbG9yX2dhcF8xOiAnIzNGM0YzRicsXHJcblx0Y29sb3JfcmVhZF90ZXh0OiAnIzk1QTNBNicsXHJcblx0Y29sb3JfcmVhZF9iZzogJyMzOTNFNDEnXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/*!************************************************************!*\
  !*** G:/my-project/uni-polymerize/store/modules/search.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\nvar _config = __webpack_require__(/*! ../config.js */ 21);function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}\n\n\nvar state = {\n  history: uni.getStorageSync(_config.SEARCHHISTORY) || [] //搜索历史\n};\n\nvar getters = {\n  getHistory: function getHistory(state) {\n    return state.history;\n  } };\n\n\nvar mutations = {\n  //设置搜索历史\n  setHistory: function setHistory(state, history) {\n    state.history = history;\n    uni.setStorageSync(_config.SEARCHHISTORY, state.history);\n  } };\n\n\n\nvar actions = {\n  //添加搜索历史\n  addHistory: function addHistory(_ref, history) {var state = _ref.state,commit = _ref.commit;\n    var histories = _toConsumableArray(state.history);\n    var index = histories.findIndex(function (his) {return his.title == history.title && history.type == his.type;});\n    index == -1 ? histories.push(history) : histories.splice(index, 1) && histories.push(history);\n    commit('setHistory', histories);\n  },\n  //移除指定搜索历史\n  removeHistory: function removeHistory(_ref2, history) {var state = _ref2.state,commit = _ref2.commit;\n    var histories = _toConsumableArray(state.history);\n    var index = histories.findIndex(function (his) {return his.title == history.title && history.type == his.type;});\n    index > -1 ? histories.splice(index, 1) : null;\n    commit('setHistory', histories);\n  },\n  //移除指定类型搜索历史\n  clearHistory: function clearHistory(_ref3, type) {var state = _ref3.state,commit = _ref3.commit;\n    var newHistory = state.history.filter(function (his) {return his.type != type;});\n    commit('setHistory', newHistory);\n  } };var _default =\n\n\n{\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvbW9kdWxlcy9zZWFyY2guanMiXSwibmFtZXMiOlsic3RhdGUiLCJoaXN0b3J5IiwidW5pIiwiZ2V0U3RvcmFnZVN5bmMiLCJTRUFSQ0hISVNUT1JZIiwiZ2V0dGVycyIsImdldEhpc3RvcnkiLCJtdXRhdGlvbnMiLCJzZXRIaXN0b3J5Iiwic2V0U3RvcmFnZVN5bmMiLCJhY3Rpb25zIiwiYWRkSGlzdG9yeSIsImNvbW1pdCIsImhpc3RvcmllcyIsImluZGV4IiwiZmluZEluZGV4IiwiaGlzIiwidGl0bGUiLCJ0eXBlIiwicHVzaCIsInNwbGljZSIsInJlbW92ZUhpc3RvcnkiLCJjbGVhckhpc3RvcnkiLCJuZXdIaXN0b3J5IiwiZmlsdGVyIiwibmFtZXNwYWNlZCJdLCJtYXBwaW5ncyI6Ijs7QUFFQSwwRDs7O0FBR0EsSUFBTUEsS0FBSyxHQUFHO0FBQ2JDLFNBQU8sRUFBRUMsR0FBRyxDQUFDQyxjQUFKLENBQW1CQyxxQkFBbkIsS0FBcUMsRUFEakMsQ0FDbUM7QUFEbkMsQ0FBZDs7QUFJQSxJQUFNQyxPQUFPLEdBQUc7QUFDZkMsWUFEZSxzQkFDSE4sS0FERyxFQUNJO0FBQ2xCLFdBQU9BLEtBQUssQ0FBQ0MsT0FBYjtBQUNBLEdBSGMsRUFBaEI7OztBQU1BLElBQU1NLFNBQVMsR0FBRztBQUNqQjtBQUNBQyxZQUZpQixzQkFFTFIsS0FGSyxFQUVFQyxPQUZGLEVBRVc7QUFDM0JELFNBQUssQ0FBQ0MsT0FBTixHQUFnQkEsT0FBaEI7QUFDQUMsT0FBRyxDQUFDTyxjQUFKLENBQW1CTCxxQkFBbkIsRUFBa0NKLEtBQUssQ0FBQ0MsT0FBeEM7QUFDQSxHQUxnQixFQUFsQjs7OztBQVNBLElBQU1TLE9BQU8sR0FBRztBQUNmO0FBQ0FDLFlBRmUsNEJBRWNWLE9BRmQsRUFFdUIsS0FBekJELEtBQXlCLFFBQXpCQSxLQUF5QixDQUFsQlksTUFBa0IsUUFBbEJBLE1BQWtCO0FBQ3JDLFFBQU1DLFNBQVMsc0JBQU9iLEtBQUssQ0FBQ0MsT0FBYixDQUFmO0FBQ0EsUUFBTWEsS0FBSyxHQUFHRCxTQUFTLENBQUNFLFNBQVYsQ0FBb0IsVUFBQUMsR0FBRyxVQUFJQSxHQUFHLENBQUNDLEtBQUosSUFBYWhCLE9BQU8sQ0FBQ2dCLEtBQXJCLElBQThCaEIsT0FBTyxDQUFDaUIsSUFBUixJQUFnQkYsR0FBRyxDQUFDRSxJQUF0RCxFQUF2QixDQUFkO0FBQ0FKLFNBQUssSUFBSSxDQUFDLENBQVYsR0FBY0QsU0FBUyxDQUFDTSxJQUFWLENBQWVsQixPQUFmLENBQWQsR0FBd0NZLFNBQVMsQ0FBQ08sTUFBVixDQUFpQk4sS0FBakIsRUFBd0IsQ0FBeEIsS0FBOEJELFNBQVMsQ0FBQ00sSUFBVixDQUFlbEIsT0FBZixDQUF0RTtBQUNBVyxVQUFNLENBQUMsWUFBRCxFQUFlQyxTQUFmLENBQU47QUFDQSxHQVBjO0FBUWY7QUFDQVEsZUFUZSxnQ0FTaUJwQixPQVRqQixFQVMwQixLQUF6QkQsS0FBeUIsU0FBekJBLEtBQXlCLENBQWxCWSxNQUFrQixTQUFsQkEsTUFBa0I7QUFDeEMsUUFBTUMsU0FBUyxzQkFBT2IsS0FBSyxDQUFDQyxPQUFiLENBQWY7QUFDQSxRQUFNYSxLQUFLLEdBQUdELFNBQVMsQ0FBQ0UsU0FBVixDQUFvQixVQUFBQyxHQUFHLFVBQUlBLEdBQUcsQ0FBQ0MsS0FBSixJQUFhaEIsT0FBTyxDQUFDZ0IsS0FBckIsSUFBOEJoQixPQUFPLENBQUNpQixJQUFSLElBQWdCRixHQUFHLENBQUNFLElBQXRELEVBQXZCLENBQWQ7QUFDQUosU0FBSyxHQUFHLENBQUMsQ0FBVCxHQUFhRCxTQUFTLENBQUNPLE1BQVYsQ0FBaUJOLEtBQWpCLEVBQXdCLENBQXhCLENBQWIsR0FBMEMsSUFBMUM7QUFDQUYsVUFBTSxDQUFDLFlBQUQsRUFBZUMsU0FBZixDQUFOO0FBQ0EsR0FkYztBQWVmO0FBQ0FTLGNBaEJlLCtCQWdCZ0JKLElBaEJoQixFQWdCc0IsS0FBdEJsQixLQUFzQixTQUF0QkEsS0FBc0IsQ0FBZlksTUFBZSxTQUFmQSxNQUFlO0FBQ3BDLFFBQU1XLFVBQVUsR0FBR3ZCLEtBQUssQ0FBQ0MsT0FBTixDQUFjdUIsTUFBZCxDQUFxQixVQUFBUixHQUFHLFVBQUlBLEdBQUcsQ0FBQ0UsSUFBSixJQUFZQSxJQUFoQixFQUF4QixDQUFuQjtBQUNBTixVQUFNLENBQUMsWUFBRCxFQUFlVyxVQUFmLENBQU47QUFDQSxHQW5CYyxFQUFoQixDOzs7QUFzQmU7QUFDWEUsWUFBVSxFQUFFLElBREQ7QUFFWHpCLE9BQUssRUFBTEEsS0FGVztBQUdYSyxTQUFPLEVBQVBBLE9BSFc7QUFJWEUsV0FBUyxFQUFUQSxTQUpXO0FBS2RHLFNBQU8sRUFBUEEsT0FMYyxFIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8g5pCc57Si5Y6G5Y+yXHJcblxyXG5pbXBvcnQge1xyXG5TRUFSQ0hISVNUT1JZIH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xyXG5cclxuY29uc3Qgc3RhdGUgPSB7XHJcblx0aGlzdG9yeTogdW5pLmdldFN0b3JhZ2VTeW5jKFNFQVJDSEhJU1RPUlkpIHx8IFtdLy/mkJzntKLljoblj7JcclxufVxyXG5cclxuY29uc3QgZ2V0dGVycyA9IHtcclxuXHRnZXRIaXN0b3J5IChzdGF0ZSkge1xyXG5cdFx0cmV0dXJuIHN0YXRlLmhpc3Rvcnk7XHJcblx0fVxyXG59XHJcblxyXG5jb25zdCBtdXRhdGlvbnMgPSB7XHJcblx0Ly/orr7nva7mkJzntKLljoblj7JcclxuXHRzZXRIaXN0b3J5IChzdGF0ZSwgaGlzdG9yeSkge1xyXG5cdFx0c3RhdGUuaGlzdG9yeSA9IGhpc3RvcnlcclxuXHRcdHVuaS5zZXRTdG9yYWdlU3luYyhTRUFSQ0hISVNUT1JZLCBzdGF0ZS5oaXN0b3J5KTtcclxuXHR9XHJcblx0XHJcbn1cclxuXHJcbmNvbnN0IGFjdGlvbnMgPSB7XHJcblx0Ly/mt7vliqDmkJzntKLljoblj7JcclxuXHRhZGRIaXN0b3J5ICh7c3RhdGUsIGNvbW1pdH0sIGhpc3RvcnkpIHtcclxuXHRcdGNvbnN0IGhpc3RvcmllcyA9IFsuLi5zdGF0ZS5oaXN0b3J5XVxyXG5cdFx0Y29uc3QgaW5kZXggPSBoaXN0b3JpZXMuZmluZEluZGV4KGhpcyA9PiBoaXMudGl0bGUgPT0gaGlzdG9yeS50aXRsZSAmJiBoaXN0b3J5LnR5cGUgPT0gaGlzLnR5cGUpXHJcblx0XHRpbmRleCA9PSAtMSA/IGhpc3Rvcmllcy5wdXNoKGhpc3RvcnkpIDogaGlzdG9yaWVzLnNwbGljZShpbmRleCwgMSkgJiYgaGlzdG9yaWVzLnB1c2goaGlzdG9yeSlcclxuXHRcdGNvbW1pdCgnc2V0SGlzdG9yeScsIGhpc3RvcmllcylcclxuXHR9LFxyXG5cdC8v56e76Zmk5oyH5a6a5pCc57Si5Y6G5Y+yXHJcblx0cmVtb3ZlSGlzdG9yeSAoe3N0YXRlLCBjb21taXR9LCBoaXN0b3J5KSB7XHJcblx0XHRjb25zdCBoaXN0b3JpZXMgPSBbLi4uc3RhdGUuaGlzdG9yeV1cclxuXHRcdGNvbnN0IGluZGV4ID0gaGlzdG9yaWVzLmZpbmRJbmRleChoaXMgPT4gaGlzLnRpdGxlID09IGhpc3RvcnkudGl0bGUgJiYgaGlzdG9yeS50eXBlID09IGhpcy50eXBlKVxyXG5cdFx0aW5kZXggPiAtMSA/IGhpc3Rvcmllcy5zcGxpY2UoaW5kZXgsIDEpIDogbnVsbFxyXG5cdFx0Y29tbWl0KCdzZXRIaXN0b3J5JywgaGlzdG9yaWVzKVxyXG5cdH0sXHJcblx0Ly/np7vpmaTmjIflrprnsbvlnovmkJzntKLljoblj7JcclxuXHRjbGVhckhpc3RvcnkgKHtzdGF0ZSwgY29tbWl0fSwgdHlwZSkge1xyXG5cdFx0Y29uc3QgbmV3SGlzdG9yeSA9IHN0YXRlLmhpc3RvcnkuZmlsdGVyKGhpcyA9PiBoaXMudHlwZSAhPSB0eXBlKVxyXG5cdFx0Y29tbWl0KCdzZXRIaXN0b3J5JywgbmV3SGlzdG9yeSlcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWVzcGFjZWQ6IHRydWUsXHJcbiAgICBzdGF0ZSxcclxuICAgIGdldHRlcnMsXHJcbiAgICBtdXRhdGlvbnMsXHJcblx0YWN0aW9uc1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/*!***********************************************************!*\
  !*** G:/my-project/uni-polymerize/store/modules/cache.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = __webpack_require__(/*! ../config.js */ 21);\nvar _cache = _interopRequireDefault(__webpack_require__(/*! @/assets/constructor/cache.js */ 27));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}\n\nvar state = {\n  cache: uni.getStorageSync(_config.FILECACHE) || [] //图片临时文件存放\n};\n\nvar getters = {\n  getCache: function getCache(state) {\n    return state.cache;\n  } };\n\n\nvar mutations = {\n  setCache: function setCache(state, cache) {\n    state.cache = cache;\n    uni.setStorageSync(_config.FILECACHE, state.cache);\n  } };\n\n\nvar actions = {\n  addCache: function addCache(_ref, obj) {var state = _ref.state,commit = _ref.commit;\n    var caches = _toConsumableArray(state.cache);\n    var newCache = new _cache.default(obj);\n    var index = caches.findIndex(function (cache) {return cache.id == newCache.id;});\n    index > -1 ? caches[index] = newCache : caches.push(newCache);\n    commit('setCache', caches);\n  },\n  removeCache: function removeCache(_ref2, id) {var state = _ref2.state,commit = _ref2.commit;\n    var caches = _toConsumableArray(state.cache);\n    var index = caches.findIndex(function (cache) {return cache.parentId == id;});\n    if (index > -1) {\n      var src = plus.io.convertLocalFileSystemURL(caches[index].src);\n      var file = plus.android.newObject('java.io.File', src);\n      if (plus.android.invoke(file, 'exists')) {\n        plus.android.invoke(file, 'delete');\n      }\n      caches.splice(index, 1);\n    }\n    commit('setCache', caches);\n  },\n  clearCache: function clearCache(_ref3) {var commit = _ref3.commit;\n    commit('setCache', []);\n  } };var _default =\n\n\n{\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvbW9kdWxlcy9jYWNoZS5qcyJdLCJuYW1lcyI6WyJzdGF0ZSIsImNhY2hlIiwidW5pIiwiZ2V0U3RvcmFnZVN5bmMiLCJGSUxFQ0FDSEUiLCJnZXR0ZXJzIiwiZ2V0Q2FjaGUiLCJtdXRhdGlvbnMiLCJzZXRDYWNoZSIsInNldFN0b3JhZ2VTeW5jIiwiYWN0aW9ucyIsImFkZENhY2hlIiwib2JqIiwiY29tbWl0IiwiY2FjaGVzIiwibmV3Q2FjaGUiLCJDYWNoZSIsImluZGV4IiwiZmluZEluZGV4IiwiaWQiLCJwdXNoIiwicmVtb3ZlQ2FjaGUiLCJwYXJlbnRJZCIsInNyYyIsInBsdXMiLCJpbyIsImNvbnZlcnRMb2NhbEZpbGVTeXN0ZW1VUkwiLCJmaWxlIiwiYW5kcm9pZCIsIm5ld09iamVjdCIsImludm9rZSIsInNwbGljZSIsImNsZWFyQ2FjaGUiLCJuYW1lc3BhY2VkIl0sIm1hcHBpbmdzIjoidUZBQUE7QUFDQSxrRzs7QUFFQSxJQUFNQSxLQUFLLEdBQUc7QUFDYkMsT0FBSyxFQUFFQyxHQUFHLENBQUNDLGNBQUosQ0FBbUJDLGlCQUFuQixLQUFpQyxFQUQzQixDQUM4QjtBQUQ5QixDQUFkOztBQUlBLElBQU1DLE9BQU8sR0FBRztBQUNmQyxVQURlLG9CQUNMTixLQURLLEVBQ0U7QUFDaEIsV0FBT0EsS0FBSyxDQUFDQyxLQUFiO0FBQ0EsR0FIYyxFQUFoQjs7O0FBTUEsSUFBTU0sU0FBUyxHQUFHO0FBQ2pCQyxVQURpQixvQkFDUFIsS0FETyxFQUNBQyxLQURBLEVBQ087QUFDdkJELFNBQUssQ0FBQ0MsS0FBTixHQUFjQSxLQUFkO0FBQ0FDLE9BQUcsQ0FBQ08sY0FBSixDQUFtQkwsaUJBQW5CLEVBQThCSixLQUFLLENBQUNDLEtBQXBDO0FBQ0EsR0FKZ0IsRUFBbEI7OztBQU9BLElBQU1TLE9BQU8sR0FBRztBQUNmQyxVQURlLDBCQUNZQyxHQURaLEVBQ2lCLEtBQXJCWixLQUFxQixRQUFyQkEsS0FBcUIsQ0FBZGEsTUFBYyxRQUFkQSxNQUFjO0FBQy9CLFFBQU1DLE1BQU0sc0JBQU9kLEtBQUssQ0FBQ0MsS0FBYixDQUFaO0FBQ0EsUUFBTWMsUUFBUSxHQUFHLElBQUlDLGNBQUosQ0FBVUosR0FBVixDQUFqQjtBQUNBLFFBQU1LLEtBQUssR0FBR0gsTUFBTSxDQUFDSSxTQUFQLENBQWlCLFVBQUFqQixLQUFLLFVBQUlBLEtBQUssQ0FBQ2tCLEVBQU4sSUFBWUosUUFBUSxDQUFDSSxFQUF6QixFQUF0QixDQUFkO0FBQ0FGLFNBQUssR0FBRyxDQUFDLENBQVQsR0FBYUgsTUFBTSxDQUFDRyxLQUFELENBQU4sR0FBZ0JGLFFBQTdCLEdBQXdDRCxNQUFNLENBQUNNLElBQVAsQ0FBWUwsUUFBWixDQUF4QztBQUNBRixVQUFNLENBQUMsVUFBRCxFQUFhQyxNQUFiLENBQU47QUFDQSxHQVBjO0FBUWZPLGFBUmUsOEJBUWVGLEVBUmYsRUFRbUIsS0FBcEJuQixLQUFvQixTQUFwQkEsS0FBb0IsQ0FBYmEsTUFBYSxTQUFiQSxNQUFhO0FBQ2pDLFFBQU1DLE1BQU0sc0JBQU9kLEtBQUssQ0FBQ0MsS0FBYixDQUFaO0FBQ0EsUUFBTWdCLEtBQUssR0FBR0gsTUFBTSxDQUFDSSxTQUFQLENBQWlCLFVBQUFqQixLQUFLLFVBQUlBLEtBQUssQ0FBQ3FCLFFBQU4sSUFBa0JILEVBQXRCLEVBQXRCLENBQWQ7QUFDQSxRQUFLRixLQUFLLEdBQUcsQ0FBQyxDQUFkLEVBQWtCO0FBQ2pCLFVBQU1NLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxFQUFMLENBQVFDLHlCQUFSLENBQWtDWixNQUFNLENBQUNHLEtBQUQsQ0FBTixDQUFjTSxHQUFoRCxDQUFaO0FBQ0EsVUFBTUksSUFBSSxHQUFHSCxJQUFJLENBQUNJLE9BQUwsQ0FBYUMsU0FBYixDQUF1QixjQUF2QixFQUF1Q04sR0FBdkMsQ0FBYjtBQUNBLFVBQUtDLElBQUksQ0FBQ0ksT0FBTCxDQUFhRSxNQUFiLENBQW9CSCxJQUFwQixFQUEwQixRQUExQixDQUFMLEVBQTJDO0FBQzFDSCxZQUFJLENBQUNJLE9BQUwsQ0FBYUUsTUFBYixDQUFvQkgsSUFBcEIsRUFBMEIsUUFBMUI7QUFDQTtBQUNEYixZQUFNLENBQUNpQixNQUFQLENBQWNkLEtBQWQsRUFBcUIsQ0FBckI7QUFDQTtBQUNESixVQUFNLENBQUMsVUFBRCxFQUFhQyxNQUFiLENBQU47QUFDQSxHQXBCYztBQXFCZmtCLFlBckJlLDZCQXFCTyxLQUFUbkIsTUFBUyxTQUFUQSxNQUFTO0FBQ3JCQSxVQUFNLENBQUMsVUFBRCxFQUFhLEVBQWIsQ0FBTjtBQUNBLEdBdkJjLEVBQWhCLEM7OztBQTBCZTtBQUNYb0IsWUFBVSxFQUFFLElBREQ7QUFFWGpDLE9BQUssRUFBTEEsS0FGVztBQUdYSyxTQUFPLEVBQVBBLE9BSFc7QUFJWEUsV0FBUyxFQUFUQSxTQUpXO0FBS2RHLFNBQU8sRUFBUEEsT0FMYyxFIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRklMRUNBQ0hFIH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xyXG5pbXBvcnQgQ2FjaGUgZnJvbSAnQC9hc3NldHMvY29uc3RydWN0b3IvY2FjaGUuanMnXHJcblxyXG5jb25zdCBzdGF0ZSA9IHtcclxuXHRjYWNoZTogdW5pLmdldFN0b3JhZ2VTeW5jKEZJTEVDQUNIRSkgfHwgW10gLy/lm77niYfkuLTml7bmlofku7blrZjmlL5cclxufVxyXG5cclxuY29uc3QgZ2V0dGVycyA9IHtcclxuXHRnZXRDYWNoZSAoc3RhdGUpIHtcclxuXHRcdHJldHVybiBzdGF0ZS5jYWNoZVxyXG5cdH1cclxufVxyXG5cclxuY29uc3QgbXV0YXRpb25zID0ge1xyXG5cdHNldENhY2hlIChzdGF0ZSwgY2FjaGUpIHtcclxuXHRcdHN0YXRlLmNhY2hlID0gY2FjaGVcclxuXHRcdHVuaS5zZXRTdG9yYWdlU3luYyhGSUxFQ0FDSEUsIHN0YXRlLmNhY2hlKVxyXG5cdH1cclxufVxyXG5cclxuY29uc3QgYWN0aW9ucyA9IHtcclxuXHRhZGRDYWNoZSAoe3N0YXRlLCBjb21taXR9LCBvYmopIHtcclxuXHRcdGNvbnN0IGNhY2hlcyA9IFsuLi5zdGF0ZS5jYWNoZV1cclxuXHRcdGNvbnN0IG5ld0NhY2hlID0gbmV3IENhY2hlKG9iailcclxuXHRcdGNvbnN0IGluZGV4ID0gY2FjaGVzLmZpbmRJbmRleChjYWNoZSA9PiBjYWNoZS5pZCA9PSBuZXdDYWNoZS5pZClcclxuXHRcdGluZGV4ID4gLTEgPyBjYWNoZXNbaW5kZXhdID0gbmV3Q2FjaGUgOiBjYWNoZXMucHVzaChuZXdDYWNoZSlcclxuXHRcdGNvbW1pdCgnc2V0Q2FjaGUnLCBjYWNoZXMpXHJcblx0fSxcclxuXHRyZW1vdmVDYWNoZSAoe3N0YXRlLCBjb21taXR9LCBpZCkge1xyXG5cdFx0Y29uc3QgY2FjaGVzID0gWy4uLnN0YXRlLmNhY2hlXVxyXG5cdFx0Y29uc3QgaW5kZXggPSBjYWNoZXMuZmluZEluZGV4KGNhY2hlID0+IGNhY2hlLnBhcmVudElkID09IGlkKVxyXG5cdFx0aWYgKCBpbmRleCA+IC0xICkge1xyXG5cdFx0XHRjb25zdCBzcmMgPSBwbHVzLmlvLmNvbnZlcnRMb2NhbEZpbGVTeXN0ZW1VUkwoY2FjaGVzW2luZGV4XS5zcmMpO1xyXG5cdFx0XHRjb25zdCBmaWxlID0gcGx1cy5hbmRyb2lkLm5ld09iamVjdCgnamF2YS5pby5GaWxlJywgc3JjKTtcclxuXHRcdFx0aWYgKCBwbHVzLmFuZHJvaWQuaW52b2tlKGZpbGUsICdleGlzdHMnKSApIHtcclxuXHRcdFx0XHRwbHVzLmFuZHJvaWQuaW52b2tlKGZpbGUsICdkZWxldGUnKVxyXG5cdFx0XHR9XHJcblx0XHRcdGNhY2hlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0fVxyXG5cdFx0Y29tbWl0KCdzZXRDYWNoZScsIGNhY2hlcylcclxuXHR9LFxyXG5cdGNsZWFyQ2FjaGUgKHtjb21taXR9KSB7XHJcblx0XHRjb21taXQoJ3NldENhY2hlJywgW10pXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBuYW1lc3BhY2VkOiB0cnVlLFxyXG4gICAgc3RhdGUsXHJcbiAgICBnZXR0ZXJzLFxyXG4gICAgbXV0YXRpb25zLFxyXG5cdGFjdGlvbnNcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/*!****************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/constructor/cache.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}var Cache =\nfunction Cache(_ref) {var id = _ref.id,title = _ref.title,src = _ref.src,type = _ref.type,source = _ref.source;_classCallCheck(this, Cache);\n  this.id = id + '_cache';\n  this.parentId = id; //父id\n  this.title = title || ''; //文件名称\n  this.src = src; //文件路径\n  this.type = type || ''; //文件类型\n  this.source = source || ''; //来源\n};exports.default = Cache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2NvbnN0cnVjdG9yL2NhY2hlLmpzIl0sIm5hbWVzIjpbIkNhY2hlIiwiaWQiLCJ0aXRsZSIsInNyYyIsInR5cGUiLCJzb3VyY2UiLCJwYXJlbnRJZCJdLCJtYXBwaW5ncyI6ImdQQUFxQkEsSztBQUNwQixxQkFBNEMsS0FBL0JDLEVBQStCLFFBQS9CQSxFQUErQixDQUEzQkMsS0FBMkIsUUFBM0JBLEtBQTJCLENBQXBCQyxHQUFvQixRQUFwQkEsR0FBb0IsQ0FBZkMsSUFBZSxRQUFmQSxJQUFlLENBQVRDLE1BQVMsUUFBVEEsTUFBUztBQUMxQyxPQUFLSixFQUFMLEdBQVVBLEVBQUUsR0FBRyxRQUFmO0FBQ0EsT0FBS0ssUUFBTCxHQUFnQkwsRUFBaEIsQ0FGMEMsQ0FFeEI7QUFDbEIsT0FBS0MsS0FBTCxHQUFhQSxLQUFLLElBQUksRUFBdEIsQ0FIMEMsQ0FHbEI7QUFDeEIsT0FBS0MsR0FBTCxHQUFXQSxHQUFYLENBSjBDLENBSTVCO0FBQ2QsT0FBS0MsSUFBTCxHQUFZQSxJQUFJLElBQUksRUFBcEIsQ0FMMEMsQ0FLcEI7QUFDdEIsT0FBS0MsTUFBTCxHQUFjQSxNQUFNLElBQUksRUFBeEIsQ0FOMEMsQ0FNaEI7QUFDM0IsQyIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhY2hlIHtcclxuXHRjb25zdHJ1Y3Rvcih7aWQsIHRpdGxlLCBzcmMsIHR5cGUsIHNvdXJjZX0pIHtcclxuXHQgIHRoaXMuaWQgPSBpZCArICdfY2FjaGUnXHJcblx0ICB0aGlzLnBhcmVudElkID0gaWQvL+eItmlkXHJcblx0ICB0aGlzLnRpdGxlID0gdGl0bGUgfHwgJycvL+aWh+S7tuWQjeensFxyXG5cdCAgdGhpcy5zcmMgPSBzcmMvL+aWh+S7tui3r+W+hFxyXG5cdCAgdGhpcy50eXBlID0gdHlwZSB8fCAnJy8v5paH5Lu257G75Z6LXHJcblx0ICB0aGlzLnNvdXJjZSA9IHNvdXJjZSB8fCAnJy8v5p2l5rqQXHJcblx0fVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/*!************************************************************!*\
  !*** G:/my-project/uni-polymerize/store/modules/source.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = __webpack_require__(/*! ../config.js */ 21);function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}\n\nvar state = {\n  close: uni.getStorageSync(_config.SOURCECLOSE) || [] //已关闭的网站来源\n};\n\nvar getters = {\n  getClose: function getClose(state) {\n    return state.close;\n  } };\n\n\nvar mutations = {\n  setClose: function setClose(state, close) {\n    state.close = close;\n    uni.setStorageSync(_config.SOURCECLOSE, state.close);\n  } };\n\n\nvar actions = {\n  addClose: function addClose(_ref, source) {var state = _ref.state,commit = _ref.commit;\n    var closes = _toConsumableArray(state.close);\n    var index = closes.findIndex(function (close) {return close == source;});\n    index > -1 ? closes[index] = source : closes.push(source);\n    commit('setClose', closes);\n  },\n  removeClose: function removeClose(_ref2, source) {var state = _ref2.state,commit = _ref2.commit;\n    var closes = _toConsumableArray(state.close);\n    var index = closes.findIndex(function (close) {return close == source;});\n    if (index > -1) closes.splice(index, 1);\n    commit('setClose', closes);\n  },\n  clearClose: function clearClose(_ref3) {var commit = _ref3.commit;\n    commit('setClose', []);\n  } };var _default =\n\n\n{\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvbW9kdWxlcy9zb3VyY2UuanMiXSwibmFtZXMiOlsic3RhdGUiLCJjbG9zZSIsInVuaSIsImdldFN0b3JhZ2VTeW5jIiwiU09VUkNFQ0xPU0UiLCJnZXR0ZXJzIiwiZ2V0Q2xvc2UiLCJtdXRhdGlvbnMiLCJzZXRDbG9zZSIsInNldFN0b3JhZ2VTeW5jIiwiYWN0aW9ucyIsImFkZENsb3NlIiwic291cmNlIiwiY29tbWl0IiwiY2xvc2VzIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJwdXNoIiwicmVtb3ZlQ2xvc2UiLCJzcGxpY2UiLCJjbGVhckNsb3NlIiwibmFtZXNwYWNlZCJdLCJtYXBwaW5ncyI6InVGQUFBLDBEOztBQUVBLElBQU1BLEtBQUssR0FBRztBQUNiQyxPQUFLLEVBQUVDLEdBQUcsQ0FBQ0MsY0FBSixDQUFtQkMsbUJBQW5CLEtBQW1DLEVBRDdCLENBQ2dDO0FBRGhDLENBQWQ7O0FBSUEsSUFBTUMsT0FBTyxHQUFHO0FBQ2ZDLFVBRGUsb0JBQ0xOLEtBREssRUFDRTtBQUNoQixXQUFPQSxLQUFLLENBQUNDLEtBQWI7QUFDQSxHQUhjLEVBQWhCOzs7QUFNQSxJQUFNTSxTQUFTLEdBQUc7QUFDakJDLFVBRGlCLG9CQUNQUixLQURPLEVBQ0FDLEtBREEsRUFDTztBQUN2QkQsU0FBSyxDQUFDQyxLQUFOLEdBQWNBLEtBQWQ7QUFDQUMsT0FBRyxDQUFDTyxjQUFKLENBQW1CTCxtQkFBbkIsRUFBZ0NKLEtBQUssQ0FBQ0MsS0FBdEM7QUFDQSxHQUpnQixFQUFsQjs7O0FBT0EsSUFBTVMsT0FBTyxHQUFHO0FBQ2ZDLFVBRGUsMEJBQ1lDLE1BRFosRUFDb0IsS0FBeEJaLEtBQXdCLFFBQXhCQSxLQUF3QixDQUFqQmEsTUFBaUIsUUFBakJBLE1BQWlCO0FBQ2xDLFFBQU1DLE1BQU0sc0JBQU9kLEtBQUssQ0FBQ0MsS0FBYixDQUFaO0FBQ0EsUUFBTWMsS0FBSyxHQUFHRCxNQUFNLENBQUNFLFNBQVAsQ0FBaUIsVUFBQWYsS0FBSyxVQUFJQSxLQUFLLElBQUlXLE1BQWIsRUFBdEIsQ0FBZDtBQUNBRyxTQUFLLEdBQUcsQ0FBQyxDQUFULEdBQWFELE1BQU0sQ0FBQ0MsS0FBRCxDQUFOLEdBQWdCSCxNQUE3QixHQUFzQ0UsTUFBTSxDQUFDRyxJQUFQLENBQVlMLE1BQVosQ0FBdEM7QUFDQUMsVUFBTSxDQUFDLFVBQUQsRUFBYUMsTUFBYixDQUFOO0FBQ0EsR0FOYztBQU9mSSxhQVBlLDhCQU9lTixNQVBmLEVBT3VCLEtBQXhCWixLQUF3QixTQUF4QkEsS0FBd0IsQ0FBakJhLE1BQWlCLFNBQWpCQSxNQUFpQjtBQUNyQyxRQUFNQyxNQUFNLHNCQUFPZCxLQUFLLENBQUNDLEtBQWIsQ0FBWjtBQUNBLFFBQU1jLEtBQUssR0FBR0QsTUFBTSxDQUFDRSxTQUFQLENBQWlCLFVBQUFmLEtBQUssVUFBSUEsS0FBSyxJQUFJVyxNQUFiLEVBQXRCLENBQWQ7QUFDQSxRQUFLRyxLQUFLLEdBQUcsQ0FBQyxDQUFkLEVBQWtCRCxNQUFNLENBQUNLLE1BQVAsQ0FBY0osS0FBZCxFQUFxQixDQUFyQjtBQUNsQkYsVUFBTSxDQUFDLFVBQUQsRUFBYUMsTUFBYixDQUFOO0FBQ0EsR0FaYztBQWFmTSxZQWJlLDZCQWFPLEtBQVRQLE1BQVMsU0FBVEEsTUFBUztBQUNyQkEsVUFBTSxDQUFDLFVBQUQsRUFBYSxFQUFiLENBQU47QUFDQSxHQWZjLEVBQWhCLEM7OztBQWtCZTtBQUNYUSxZQUFVLEVBQUUsSUFERDtBQUVYckIsT0FBSyxFQUFMQSxLQUZXO0FBR1hLLFNBQU8sRUFBUEEsT0FIVztBQUlYRSxXQUFTLEVBQVRBLFNBSlc7QUFLZEcsU0FBTyxFQUFQQSxPQUxjLEUiLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTT1VSQ0VDTE9TRSB9IGZyb20gJy4uL2NvbmZpZy5qcydcclxuXHJcbmNvbnN0IHN0YXRlID0ge1xyXG5cdGNsb3NlOiB1bmkuZ2V0U3RvcmFnZVN5bmMoU09VUkNFQ0xPU0UpIHx8IFtdIC8v5bey5YWz6Zet55qE572R56uZ5p2l5rqQXHJcbn1cclxuXHJcbmNvbnN0IGdldHRlcnMgPSB7XHJcblx0Z2V0Q2xvc2UgKHN0YXRlKSB7XHJcblx0XHRyZXR1cm4gc3RhdGUuY2xvc2VcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IG11dGF0aW9ucyA9IHtcclxuXHRzZXRDbG9zZSAoc3RhdGUsIGNsb3NlKSB7XHJcblx0XHRzdGF0ZS5jbG9zZSA9IGNsb3NlXHJcblx0XHR1bmkuc2V0U3RvcmFnZVN5bmMoU09VUkNFQ0xPU0UsIHN0YXRlLmNsb3NlKVxyXG5cdH1cclxufVxyXG5cclxuY29uc3QgYWN0aW9ucyA9IHtcclxuXHRhZGRDbG9zZSAoe3N0YXRlLCBjb21taXR9LCBzb3VyY2UpIHtcclxuXHRcdGNvbnN0IGNsb3NlcyA9IFsuLi5zdGF0ZS5jbG9zZV1cclxuXHRcdGNvbnN0IGluZGV4ID0gY2xvc2VzLmZpbmRJbmRleChjbG9zZSA9PiBjbG9zZSA9PSBzb3VyY2UpXHJcblx0XHRpbmRleCA+IC0xID8gY2xvc2VzW2luZGV4XSA9IHNvdXJjZSA6IGNsb3Nlcy5wdXNoKHNvdXJjZSlcclxuXHRcdGNvbW1pdCgnc2V0Q2xvc2UnLCBjbG9zZXMpXHJcblx0fSxcclxuXHRyZW1vdmVDbG9zZSAoe3N0YXRlLCBjb21taXR9LCBzb3VyY2UpIHtcclxuXHRcdGNvbnN0IGNsb3NlcyA9IFsuLi5zdGF0ZS5jbG9zZV1cclxuXHRcdGNvbnN0IGluZGV4ID0gY2xvc2VzLmZpbmRJbmRleChjbG9zZSA9PiBjbG9zZSA9PSBzb3VyY2UpXHJcblx0XHRpZiAoIGluZGV4ID4gLTEgKSBjbG9zZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdGNvbW1pdCgnc2V0Q2xvc2UnLCBjbG9zZXMpXHJcblx0fSxcclxuXHRjbGVhckNsb3NlICh7Y29tbWl0fSkge1xyXG5cdFx0Y29tbWl0KCdzZXRDbG9zZScsIFtdKVxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZXNwYWNlZDogdHJ1ZSxcclxuICAgIHN0YXRlLFxyXG4gICAgZ2V0dGVycyxcclxuICAgIG11dGF0aW9ucyxcclxuXHRhY3Rpb25zXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/*!****************************************************************!*\
  !*** G:/my-project/uni-polymerize/store/modules/collection.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = __webpack_require__(/*! ../config.js */ 21);function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}\n\nvar state = {\n  collection: uni.getStorageSync(_config.COLLECTION) || [] //图片临时文件存放\n};\n\nvar getters = {\n  getCollection: function getCollection(state) {\n    return state.collection;\n  } };\n\n\nvar mutations = {\n  setCollection: function setCollection(state, collection) {\n    state.collection = collection;\n    uni.setStorageSync(_config.COLLECTION, state.collection);\n  } };\n\n\nvar actions = {\n  addCollection: function addCollection(_ref, obj) {var state = _ref.state,commit = _ref.commit;\n    var list = _toConsumableArray(state.collection);\n    var index = list.findIndex(function (item) {return item.id == obj.id;});\n    index > -1 ? list[index] = obj : list.push(obj);\n    commit('setCollection', list);\n  },\n  removeCollection: function removeCollection(_ref2, id) {var state = _ref2.state,commit = _ref2.commit;\n    var list = _toConsumableArray(state.collection);\n    var index = list.findIndex(function (item) {return item.id == id;});\n    if (index > -1) list.splice(index, 1);\n    commit('setCollection', list);\n  },\n  clearCollection: function clearCollection(_ref3, type) {var state = _ref3.state,commit = _ref3.commit;\n    var list = state.collection.filter(function (item) {return item.type != type;});\n    commit('setCollection', list);\n  } };var _default =\n\n\n{\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvbW9kdWxlcy9jb2xsZWN0aW9uLmpzIl0sIm5hbWVzIjpbInN0YXRlIiwiY29sbGVjdGlvbiIsInVuaSIsImdldFN0b3JhZ2VTeW5jIiwiQ09MTEVDVElPTiIsImdldHRlcnMiLCJnZXRDb2xsZWN0aW9uIiwibXV0YXRpb25zIiwic2V0Q29sbGVjdGlvbiIsInNldFN0b3JhZ2VTeW5jIiwiYWN0aW9ucyIsImFkZENvbGxlY3Rpb24iLCJvYmoiLCJjb21taXQiLCJsaXN0IiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJpdGVtIiwiaWQiLCJwdXNoIiwicmVtb3ZlQ29sbGVjdGlvbiIsInNwbGljZSIsImNsZWFyQ29sbGVjdGlvbiIsInR5cGUiLCJmaWx0ZXIiLCJuYW1lc3BhY2VkIl0sIm1hcHBpbmdzIjoidUZBQUEsMEQ7O0FBRUEsSUFBTUEsS0FBSyxHQUFHO0FBQ2JDLFlBQVUsRUFBRUMsR0FBRyxDQUFDQyxjQUFKLENBQW1CQyxrQkFBbkIsS0FBa0MsRUFEakMsQ0FDb0M7QUFEcEMsQ0FBZDs7QUFJQSxJQUFNQyxPQUFPLEdBQUc7QUFDZkMsZUFEZSx5QkFDQU4sS0FEQSxFQUNPO0FBQ3JCLFdBQU9BLEtBQUssQ0FBQ0MsVUFBYjtBQUNBLEdBSGMsRUFBaEI7OztBQU1BLElBQU1NLFNBQVMsR0FBRztBQUNqQkMsZUFEaUIseUJBQ0ZSLEtBREUsRUFDS0MsVUFETCxFQUNpQjtBQUNqQ0QsU0FBSyxDQUFDQyxVQUFOLEdBQW1CQSxVQUFuQjtBQUNBQyxPQUFHLENBQUNPLGNBQUosQ0FBbUJMLGtCQUFuQixFQUErQkosS0FBSyxDQUFDQyxVQUFyQztBQUNBLEdBSmdCLEVBQWxCOzs7QUFPQSxJQUFNUyxPQUFPLEdBQUc7QUFDZkMsZUFEZSwrQkFDaUJDLEdBRGpCLEVBQ3NCLEtBQXJCWixLQUFxQixRQUFyQkEsS0FBcUIsQ0FBZGEsTUFBYyxRQUFkQSxNQUFjO0FBQ3BDLFFBQU1DLElBQUksc0JBQU9kLEtBQUssQ0FBQ0MsVUFBYixDQUFWO0FBQ0EsUUFBTWMsS0FBSyxHQUFHRCxJQUFJLENBQUNFLFNBQUwsQ0FBZSxVQUFBQyxJQUFJLFVBQUlBLElBQUksQ0FBQ0MsRUFBTCxJQUFXTixHQUFHLENBQUNNLEVBQW5CLEVBQW5CLENBQWQ7QUFDQUgsU0FBSyxHQUFHLENBQUMsQ0FBVCxHQUFhRCxJQUFJLENBQUNDLEtBQUQsQ0FBSixHQUFjSCxHQUEzQixHQUFpQ0UsSUFBSSxDQUFDSyxJQUFMLENBQVVQLEdBQVYsQ0FBakM7QUFDQUMsVUFBTSxDQUFDLGVBQUQsRUFBa0JDLElBQWxCLENBQU47QUFDQSxHQU5jO0FBT2ZNLGtCQVBlLG1DQU9vQkYsRUFQcEIsRUFPd0IsS0FBcEJsQixLQUFvQixTQUFwQkEsS0FBb0IsQ0FBYmEsTUFBYSxTQUFiQSxNQUFhO0FBQ3RDLFFBQU1DLElBQUksc0JBQU9kLEtBQUssQ0FBQ0MsVUFBYixDQUFWO0FBQ0EsUUFBTWMsS0FBSyxHQUFHRCxJQUFJLENBQUNFLFNBQUwsQ0FBZSxVQUFBQyxJQUFJLFVBQUlBLElBQUksQ0FBQ0MsRUFBTCxJQUFXQSxFQUFmLEVBQW5CLENBQWQ7QUFDQSxRQUFLSCxLQUFLLEdBQUcsQ0FBQyxDQUFkLEVBQWtCRCxJQUFJLENBQUNPLE1BQUwsQ0FBWU4sS0FBWixFQUFtQixDQUFuQjtBQUNsQkYsVUFBTSxDQUFDLGVBQUQsRUFBa0JDLElBQWxCLENBQU47QUFDQSxHQVpjO0FBYWZRLGlCQWJlLGtDQWFtQkMsSUFibkIsRUFheUIsS0FBdEJ2QixLQUFzQixTQUF0QkEsS0FBc0IsQ0FBZmEsTUFBZSxTQUFmQSxNQUFlO0FBQ3ZDLFFBQU1DLElBQUksR0FBR2QsS0FBSyxDQUFDQyxVQUFOLENBQWlCdUIsTUFBakIsQ0FBd0IsVUFBQVAsSUFBSSxVQUFJQSxJQUFJLENBQUNNLElBQUwsSUFBYUEsSUFBakIsRUFBNUIsQ0FBYjtBQUNBVixVQUFNLENBQUMsZUFBRCxFQUFrQkMsSUFBbEIsQ0FBTjtBQUNBLEdBaEJjLEVBQWhCLEM7OztBQW1CZTtBQUNYVyxZQUFVLEVBQUUsSUFERDtBQUVYekIsT0FBSyxFQUFMQSxLQUZXO0FBR1hLLFNBQU8sRUFBUEEsT0FIVztBQUlYRSxXQUFTLEVBQVRBLFNBSlc7QUFLZEcsU0FBTyxFQUFQQSxPQUxjLEUiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT0xMRUNUSU9OIH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xyXG5cclxuY29uc3Qgc3RhdGUgPSB7XHJcblx0Y29sbGVjdGlvbjogdW5pLmdldFN0b3JhZ2VTeW5jKENPTExFQ1RJT04pIHx8IFtdIC8v5Zu+54mH5Li05pe25paH5Lu25a2Y5pS+XHJcbn1cclxuXHJcbmNvbnN0IGdldHRlcnMgPSB7XHJcblx0Z2V0Q29sbGVjdGlvbiAoc3RhdGUpIHtcclxuXHRcdHJldHVybiBzdGF0ZS5jb2xsZWN0aW9uXHJcblx0fVxyXG59XHJcblxyXG5jb25zdCBtdXRhdGlvbnMgPSB7XHJcblx0c2V0Q29sbGVjdGlvbiAoc3RhdGUsIGNvbGxlY3Rpb24pIHtcclxuXHRcdHN0YXRlLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uXHJcblx0XHR1bmkuc2V0U3RvcmFnZVN5bmMoQ09MTEVDVElPTiwgc3RhdGUuY29sbGVjdGlvbilcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IGFjdGlvbnMgPSB7XHJcblx0YWRkQ29sbGVjdGlvbiAoe3N0YXRlLCBjb21taXR9LCBvYmopIHtcclxuXHRcdGNvbnN0IGxpc3QgPSBbLi4uc3RhdGUuY29sbGVjdGlvbl1cclxuXHRcdGNvbnN0IGluZGV4ID0gbGlzdC5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmlkID09IG9iai5pZClcclxuXHRcdGluZGV4ID4gLTEgPyBsaXN0W2luZGV4XSA9IG9iaiA6IGxpc3QucHVzaChvYmopXHJcblx0XHRjb21taXQoJ3NldENvbGxlY3Rpb24nLCBsaXN0KVxyXG5cdH0sXHJcblx0cmVtb3ZlQ29sbGVjdGlvbiAoe3N0YXRlLCBjb21taXR9LCBpZCkge1xyXG5cdFx0Y29uc3QgbGlzdCA9IFsuLi5zdGF0ZS5jb2xsZWN0aW9uXVxyXG5cdFx0Y29uc3QgaW5kZXggPSBsaXN0LmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT0gaWQpXHJcblx0XHRpZiAoIGluZGV4ID4gLTEgKSBsaXN0LnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRjb21taXQoJ3NldENvbGxlY3Rpb24nLCBsaXN0KVxyXG5cdH0sXHJcblx0Y2xlYXJDb2xsZWN0aW9uICh7c3RhdGUsIGNvbW1pdH0sIHR5cGUpIHtcclxuXHRcdGNvbnN0IGxpc3QgPSBzdGF0ZS5jb2xsZWN0aW9uLmZpbHRlcihpdGVtID0+IGl0ZW0udHlwZSAhPSB0eXBlKVxyXG5cdFx0Y29tbWl0KCdzZXRDb2xsZWN0aW9uJywgbGlzdClcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWVzcGFjZWQ6IHRydWUsXHJcbiAgICBzdGF0ZSxcclxuICAgIGdldHRlcnMsXHJcbiAgICBtdXRhdGlvbnMsXHJcblx0YWN0aW9uc1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/*!************************************************************!*\
  !*** G:/my-project/uni-polymerize/store/modules/downer.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = _interopRequireDefault(__webpack_require__(/*! @/assets/js/config.js */ 11));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var\n\nTIMEOUT = _config.default.TIMEOUT;\n\nvar state = {\n  task: [] //下载任务列表\n};\n\nvar getters = {\n  getTask: function getTask(state) {\n    return state.task;\n  } };\n\n\nvar actions = {\n  createTask: function createTask(_ref, params) {var state = _ref.state,rootState = _ref.rootState,dispatch = _ref.dispatch;\n    var Downer = __webpack_require__(/*! @/assets/constructor/downer.js */ 31).default;\n    state.task.push(new Downer(params));\n    var index = state.task.findIndex(function (task) {return task.parentId == params.id;});\n    state.task[index].init();\n  },\n  removeTask: function removeTask(_ref2, id) {var state = _ref2.state;\n    var index = state.task.findIndex(function (task) {return task.parentId == id;});\n    if (index > -1) {\n      state.task[index].destroy();\n      state.task.splice(index, 1);\n    }\n  },\n  clearTask: function clearTask() {\n    Object.keys(state.task).forEach(function (key) {\n      state.task[key].destroy();\n    });\n    state.task = [];\n  } };var _default =\n\n\n{\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvbW9kdWxlcy9kb3duZXIuanMiXSwibmFtZXMiOlsiVElNRU9VVCIsIkNvbmZpZyIsInN0YXRlIiwidGFzayIsImdldHRlcnMiLCJnZXRUYXNrIiwiYWN0aW9ucyIsImNyZWF0ZVRhc2siLCJwYXJhbXMiLCJyb290U3RhdGUiLCJkaXNwYXRjaCIsIkRvd25lciIsInJlcXVpcmUiLCJkZWZhdWx0IiwicHVzaCIsImluZGV4IiwiZmluZEluZGV4IiwicGFyZW50SWQiLCJpZCIsImluaXQiLCJyZW1vdmVUYXNrIiwiZGVzdHJveSIsInNwbGljZSIsImNsZWFyVGFzayIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwibmFtZXNwYWNlZCJdLCJtYXBwaW5ncyI6InVGQUFBLDJGOztBQUVRQSxPLEdBQVlDLGUsQ0FBWkQsTzs7QUFFUixJQUFNRSxLQUFLLEdBQUc7QUFDYkMsTUFBSSxFQUFFLEVBRE8sQ0FDSjtBQURJLENBQWQ7O0FBSUEsSUFBTUMsT0FBTyxHQUFHO0FBQ2ZDLFNBRGUsbUJBQ05ILEtBRE0sRUFDQztBQUNmLFdBQU9BLEtBQUssQ0FBQ0MsSUFBYjtBQUNBLEdBSGMsRUFBaEI7OztBQU1BLElBQU1HLE9BQU8sR0FBRztBQUNmQyxZQURlLDRCQUMyQkMsTUFEM0IsRUFDbUMsS0FBckNOLEtBQXFDLFFBQXJDQSxLQUFxQyxDQUE5Qk8sU0FBOEIsUUFBOUJBLFNBQThCLENBQW5CQyxRQUFtQixRQUFuQkEsUUFBbUI7QUFDakQsUUFBTUMsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLHdDQUFELENBQVAsQ0FBMENDLE9BQXpEO0FBQ0FYLFNBQUssQ0FBQ0MsSUFBTixDQUFXVyxJQUFYLENBQWdCLElBQUlILE1BQUosQ0FBV0gsTUFBWCxDQUFoQjtBQUNBLFFBQU1PLEtBQUssR0FBR2IsS0FBSyxDQUFDQyxJQUFOLENBQVdhLFNBQVgsQ0FBcUIsVUFBQWIsSUFBSSxVQUFJQSxJQUFJLENBQUNjLFFBQUwsSUFBaUJULE1BQU0sQ0FBQ1UsRUFBNUIsRUFBekIsQ0FBZDtBQUNBaEIsU0FBSyxDQUFDQyxJQUFOLENBQVdZLEtBQVgsRUFBa0JJLElBQWxCO0FBQ0EsR0FOYztBQU9mQyxZQVBlLDZCQU9NRixFQVBOLEVBT1UsS0FBWmhCLEtBQVksU0FBWkEsS0FBWTtBQUN4QixRQUFNYSxLQUFLLEdBQUdiLEtBQUssQ0FBQ0MsSUFBTixDQUFXYSxTQUFYLENBQXFCLFVBQUFiLElBQUksVUFBSUEsSUFBSSxDQUFDYyxRQUFMLElBQWlCQyxFQUFyQixFQUF6QixDQUFkO0FBQ0EsUUFBS0gsS0FBSyxHQUFHLENBQUMsQ0FBZCxFQUFrQjtBQUNqQmIsV0FBSyxDQUFDQyxJQUFOLENBQVdZLEtBQVgsRUFBa0JNLE9BQWxCO0FBQ0FuQixXQUFLLENBQUNDLElBQU4sQ0FBV21CLE1BQVgsQ0FBa0JQLEtBQWxCLEVBQXlCLENBQXpCO0FBQ0E7QUFDRCxHQWJjO0FBY2ZRLFdBZGUsdUJBY0Y7QUFDWkMsVUFBTSxDQUFDQyxJQUFQLENBQVl2QixLQUFLLENBQUNDLElBQWxCLEVBQXdCdUIsT0FBeEIsQ0FBZ0MsVUFBQUMsR0FBRyxFQUFJO0FBQ3RDekIsV0FBSyxDQUFDQyxJQUFOLENBQVd3QixHQUFYLEVBQWdCTixPQUFoQjtBQUNBLEtBRkQ7QUFHQW5CLFNBQUssQ0FBQ0MsSUFBTixHQUFhLEVBQWI7QUFDQSxHQW5CYyxFQUFoQixDOzs7QUFzQmU7QUFDWHlCLFlBQVUsRUFBRSxJQUREO0FBRVgxQixPQUFLLEVBQUxBLEtBRlc7QUFHWEUsU0FBTyxFQUFQQSxPQUhXO0FBSWRFLFNBQU8sRUFBUEEsT0FKYyxFIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbmZpZyBmcm9tICdAL2Fzc2V0cy9qcy9jb25maWcuanMnXHJcblxyXG5jb25zdCB7IFRJTUVPVVQgfSA9IENvbmZpZ1xyXG5cclxuY29uc3Qgc3RhdGUgPSB7XHJcblx0dGFzazogW10gLy/kuIvovb3ku7vliqHliJfooahcclxufVxyXG5cclxuY29uc3QgZ2V0dGVycyA9IHtcclxuXHRnZXRUYXNrIChzdGF0ZSkge1xyXG5cdFx0cmV0dXJuIHN0YXRlLnRhc2tcclxuXHR9XHJcbn1cclxuXHJcbmNvbnN0IGFjdGlvbnMgPSB7XHJcblx0Y3JlYXRlVGFzayAoe3N0YXRlLCByb290U3RhdGUsIGRpc3BhdGNofSwgcGFyYW1zKSB7XHJcblx0XHRjb25zdCBEb3duZXIgPSByZXF1aXJlKCdAL2Fzc2V0cy9jb25zdHJ1Y3Rvci9kb3duZXIuanMnKS5kZWZhdWx0XHJcblx0XHRzdGF0ZS50YXNrLnB1c2gobmV3IERvd25lcihwYXJhbXMpKVxyXG5cdFx0Y29uc3QgaW5kZXggPSBzdGF0ZS50YXNrLmZpbmRJbmRleCh0YXNrID0+IHRhc2sucGFyZW50SWQgPT0gcGFyYW1zLmlkKVxyXG5cdFx0c3RhdGUudGFza1tpbmRleF0uaW5pdCgpXHJcblx0fSxcclxuXHRyZW1vdmVUYXNrICh7c3RhdGV9LCBpZCkge1xyXG5cdFx0Y29uc3QgaW5kZXggPSBzdGF0ZS50YXNrLmZpbmRJbmRleCh0YXNrID0+IHRhc2sucGFyZW50SWQgPT0gaWQpXHJcblx0XHRpZiAoIGluZGV4ID4gLTEgKSB7XHJcblx0XHRcdHN0YXRlLnRhc2tbaW5kZXhdLmRlc3Ryb3koKVxyXG5cdFx0XHRzdGF0ZS50YXNrLnNwbGljZShpbmRleCwgMSlcclxuXHRcdH1cclxuXHR9LFxyXG5cdGNsZWFyVGFzayAoKSB7XHJcblx0XHRPYmplY3Qua2V5cyhzdGF0ZS50YXNrKS5mb3JFYWNoKGtleSA9PiB7XHJcblx0XHRcdHN0YXRlLnRhc2tba2V5XS5kZXN0cm95KClcclxuXHRcdH0pXHJcblx0XHRzdGF0ZS50YXNrID0gW11cclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWVzcGFjZWQ6IHRydWUsXHJcbiAgICBzdGF0ZSxcclxuICAgIGdldHRlcnMsXHJcblx0YWN0aW9uc1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/*!*****************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/constructor/downer.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = _interopRequireDefault(__webpack_require__(/*! @/assets/js/config.js */ 11));\nvar _store = _interopRequireDefault(__webpack_require__(/*! @/store */ 17));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\n\ndispatch = _store.default.dispatch;var\nTIMEOUT = _config.default.TIMEOUT;var\n\nDowner = /*#__PURE__*/function () {\n  function Downer(_ref) {var id = _ref.id,title = _ref.title,src = _ref.src,instance = _ref.instance,type = _ref.type,extra = _ref.extra,source = _ref.source;_classCallCheck(this, Downer);\n    this.id = id + '_downer';\n    this.parentId = id;\n    this.title = title || ''; //文件名称\n    this.src = src; //下载路径\n    this.savePath = ''; //文件下载成功后的保存路径\n    this.progress = ''; //下载进度\n    this.instance = null; //下载实例\n    this.status = 0; //下载状态 <0 未开始> <1 正在下载> <2 下载成功> <3 下载失败>\n    this.type = type || '';\n    this.extra = extra || {}; //附加字段\n    this.source = source || ''; //下载来源\n  }_createClass(Downer, [{ key: \"init\", value: function init()\n    {var _this = this;\n      this.instance = uni.downloadFile({\n        url: this.src,\n        timeout: TIMEOUT,\n        success: function success(res) {\n          if (res.statusCode == 200) {\n            uni.saveFile({\n              tempFilePath: res.tempFilePath,\n              success: function success(ret) {\n                _this.status = 2;\n                _this.savePath = ret.savedFilePath;\n                dispatch('cache/addCache', {\n                  id: _this.parentId,\n                  title: _this.title,\n                  src: _this.savePath,\n                  type: _this.type,\n                  source: _this.source });\n\n                dispatch('downer/removeTask', _this.parentId);\n              } });\n\n          } else {\n            _this.status = 3;\n            dispatch('downer/removeTask', _this.parentId);\n          }\n        },\n        fail: function fail(err) {\n          _this.status = 3;\n          dispatch('downer/removeTask', _this.parentId);\n        } });\n\n      this.status = 1;\n      this.instance.onProgressUpdate(function (res) {\n        _this.progress = res.progress;\n      });\n    } }, { key: \"destroy\", value: function destroy()\n    {\n      this.instance ? this.instance.abort() : null;\n      this.instance = null;\n    } }]);return Downer;}();exports.default = Downer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2NvbnN0cnVjdG9yL2Rvd25lci5qcyJdLCJuYW1lcyI6WyJkaXNwYXRjaCIsIlN0b3JlIiwiVElNRU9VVCIsIkNvbmZpZyIsIkRvd25lciIsImlkIiwidGl0bGUiLCJzcmMiLCJpbnN0YW5jZSIsInR5cGUiLCJleHRyYSIsInNvdXJjZSIsInBhcmVudElkIiwic2F2ZVBhdGgiLCJwcm9ncmVzcyIsInN0YXR1cyIsInVuaSIsImRvd25sb2FkRmlsZSIsInVybCIsInRpbWVvdXQiLCJzdWNjZXNzIiwicmVzIiwic3RhdHVzQ29kZSIsInNhdmVGaWxlIiwidGVtcEZpbGVQYXRoIiwicmV0Iiwic2F2ZWRGaWxlUGF0aCIsImZhaWwiLCJlcnIiLCJvblByb2dyZXNzVXBkYXRlIiwiYWJvcnQiXSwibWFwcGluZ3MiOiJ1RkFBQTtBQUNBLDRFOztBQUVRQSxRLEdBQWFDLGMsQ0FBYkQsUTtBQUNBRSxPLEdBQVlDLGUsQ0FBWkQsTzs7QUFFYUUsTTtBQUNwQix3QkFBNkQsS0FBaERDLEVBQWdELFFBQWhEQSxFQUFnRCxDQUE1Q0MsS0FBNEMsUUFBNUNBLEtBQTRDLENBQXJDQyxHQUFxQyxRQUFyQ0EsR0FBcUMsQ0FBaENDLFFBQWdDLFFBQWhDQSxRQUFnQyxDQUF0QkMsSUFBc0IsUUFBdEJBLElBQXNCLENBQWhCQyxLQUFnQixRQUFoQkEsS0FBZ0IsQ0FBVEMsTUFBUyxRQUFUQSxNQUFTO0FBQzNELFNBQUtOLEVBQUwsR0FBVUEsRUFBRSxHQUFHLFNBQWY7QUFDQSxTQUFLTyxRQUFMLEdBQWdCUCxFQUFoQjtBQUNBLFNBQUtDLEtBQUwsR0FBYUEsS0FBSyxJQUFJLEVBQXRCLENBSDJELENBR25DO0FBQ3hCLFNBQUtDLEdBQUwsR0FBV0EsR0FBWCxDQUoyRCxDQUk3QztBQUNkLFNBQUtNLFFBQUwsR0FBZ0IsRUFBaEIsQ0FMMkQsQ0FLekM7QUFDbEIsU0FBS0MsUUFBTCxHQUFnQixFQUFoQixDQU4yRCxDQU16QztBQUNsQixTQUFLTixRQUFMLEdBQWdCLElBQWhCLENBUDJELENBT3ZDO0FBQ3BCLFNBQUtPLE1BQUwsR0FBYyxDQUFkLENBUjJELENBUTVDO0FBQ2YsU0FBS04sSUFBTCxHQUFZQSxJQUFJLElBQUksRUFBcEI7QUFDQSxTQUFLQyxLQUFMLEdBQWFBLEtBQUssSUFBSSxFQUF0QixDQVYyRCxDQVVuQztBQUN4QixTQUFLQyxNQUFMLEdBQWNBLE1BQU0sSUFBSSxFQUF4QixDQVgyRCxDQVdqQztBQUMzQixHO0FBQ087QUFDUCxXQUFLSCxRQUFMLEdBQWdCUSxHQUFHLENBQUNDLFlBQUosQ0FBaUI7QUFDaENDLFdBQUcsRUFBRSxLQUFLWCxHQURzQjtBQUVoQ1ksZUFBTyxFQUFFakIsT0FGdUI7QUFHaENrQixlQUFPLEVBQUUsaUJBQUNDLEdBQUQsRUFBUztBQUNqQixjQUFLQSxHQUFHLENBQUNDLFVBQUosSUFBa0IsR0FBdkIsRUFBNkI7QUFDNUJOLGVBQUcsQ0FBQ08sUUFBSixDQUFhO0FBQ1pDLDBCQUFZLEVBQUVILEdBQUcsQ0FBQ0csWUFETjtBQUVaSixxQkFBTyxFQUFFLGlCQUFDSyxHQUFELEVBQVM7QUFDakIscUJBQUksQ0FBQ1YsTUFBTCxHQUFjLENBQWQ7QUFDQSxxQkFBSSxDQUFDRixRQUFMLEdBQWdCWSxHQUFHLENBQUNDLGFBQXBCO0FBQ0ExQix3QkFBUSxDQUFDLGdCQUFELEVBQW1CO0FBQzFCSyxvQkFBRSxFQUFFLEtBQUksQ0FBQ08sUUFEaUI7QUFFMUJOLHVCQUFLLEVBQUUsS0FBSSxDQUFDQSxLQUZjO0FBRzFCQyxxQkFBRyxFQUFFLEtBQUksQ0FBQ00sUUFIZ0I7QUFJMUJKLHNCQUFJLEVBQUUsS0FBSSxDQUFDQSxJQUplO0FBSzFCRSx3QkFBTSxFQUFFLEtBQUksQ0FBQ0EsTUFMYSxFQUFuQixDQUFSOztBQU9BWCx3QkFBUSxDQUFDLG1CQUFELEVBQXNCLEtBQUksQ0FBQ1ksUUFBM0IsQ0FBUjtBQUNBLGVBYlcsRUFBYjs7QUFlQSxXQWhCRCxNQWdCTztBQUNOLGlCQUFJLENBQUNHLE1BQUwsR0FBYyxDQUFkO0FBQ0FmLG9CQUFRLENBQUMsbUJBQUQsRUFBc0IsS0FBSSxDQUFDWSxRQUEzQixDQUFSO0FBQ0E7QUFDRCxTQXhCK0I7QUF5QmhDZSxZQUFJLEVBQUUsY0FBQ0MsR0FBRCxFQUFTO0FBQ2QsZUFBSSxDQUFDYixNQUFMLEdBQWMsQ0FBZDtBQUNBZixrQkFBUSxDQUFDLG1CQUFELEVBQXNCLEtBQUksQ0FBQ1ksUUFBM0IsQ0FBUjtBQUNBLFNBNUIrQixFQUFqQixDQUFoQjs7QUE4QkEsV0FBS0csTUFBTCxHQUFjLENBQWQ7QUFDQSxXQUFLUCxRQUFMLENBQWNxQixnQkFBZCxDQUErQixVQUFDUixHQUFELEVBQVM7QUFDdkMsYUFBSSxDQUFDUCxRQUFMLEdBQWdCTyxHQUFHLENBQUNQLFFBQXBCO0FBQ0EsT0FGRDtBQUdBLEs7QUFDVTtBQUNWLFdBQUtOLFFBQUwsR0FBZ0IsS0FBS0EsUUFBTCxDQUFjc0IsS0FBZCxFQUFoQixHQUF3QyxJQUF4QztBQUNBLFdBQUt0QixRQUFMLEdBQWdCLElBQWhCO0FBQ0EsSyIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25maWcgZnJvbSAnQC9hc3NldHMvanMvY29uZmlnLmpzJ1xyXG5pbXBvcnQgU3RvcmUgZnJvbSAnQC9zdG9yZSdcclxuXHJcbmNvbnN0IHsgZGlzcGF0Y2ggfSA9IFN0b3JlXHJcbmNvbnN0IHsgVElNRU9VVCB9ID0gQ29uZmlnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb3duZXIge1xyXG5cdGNvbnN0cnVjdG9yKHtpZCwgdGl0bGUsIHNyYywgaW5zdGFuY2UsIHR5cGUsIGV4dHJhLCBzb3VyY2V9KSB7XHJcblx0ICB0aGlzLmlkID0gaWQgKyAnX2Rvd25lcidcclxuXHQgIHRoaXMucGFyZW50SWQgPSBpZFxyXG5cdCAgdGhpcy50aXRsZSA9IHRpdGxlIHx8ICcnLy/mlofku7blkI3np7BcclxuXHQgIHRoaXMuc3JjID0gc3JjLy/kuIvovb3ot6/lvoRcclxuXHQgIHRoaXMuc2F2ZVBhdGggPSAnJy8v5paH5Lu25LiL6L295oiQ5Yqf5ZCO55qE5L+d5a2Y6Lev5b6EXHJcblx0ICB0aGlzLnByb2dyZXNzID0gJycvL+S4i+i9vei/m+W6plxyXG5cdCAgdGhpcy5pbnN0YW5jZSA9IG51bGwvL+S4i+i9veWunuS+i1xyXG5cdCAgdGhpcy5zdGF0dXMgPSAwLy/kuIvovb3nirbmgIEgPDAg5pyq5byA5aeLPiA8MSDmraPlnKjkuIvovb0+IDwyIOS4i+i9veaIkOWKnz4gPDMg5LiL6L295aSx6LSlPlxyXG5cdCAgdGhpcy50eXBlID0gdHlwZSB8fCAnJ1xyXG5cdCAgdGhpcy5leHRyYSA9IGV4dHJhIHx8IHt9Ly/pmYTliqDlrZfmrrVcclxuXHQgIHRoaXMuc291cmNlID0gc291cmNlIHx8ICcnLy/kuIvovb3mnaXmupBcclxuXHR9XHJcblx0aW5pdCAoKSB7XHJcblx0XHR0aGlzLmluc3RhbmNlID0gdW5pLmRvd25sb2FkRmlsZSh7XHJcblx0XHRcdHVybDogdGhpcy5zcmMsXHJcblx0XHRcdHRpbWVvdXQ6IFRJTUVPVVQsXHJcblx0XHRcdHN1Y2Nlc3M6IChyZXMpID0+IHtcclxuXHRcdFx0XHRpZiAoIHJlcy5zdGF0dXNDb2RlID09IDIwMCApIHtcclxuXHRcdFx0XHRcdHVuaS5zYXZlRmlsZSh7XHJcblx0XHRcdFx0XHRcdHRlbXBGaWxlUGF0aDogcmVzLnRlbXBGaWxlUGF0aCxcclxuXHRcdFx0XHRcdFx0c3VjY2VzczogKHJldCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc3RhdHVzID0gMlxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc2F2ZVBhdGggPSByZXQuc2F2ZWRGaWxlUGF0aDtcclxuXHRcdFx0XHRcdFx0XHRkaXNwYXRjaCgnY2FjaGUvYWRkQ2FjaGUnLCB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZDogdGhpcy5wYXJlbnRJZCxcclxuXHRcdFx0XHRcdFx0XHRcdHRpdGxlOiB0aGlzLnRpdGxlLFxyXG5cdFx0XHRcdFx0XHRcdFx0c3JjOiB0aGlzLnNhdmVQYXRoLFxyXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogdGhpcy50eXBlLFxyXG5cdFx0XHRcdFx0XHRcdFx0c291cmNlOiB0aGlzLnNvdXJjZVxyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2goJ2Rvd25lci9yZW1vdmVUYXNrJywgdGhpcy5wYXJlbnRJZClcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0IH0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aGlzLnN0YXR1cyA9IDNcclxuXHRcdFx0XHRcdGRpc3BhdGNoKCdkb3duZXIvcmVtb3ZlVGFzaycsIHRoaXMucGFyZW50SWQpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRmYWlsOiAoZXJyKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5zdGF0dXMgPSAzXHJcblx0XHRcdFx0ZGlzcGF0Y2goJ2Rvd25lci9yZW1vdmVUYXNrJywgdGhpcy5wYXJlbnRJZClcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdHRoaXMuc3RhdHVzID0gMVxyXG5cdFx0dGhpcy5pbnN0YW5jZS5vblByb2dyZXNzVXBkYXRlKChyZXMpID0+IHtcclxuXHRcdFx0dGhpcy5wcm9ncmVzcyA9IHJlcy5wcm9ncmVzc1xyXG5cdFx0fSlcclxuXHR9XHJcblx0ZGVzdHJveSAoKSB7XHJcblx0XHR0aGlzLmluc3RhbmNlID8gdGhpcy5pbnN0YW5jZS5hYm9ydCgpIDogbnVsbFxyXG5cdFx0dGhpcy5pbnN0YW5jZSA9IG51bGxcclxuXHR9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/*!***********************************************************!*\
  !*** G:/my-project/uni-polymerize/store/modules/audio.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = __webpack_require__(/*! ../config.js */ 21);\nvar _util = _interopRequireDefault(__webpack_require__(/*! @/assets/js/util.js */ 15));\nvar _index = _interopRequireDefault(__webpack_require__(/*! @/js_sdk/yb-native-ui/index.js */ 33));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}var\n\nrandomSoleNumber = _util.default.randomSoleNumber;\n\n//音乐播放\nvar state = {\n  player: null, //播放实例\n  currentSong: null, //当前播放歌曲\n  playStatus: false, //播放状态\n  currentTime: 0, //播放时间\n  duration: 1, //歌曲长度\n  playList: [], //播放列表\n  playMode: uni.getStorageSync(_config.PLAYMODE) || 'round', //播放模式\n  playOrder: [], //播放订单\n  lyricShow: uni.getStorageSync(_config.LYRICSHOW) || false //是否显示全局歌词\n};\n\nvar getters = {\n  getPlayer: function getPlayer(state) {\n    return state.player;\n  },\n  getCurrentSong: function getCurrentSong(state) {\n    return state.currentSong;\n  },\n  getPlayStatus: function getPlayStatus(state) {\n    return state.playStatus;\n  },\n  getCurrentTime: function getCurrentTime(state) {\n    return state.currentTime;\n  },\n  getDuration: function getDuration(state) {\n    return state.duration;\n  },\n  getPlayList: function getPlayList(state) {\n    return state.playList;\n  },\n  getPlayMode: function getPlayMode(state) {\n    return state.playMode;\n  },\n  getPlayOrder: function getPlayOrder(state) {\n    return state.playOrder;\n  },\n  getLyricShow: function getLyricShow(state) {\n    return state.lyricShow;\n  } };\n\n\nvar mutations = {\n  //设置播放实例\n  setPlayer: function setPlayer(state, player) {\n    state.player = player || null;\n  },\n  //设置当前播放歌曲\n  setCurrentSong: function setCurrentSong(state, song) {\n    state.currentSong = song || null;\n  },\n  //设置当前播放状态\n  setPlayStatus: function setPlayStatus(state, status) {\n    state.playStatus = status;\n  },\n  //设置当前播放时间\n  setCurrentTime: function setCurrentTime(state, time) {\n    state.currentTime = time || 0;\n  },\n  //设置当前歌曲长度\n  setDuration: function setDuration(state, time) {\n    state.duration = time;\n  },\n  //设置播放列表\n  setPlayList: function setPlayList(state, playList) {\n    state.playList = playList || [];\n  },\n  //设置播放模式\n  setPlayMode: function setPlayMode(state, playMode) {\n    state.playMode = playMode || 'round';\n    uni.setStorageSync(_config.PLAYMODE, state.playMode);\n  },\n  //设置播放模式\n  setPlayOrder: function setPlayOrder(state, playOrder) {\n    state.playOrder = playOrder || [];\n  },\n  //设置是否显示全局歌词\n  setLyricShow: function setLyricShow(state, bol) {\n    state.lyricShow = bol;\n    uni.setStorageSync(_config.LYRICSHOW, state.lyricShow);\n  } };\n\n\nvar actions = {\n  //增加歌曲\n  addSong: function addSong(_ref, songs) {var state = _ref.state,commit = _ref.commit,dispatch = _ref.dispatch;\n    var list = _toConsumableArray(state.playList);\n    var newSongs = songs.filter(function (song) {\n      return !song.payplay && list.findIndex(function (item) {return item.id == song.id;}) == -1;\n    });\n    list = list.concat(newSongs);\n    commit('setPlayList', list);\n    dispatch('changePlayOrder');\n  },\n  //移除指定歌曲\n  removeSong: function removeSong(_ref2, id) {var state = _ref2.state,commit = _ref2.commit,dispatch = _ref2.dispatch;\n    var list = _toConsumableArray(state.playList);\n    var orders = _toConsumableArray(state.playOrder);\n    var songIndex = list.findIndex(function (item) {return item.id == id;});\n    var orderIndex = orders.findIndex(function (order) {return order == id;});\n    var currentId = state.currentSong ? state.currentSong.id : null;\n    list.splice(songIndex, 1);\n    orders.splice(orderIndex, 1);\n    commit('setPlayList', list);\n    commit('setPlayOrder', orders);\n    currentId == id ? list.length > 0 ? dispatch('next') : dispatch('destroy') : null;\n  },\n  //清空播放列表\n  clearSong: function clearSong(_ref3) {var commit = _ref3.commit,dispatch = _ref3.dispatch;\n    dispatch('destroy');\n    commit('setPlayList', []);\n    commit('setPlayOrder', []);\n  },\n  //切换播放模式\n  switchPlayMode: function switchPlayMode(_ref4) {var state = _ref4.state,commit = _ref4.commit,dispatch = _ref4.dispatch;\n    switch (state.playMode) {\n      case 'round':\n        commit('setPlayMode', 'loop');\n        break;\n      case 'loop':\n        commit('setPlayMode', 'random');\n        break;\n      default:\n        commit('setPlayMode', 'round');\n        break;}\n\n    dispatch('changePlayOrder');\n  },\n  //切换歌词显示\n  switchLyricShow: function switchLyricShow(_ref5) {var state = _ref5.state,commit = _ref5.commit;\n    commit('setLyricShow', !state.lyricShow);\n  },\n  changePlayOrder: function changePlayOrder(_ref6) {var state = _ref6.state,commit = _ref6.commit;\n    var list = _toConsumableArray(state.playList);\n    switch (state.playMode) {\n      case 'random':\n        var arr = randomSoleNumber(list.length);\n        var order = [];\n        arr.forEach(function (index) {\n          order.push(list[index].id);\n        });\n        commit('setPlayOrder', order);\n        break;\n      case 'loop':\n        var orders = state.currentSong ? [state.currentSong.id] : [list[0].id];\n        commit('setPlayOrder', orders);\n        break;\n      default:\n        commit('setPlayOrder', list.map(function (item) {return item.id;}));\n        break;}\n\n  },\n  //下一首\n  next: function next(_ref7) {var state = _ref7.state,dispatch = _ref7.dispatch;\n    var orders = _toConsumableArray(state.playOrder);\n    var currentIndex = state.currentSong ? orders.findIndex(function (order) {return order == state.currentSong.id;}) : 0;\n    var newCurrent = currentIndex >= orders.length - 1 ? 0 : currentIndex + 1;\n    dispatch('create', orders[newCurrent]);\n  },\n  //上一首\n  prev: function prev(_ref8) {var state = _ref8.state,dispatch = _ref8.dispatch;\n    var orders = _toConsumableArray(state.playOrder);\n    var currentIndex = state.currentSong ? orders.findIndex(function (order) {return order == state.currentSong.id;}) : 0;\n    var newCurrent = currentIndex <= 0 ? orders.length - 1 : currentIndex - 1;\n    dispatch('create', orders[newCurrent]);\n  },\n  create: function create(_ref9, id) {var _this = this;var state = _ref9.state,commit = _ref9.commit,dispatch = _ref9.dispatch;\n    state.player ? dispatch('destroy') : null;\n    var songs = _toConsumableArray(state.playList);\n    var currentSong = songs.find(function (song) {return song.id == id;});\n    var Player = __webpack_require__(/*! @/assets/constructor/player.js */ 40).default;\n    commit('setPlayer', new Player(currentSong));\n    commit('setCurrentSong', currentSong);\n    state.player.init().then(function (status) {\n      if (status) {\n        state.player.instance.play();\n        state.player.instance.onEnded(function () {\n          dispatch('next');\n        });\n        state.player.instance.onError(function () {\n          _index.default.alert({\n            title: '错误提示',\n            content: '歌曲播放失败！换首歌曲播放吧',\n            dark: _this.skinMode == 'night',\n            success: function success(res) {\n              dispatch('removeSong', id);\n            } });\n\n        });\n        state.player.instance.onTimeUpdate(function () {\n          commit('setCurrentTime', state.player.instance.currentTime);\n        });\n        state.player.instance.onPlay(function () {\n          commit('setPlayStatus', true);\n          commit('setDuration', state.player.instance.duration);\n        });\n        state.player.instance.onPause(function () {\n          commit('setPlayStatus', false);\n        });\n        state.player.instance.onStop(function () {\n          commit('setPlayStatus', false);\n        });\n        state.player.instance.onEnded(function () {\n          commit('setPlayStatus', false);\n        });\n      } else {\n        _index.default.alert({\n          title: '错误提示',\n          content: '歌曲播放失败！换首歌曲播放吧',\n          dark: _this.skinMode == 'night',\n          success: function success(res) {\n            dispatch('removeSong', id);\n          } });\n\n      }\n    });\n  },\n  destroy: function destroy(_ref10) {var state = _ref10.state,commit = _ref10.commit;\n    state.player ? state.player.destroy() : null;\n    commit('setPlayStatus', false);\n    commit('setCurrentTime', 0);\n    commit('setDuration', 1);\n    commit('setPlayer', null);\n    commit('setCurrentSong', null);\n  } };var _default =\n\n\n{\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/*!*****************************************************************!*\
  !*** G:/my-project/uni-polymerize/js_sdk/yb-native-ui/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _modal = __webpack_require__(/*! ./modal.js */ 34);\nvar _panel = _interopRequireDefault(__webpack_require__(/*! ./panel.js */ 37));\nvar _toolbar = _interopRequireDefault(__webpack_require__(/*! ./toolbar.js */ 38));\nvar _scircle = _interopRequireDefault(__webpack_require__(/*! ./scircle.js */ 39));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n\n{\n  namespaced: true,\n  confirm: _modal.confirm,\n  alert: _modal.alert,\n  panel: _panel.default,\n  toolbar: _toolbar.default,\n  scircle: _scircle.default };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vanNfc2RrL3liLW5hdGl2ZS11aS9pbmRleC5qcyJdLCJuYW1lcyI6WyJuYW1lc3BhY2VkIiwiY29uZmlybSIsImFsZXJ0IiwicGFuZWwiLCJ0b29sYmFyIiwic2NpcmNsZSJdLCJtYXBwaW5ncyI6InVGQUFBO0FBQ0E7QUFDQTtBQUNBLG1GOztBQUVlO0FBQ2RBLFlBQVUsRUFBRSxJQURFO0FBRWRDLFNBQU8sRUFBUEEsY0FGYztBQUdkQyxPQUFLLEVBQUxBLFlBSGM7QUFJZEMsT0FBSyxFQUFMQSxjQUpjO0FBS2RDLFNBQU8sRUFBUEEsZ0JBTGM7QUFNZEMsU0FBTyxFQUFQQSxnQkFOYyxFIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uZmlybSwgYWxlcnQgfSBmcm9tICcuL21vZGFsLmpzJ1xyXG5pbXBvcnQgcGFuZWwgZnJvbSAnLi9wYW5lbC5qcydcclxuaW1wb3J0IHRvb2xiYXIgZnJvbSAnLi90b29sYmFyLmpzJ1xyXG5pbXBvcnQgc2NpcmNsZSBmcm9tICcuL3NjaXJjbGUuanMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0bmFtZXNwYWNlZDogdHJ1ZSxcclxuXHRjb25maXJtLFxyXG5cdGFsZXJ0LFxyXG5cdHBhbmVsLFxyXG5cdHRvb2xiYXIsXHJcblx0c2NpcmNsZVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/*!*****************************************************************!*\
  !*** G:/my-project/uni-polymerize/js_sdk/yb-native-ui/modal.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.modal = modal;exports.alert = alert;exports.confirm = confirm;\n\nvar _mask = _interopRequireDefault(__webpack_require__(/*! ./mask.js */ 35));\nvar _color = _interopRequireDefault(__webpack_require__(/*! ./color.js */ 36));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var windowWidth = uni.getSystemInfoSync().screenWidth;var windowHeight = uni.getSystemInfoSync().screenHeight;\n\n\n\nfunction modal(_ref) {var title = _ref.title,content = _ref.content,cancelHide = _ref.cancelHide,confirmText = _ref.confirmText,cancelText = _ref.cancelText,dark = _ref.dark,themeColor = _ref.themeColor,success = _ref.success,fail = _ref.fail;\n  var padding = uni.upx2px(20); //内间隔\n  var titleSize = uni.upx2px(30); //标题大小\n  var titleHeight = title ? titleSize + padding + padding : 0; //字体所占高度\n\n  var width = uni.upx2px(520); //弹框宽度\n  var height = uni.upx2px(220) + titleHeight; //弹框高度\n  var radius = uni.upx2px(10); //弹框圆角大小\n  var top = windowHeight / 2 - height / 2; //弹框top定位\n  var left = windowWidth / 2 - width / 2; //弹框left定位\n  var footerHeight = uni.upx2px(90); //弹框按钮栏所占高度\n  var footerTop = height - footerHeight; //弹框安钮栏top定位\n\n  var contentSize = uni.upx2px(24); //内容文字大小\n  var contentHeight = height - titleHeight - footerHeight - (title ? padding : 2 * padding); //内容文字高度\n\n  var btnSize = uni.upx2px(26);\n\n  var mode = dark ? 'dark' : 'light';\n  var bgColor = _color.default[mode].bg;\n  var lineColor = _color.default[mode].gap;\n  var titleColor = themeColor || _color.default[mode].title;\n  var textColor = _color.default[mode].title;\n\n  var mask = (0, _mask.default)();\n  var popup = new plus.nativeObj.View('popup', {\n    top: top + 'px',\n    left: 0 + 'px',\n    width: width + 'px',\n    height: height + 'px' });\n\n  var draws = [{\n    tag: 'rect',\n    id: 'bg',\n    rectStyles: {\n      color: bgColor,\n      radius: radius + 'px' },\n\n    position: {\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%' } },\n\n  {\n    tag: 'rect',\n    id: 'h-line',\n    rectStyles: {\n      color: lineColor },\n\n    position: {\n      top: footerTop + 'px',\n      left: 0,\n      width: '100%',\n      height: 1 + 'px' } },\n\n  {\n    tag: 'font',\n    id: 'title',\n    text: title,\n    textStyles: {\n      color: titleColor,\n      size: titleSize + 'px',\n      align: 'middle' },\n\n    position: {\n      top: 0,\n      left: padding / 2 + 'px',\n      width: width - padding + 'px',\n      height: titleHeight + 'px' } },\n\n  {\n    tag: 'font',\n    id: 'content',\n    text: content,\n    textStyles: {\n      color: textColor,\n      size: contentSize + 'px',\n      align: 'middle',\n      whiteSpace: 'normal' },\n\n    position: {\n      top: (title ? titleHeight : padding) + 'px',\n      left: padding / 2 + 'px',\n      width: width - padding + 'px',\n      height: contentHeight + 'px' } }];\n\n\n  var arr = [];\n  if (!cancelHide) {\n    arr = [\n    {\n      tag: 'rect',\n      id: 'v-line',\n      rectStyles: {\n        color: lineColor },\n\n      position: {\n        top: footerTop + 'px',\n        left: width / 2 - 0.5 + 'px',\n        width: 1 + 'px',\n        height: footerHeight + 'px' } },\n\n    {\n      tag: 'font',\n      id: 'confirm',\n      text: confirmText || '确认',\n      textStyles: {\n        color: titleColor,\n        size: btnSize + 'px',\n        weight: 'bold' },\n\n      position: {\n        top: footerTop + 'px',\n        left: width / 2 + 'px',\n        width: width / 2 + 'px',\n        height: footerHeight + 'px' } },\n\n    {\n      tag: 'font',\n      id: 'cancel',\n      text: cancelText || '取消',\n      textStyles: {\n        color: textColor,\n        size: btnSize + 'px' },\n\n      position: {\n        top: footerTop + 'px',\n        left: 0,\n        width: width / 2 + 'px',\n        height: footerHeight + 'px' } }];\n\n\n\n  } else {\n    arr = [\n    {\n      tag: 'font',\n      id: 'confirm',\n      text: confirmText || '确认',\n      textStyles: {\n        color: titleColor,\n        size: btnSize + 'px',\n        weight: 'bold' },\n\n      position: {\n        top: footerTop + 'px',\n        left: 0,\n        width: '100%',\n        height: footerHeight + 'px' } }];\n\n\n\n  }\n  draws = draws.concat(arr);\n  popup.draw(draws);\n\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var backs = page.$vm.$options.onBackPress; //记录下当前页面有可能设置的返回事件监听方法，用于还原\n  page.$vm.$options.onBackPress = new Array(0);\n  page.$vm.$options.onBackPress.push(function (e) {\n    complete(false);\n    return true;\n  });\n  var complete = function complete(confirm) {var cancel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    try {\n      mask.close();\n      popup.close();\n      mask = null;\n      popup = null;\n      success ? success({\n        confirm: confirm,\n        cancel: cancel }) :\n      null;\n      page.$vm.$options.onBackPress = backs; //还原当前页面的返回事件监听\n    } catch (e) {\n      fail ? fail(e) : null;\n    }\n  };\n  popup.addEventListener(\"click\", function (e) {\n    try {\n      var _confirm = {\n        top: footerTop,\n        bottom: footerTop + footerHeight,\n        left: cancelHide ? 0 : width / 2,\n        right: width };\n\n      var cancel = cancelHide ? {\n        top: -1,\n        bottom: -1,\n        left: -1,\n        right: -1 } :\n      {\n        top: footerTop,\n        bottom: footerTop + footerHeight,\n        left: 0,\n        right: width / 2 };\n\n      if (e.clientX >= _confirm.left && e.clientX <= _confirm.right && e.clientY >= _confirm.top && e.clientY <= _confirm.bottom) {\n        complete(true);\n      } else if (e.clientX >= cancel.left && e.clientX <= cancel.right && e.clientY >= cancel.top && e.clientY <= cancel.bottom) {\n        complete(false, true);\n      }\n    } catch (e) {\n      complete(false);\n    }\n  });\n  mask.addEventListener(\"click\", function (e) {\n    try {\n      complete(false);\n    } catch (e) {\n      complete(false);\n    }\n  });\n  mask.show();\n  popup.show();\n  var aLeft = 0;\n  var show = function show() {\n    setTimeout(function () {\n      aLeft += 10;\n      if (aLeft < left) {\n        popup.setStyle({\n          left: aLeft + 'px' });\n\n        show();\n      } else {\n        aLeft = left;\n        popup.setStyle({\n          left: aLeft + 'px' });\n\n      }\n    }, 10);\n  };\n  show();\n}\n\nfunction alert(_ref2) {var title = _ref2.title,content = _ref2.content,confirmText = _ref2.confirmText,dark = _ref2.dark,themeColor = _ref2.themeColor,success = _ref2.success,fail = _ref2.fail;\n  modal({\n    title: title,\n    content: content,\n    cancelHide: true,\n    confirmText: confirmText || '确认',\n    dark: dark || false,\n    themeColor: themeColor || '',\n    success: success || function () {},\n    fail: success || function () {} });\n\n}\n\nfunction confirm(_ref3) {var title = _ref3.title,content = _ref3.content,confirmText = _ref3.confirmText,cancelText = _ref3.cancelText,dark = _ref3.dark,themeColor = _ref3.themeColor,success = _ref3.success,fail = _ref3.fail;\n  modal({\n    title: title,\n    content: content,\n    cancelHide: false,\n    confirmText: confirmText || '确认',\n    cancelText: cancelText || '取消',\n    dark: dark || false,\n    themeColor: themeColor || '',\n    success: success || function () {},\n    fail: success || function () {} });\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/*!****************************************************************!*\
  !*** G:/my-project/uni-polymerize/js_sdk/yb-native-ui/mask.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = mask;function mask(opacity) {\n  var bgColor = \"rgba(0,0,0,\".concat(typeof opacity == 'number' ? opacity : 0.4, \")\");\n  var mask = new plus.nativeObj.View('mask', {\n    width: '100%',\n    height: '100%',\n    top: '0',\n    left: '0',\n    backgroundColor: bgColor });\n\n  return mask;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vanNfc2RrL3liLW5hdGl2ZS11aS9tYXNrLmpzIl0sIm5hbWVzIjpbIm1hc2siLCJvcGFjaXR5IiwiYmdDb2xvciIsInBsdXMiLCJuYXRpdmVPYmoiLCJWaWV3Iiwid2lkdGgiLCJoZWlnaHQiLCJ0b3AiLCJsZWZ0IiwiYmFja2dyb3VuZENvbG9yIl0sIm1hcHBpbmdzIjoicUZBQWUsU0FBU0EsSUFBVCxDQUFlQyxPQUFmLEVBQXdCO0FBQ3RDLE1BQU1DLE9BQU8sd0JBQWlCLE9BQU9ELE9BQVAsSUFBa0IsUUFBbEIsR0FBNkJBLE9BQTdCLEdBQXVDLEdBQXhELE1BQWI7QUFDQSxNQUFNRCxJQUFJLEdBQUcsSUFBSUcsSUFBSSxDQUFDQyxTQUFMLENBQWVDLElBQW5CLENBQXdCLE1BQXhCLEVBQWdDO0FBQzVDQyxTQUFLLEVBQUUsTUFEcUM7QUFFNUNDLFVBQU0sRUFBRSxNQUZvQztBQUc1Q0MsT0FBRyxFQUFFLEdBSHVDO0FBSTVDQyxRQUFJLEVBQUUsR0FKc0M7QUFLNUNDLG1CQUFlLEVBQUVSLE9BTDJCLEVBQWhDLENBQWI7O0FBT0EsU0FBT0YsSUFBUDtBQUNBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFzayAob3BhY2l0eSkge1xyXG5cdGNvbnN0IGJnQ29sb3IgPSBgcmdiYSgwLDAsMCwke3R5cGVvZiBvcGFjaXR5ID09ICdudW1iZXInID8gb3BhY2l0eSA6IDAuNH0pYFxyXG5cdGNvbnN0IG1hc2sgPSBuZXcgcGx1cy5uYXRpdmVPYmouVmlldygnbWFzaycsIHtcclxuXHRcdHdpZHRoOiAnMTAwJScsXHJcblx0XHRoZWlnaHQ6ICcxMDAlJyxcclxuXHRcdHRvcDogJzAnLFxyXG5cdFx0bGVmdDogJzAnLFxyXG5cdFx0YmFja2dyb3VuZENvbG9yOiBiZ0NvbG9yLFxyXG5cdH0pO1xyXG5cdHJldHVybiBtYXNrXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/*!*****************************************************************!*\
  !*** G:/my-project/uni-polymerize/js_sdk/yb-native-ui/color.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  'light': {\n    bg: '#FFFFFF',\n    title: '#333333',\n    gap: '#EEEEEE',\n    text: '#666666',\n    text_2: '#999999' },\n\n  'dark': {\n    bg: '#222222',\n    title: '#f4f7f5',\n    gap: '#191919',\n    text: '#8a8a8a',\n    text_2: '#888888' } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vanNfc2RrL3liLW5hdGl2ZS11aS9jb2xvci5qcyJdLCJuYW1lcyI6WyJiZyIsInRpdGxlIiwiZ2FwIiwidGV4dCIsInRleHRfMiJdLCJtYXBwaW5ncyI6InNHQUFlO0FBQ2QsV0FBUztBQUNSQSxNQUFFLEVBQUUsU0FESTtBQUVSQyxTQUFLLEVBQUUsU0FGQztBQUdSQyxPQUFHLEVBQUUsU0FIRztBQUlSQyxRQUFJLEVBQUUsU0FKRTtBQUtSQyxVQUFNLEVBQUUsU0FMQSxFQURLOztBQVFkLFVBQVE7QUFDUEosTUFBRSxFQUFFLFNBREc7QUFFUEMsU0FBSyxFQUFFLFNBRkE7QUFHUEMsT0FBRyxFQUFFLFNBSEU7QUFJUEMsUUFBSSxFQUFFLFNBSkM7QUFLUEMsVUFBTSxFQUFFLFNBTEQsRUFSTSxFIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xyXG5cdCdsaWdodCc6IHtcclxuXHRcdGJnOiAnI0ZGRkZGRicsXHJcblx0XHR0aXRsZTogJyMzMzMzMzMnLFxyXG5cdFx0Z2FwOiAnI0VFRUVFRScsXHJcblx0XHR0ZXh0OiAnIzY2NjY2NicsXHJcblx0XHR0ZXh0XzI6ICcjOTk5OTk5J1xyXG5cdH0sXHJcblx0J2RhcmsnOiB7XHJcblx0XHRiZzogJyMyMjIyMjInLFxyXG5cdFx0dGl0bGU6ICcjZjRmN2Y1JyxcclxuXHRcdGdhcDogJyMxOTE5MTknLFxyXG5cdFx0dGV4dDogJyM4YThhOGEnLFxyXG5cdFx0dGV4dF8yOiAnIzg4ODg4OCdcclxuXHR9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/*!*****************************************************************!*\
  !*** G:/my-project/uni-polymerize/js_sdk/yb-native-ui/panel.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.panel = panel;exports.default = void 0;\n\nvar _mask = _interopRequireDefault(__webpack_require__(/*! ./mask.js */ 35));\nvar _color = _interopRequireDefault(__webpack_require__(/*! ./color.js */ 36));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var windowWidth = uni.getSystemInfoSync().screenWidth;var windowHeight = uni.getSystemInfoSync().screenHeight;\n\n\n\nfunction panel(_ref) {var title = _ref.title,subTitle = _ref.subTitle,menus = _ref.menus,cancelText = _ref.cancelText,themeColor = _ref.themeColor,dark = _ref.dark,success = _ref.success,fail = _ref.fail;\n  var lines = Math.ceil(menus.length / 4);\n  var titleHeight = uni.upx2px(60) + (subTitle ? uni.upx2px(20) : 0);\n  var footerHeight = uni.upx2px(100);\n  var height = uni.upx2px(lines * 150) + footerHeight + titleHeight;\n  var footerTop = height - footerHeight;\n\n  var titleSize = uni.upx2px(28);\n  var textSize = uni.upx2px(22);\n\n  var mode = dark ? 'dark' : 'light';\n  var bgColor = _color.default[mode].bg;\n  var lineColor = _color.default[mode].gap;\n  var titleColor = themeColor || _color.default[mode].title;\n  var textColor = _color.default[mode].text_2;\n\n  var mask = (0, _mask.default)();\n  var popup = new plus.nativeObj.View('popup', {\n    width: '100%',\n    height: height + 'px',\n    bottom: -height + 'px',\n    left: '0' });\n\n  var draws = [{\n    tag: 'rect',\n    id: 'bg',\n    rectStyles: {\n      color: bgColor },\n\n    position: {\n      top: 0 + 'px',\n      left: 0 + 'px',\n      width: '100%',\n      height: '100%' } },\n\n  {\n    tag: 'font',\n    id: 'title',\n    text: title || '操作面板',\n    textStyles: {\n      color: titleColor,\n      size: titleSize + 'px',\n      overflow: 'ellipsis',\n      align: 'middle',\n      verticalAlign: 'middle' },\n\n    position: {\n      top: 0 + 'px',\n      left: '5%',\n      width: '90%',\n      height: titleHeight + 'px' } },\n\n  {\n    tag: 'font',\n    id: 'subTitle',\n    text: subTitle || '',\n    textStyles: {\n      color: textColor,\n      size: textSize + 'px',\n      overflow: 'ellipsis',\n      align: 'middle',\n      verticalAlign: 'middle' },\n\n    position: {\n      top: titleSize + 5 + 'px',\n      left: '5%',\n      width: '90%',\n      height: titleHeight + 'px' } },\n\n  {\n    tag: 'rect',\n    id: 'h-line',\n    rectStyles: {\n      color: lineColor },\n\n    position: {\n      top: footerTop + 'px',\n      left: 0,\n      width: '100%',\n      height: 1 + 'px' } },\n\n  {\n    tag: 'font',\n    id: 'cancelText',\n    text: cancelText || '关闭面板',\n    textStyles: {\n      color: titleColor,\n      size: titleSize + 'px',\n      align: 'middle',\n      verticalAlign: 'middle' },\n\n    position: {\n      top: footerTop + 'px',\n      left: 0,\n      width: '100%',\n      height: footerHeight + 'px' } }];\n\n\n  var drawMenuIcon = menus.map(function (menu, key) {\n    return {\n      tag: 'font',\n      id: menu.id,\n      text: menu.icon,\n      textStyles: {\n        family: menu.family,\n        fontSrc: menu.fontSrc,\n        color: menu.color,\n        size: menu.size + 'px',\n        align: 'middle',\n        verticalAlign: 'middle' },\n\n      position: {\n        top: titleHeight + 'px',\n        left: key * 25 + '%',\n        width: '25%',\n        height: height - footerHeight - titleHeight - 10 + 'px' } };\n\n\n  });\n  var drawMenuTitle = menus.map(function (menu, key) {\n    return {\n      tag: 'font',\n      id: menu.id + '_title',\n      text: menu.title,\n      textStyles: {\n        color: titleColor,\n        size: titleSize + 'px',\n        align: 'middle',\n        verticalAlign: 'bottom' },\n\n      position: {\n        top: titleHeight + 'px',\n        left: key * 25 + '%',\n        width: '25%',\n        height: height - footerHeight - titleHeight - 10 + 'px' } };\n\n\n  });\n  popup.draw(draws.concat(drawMenuIcon.concat(drawMenuTitle)));\n\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var backs = page.$vm.$options.onBackPress; //记录下当前页面有可能设置的返回事件监听方法，用于还原\n  page.$vm.$options.onBackPress = new Array(0);\n  page.$vm.$options.onBackPress.push(function (e) {\n    complete(false);\n    return true;\n  });\n  var complete = function complete(bol, data) {\n    try {\n      mask.close();\n      popup.close();\n      mask = null;\n      popup = null;\n      success ? success({\n        confirm: bol,\n        data: data || null }) :\n      null;\n      page.$vm.$options.onBackPress = backs; //还原当前页面的返回事件监听\n    } catch (e) {\n      fail ? fail(e) : null;\n    }\n  };\n  popup.addEventListener(\"click\", function (e) {\n    try {\n      var menuItems = Object.keys(menus).map(function (key) {\n        return {\n          top: titleHeight,\n          bottom: titleHeight + (height - footerHeight - titleHeight - 10),\n          left: key * (windowWidth * 0.25),\n          right: (parseInt(key) + 1) * (windowWidth * 0.25) };\n\n      });\n      menuItems.forEach(function (item, key) {\n        if (e.clientX >= item.left && e.clientX <= item.right && e.clientY >= item.top && e.clientY <= item.bottom) {\n          complete(true, {\n            id: menus[key].id,\n            key: key });\n\n        }\n      });\n      var cancel = {\n        top: footerTop,\n        bottom: footerTop + footerHeight,\n        left: 0,\n        right: windowWidth };\n\n      if (e.clientX >= cancel.left && e.clientX <= cancel.right && e.clientY >= cancel.top && e.clientY <= cancel.bottom) {\n        complete(false);\n      }\n    } catch (e) {\n      complete(false);\n    }\n  });\n  mask.addEventListener(\"click\", function (e) {\n    try {\n      complete(false);\n    } catch (e) {\n      complete(false);\n    }\n  });\n  mask.show();\n  popup.show();\n  var bottom = 0;\n  var show = function show() {\n    setTimeout(function () {\n      bottom += 10;\n      if (bottom >= height) {\n        bottom = height;\n        popup.setStyle({\n          bottom: bottom - height + 'px' });\n\n      } else {\n        popup.setStyle({\n          bottom: bottom - height + 'px' });\n\n        show();\n      }\n    }, 10);\n  };\n  show();\n}var _default =\n\npanel;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vanNfc2RrL3liLW5hdGl2ZS11aS9wYW5lbC5qcyJdLCJuYW1lcyI6WyJ3aW5kb3dXaWR0aCIsInVuaSIsImdldFN5c3RlbUluZm9TeW5jIiwic2NyZWVuV2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJzY3JlZW5IZWlnaHQiLCJwYW5lbCIsInRpdGxlIiwic3ViVGl0bGUiLCJtZW51cyIsImNhbmNlbFRleHQiLCJ0aGVtZUNvbG9yIiwiZGFyayIsInN1Y2Nlc3MiLCJmYWlsIiwibGluZXMiLCJNYXRoIiwiY2VpbCIsImxlbmd0aCIsInRpdGxlSGVpZ2h0IiwidXB4MnB4IiwiZm9vdGVySGVpZ2h0IiwiaGVpZ2h0IiwiZm9vdGVyVG9wIiwidGl0bGVTaXplIiwidGV4dFNpemUiLCJtb2RlIiwiYmdDb2xvciIsImNvbG9yIiwiYmciLCJsaW5lQ29sb3IiLCJnYXAiLCJ0aXRsZUNvbG9yIiwidGV4dENvbG9yIiwidGV4dF8yIiwibWFzayIsInBvcHVwIiwicGx1cyIsIm5hdGl2ZU9iaiIsIlZpZXciLCJ3aWR0aCIsImJvdHRvbSIsImxlZnQiLCJkcmF3cyIsInRhZyIsImlkIiwicmVjdFN0eWxlcyIsInBvc2l0aW9uIiwidG9wIiwidGV4dCIsInRleHRTdHlsZXMiLCJzaXplIiwib3ZlcmZsb3ciLCJhbGlnbiIsInZlcnRpY2FsQWxpZ24iLCJkcmF3TWVudUljb24iLCJtYXAiLCJtZW51Iiwia2V5IiwiaWNvbiIsImZhbWlseSIsImZvbnRTcmMiLCJkcmF3TWVudVRpdGxlIiwiZHJhdyIsImNvbmNhdCIsInBhZ2VzIiwiZ2V0Q3VycmVudFBhZ2VzIiwicGFnZSIsImJhY2tzIiwiJHZtIiwiJG9wdGlvbnMiLCJvbkJhY2tQcmVzcyIsIkFycmF5IiwicHVzaCIsImUiLCJjb21wbGV0ZSIsImJvbCIsImRhdGEiLCJjbG9zZSIsImNvbmZpcm0iLCJhZGRFdmVudExpc3RlbmVyIiwibWVudUl0ZW1zIiwiT2JqZWN0Iiwia2V5cyIsInJpZ2h0IiwicGFyc2VJbnQiLCJmb3JFYWNoIiwiaXRlbSIsImNsaWVudFgiLCJjbGllbnRZIiwiY2FuY2VsIiwic2hvdyIsInNldFRpbWVvdXQiLCJzZXRTdHlsZSJdLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBLCtFLDZGQUhBLElBQU1BLFdBQVcsR0FBR0MsR0FBRyxDQUFDQyxpQkFBSixHQUF3QkMsV0FBNUMsQ0FDQSxJQUFNQyxZQUFZLEdBQUdILEdBQUcsQ0FBQ0MsaUJBQUosR0FBd0JHLFlBQTdDOzs7O0FBTU8sU0FBU0MsS0FBVCxPQUF1RixLQUF0RUMsS0FBc0UsUUFBdEVBLEtBQXNFLENBQS9EQyxRQUErRCxRQUEvREEsUUFBK0QsQ0FBckRDLEtBQXFELFFBQXJEQSxLQUFxRCxDQUE5Q0MsVUFBOEMsUUFBOUNBLFVBQThDLENBQWxDQyxVQUFrQyxRQUFsQ0EsVUFBa0MsQ0FBdEJDLElBQXNCLFFBQXRCQSxJQUFzQixDQUFoQkMsT0FBZ0IsUUFBaEJBLE9BQWdCLENBQVBDLElBQU8sUUFBUEEsSUFBTztBQUM3RixNQUFNQyxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsSUFBTCxDQUFVUixLQUFLLENBQUNTLE1BQU4sR0FBZSxDQUF6QixDQUFkO0FBQ0EsTUFBTUMsV0FBVyxHQUFHbEIsR0FBRyxDQUFDbUIsTUFBSixDQUFXLEVBQVgsS0FBa0JaLFFBQVEsR0FBR1AsR0FBRyxDQUFDbUIsTUFBSixDQUFXLEVBQVgsQ0FBSCxHQUFvQixDQUE5QyxDQUFwQjtBQUNBLE1BQU1DLFlBQVksR0FBR3BCLEdBQUcsQ0FBQ21CLE1BQUosQ0FBVyxHQUFYLENBQXJCO0FBQ0EsTUFBTUUsTUFBTSxHQUFHckIsR0FBRyxDQUFDbUIsTUFBSixDQUFZTCxLQUFLLEdBQUcsR0FBcEIsSUFBNEJNLFlBQTVCLEdBQTJDRixXQUExRDtBQUNBLE1BQU1JLFNBQVMsR0FBR0QsTUFBTSxHQUFHRCxZQUEzQjs7QUFFQSxNQUFNRyxTQUFTLEdBQUd2QixHQUFHLENBQUNtQixNQUFKLENBQVcsRUFBWCxDQUFsQjtBQUNBLE1BQU1LLFFBQVEsR0FB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RUFBK0IsVUFBQ04sQ0FBRCxFQUFPO0FBQ3JDLFFBQUc7QUFDRkMsY0FBUSxDQUFDLEtBQUQsQ0FBUjtBQUNBLEtBRkQsQ0FFRSxPQUFNRCxDQUFOLEVBQVE7QUFDVEMsY0FBUSxDQUFDLEtBQUQsQ0FBUjtBQUNBO0FBQ0QsR0FORDtBQU9BeEMsTUFBSSxDQUFDd0QsSUFBTDtBQUNBdkQsT0FBSyxDQUFDdUQsSUFBTjtBQUNBLE1BQUlsRCxNQUFNLEdBQUcsQ0FBYjtBQUNBLE1BQU1rRCxJQUFJLEdBQUcsU0FBUEEsSUFBTyxHQUFZO0FBQ3hCQyxjQUFVLENBQUMsWUFBWTtBQUN0Qm5ELFlBQU0sSUFBSSxFQUFWO0FBQ0EsVUFBS0EsTUFBTSxJQUFJbkIsTUFBZixFQUF3QjtBQUN2Qm1CLGNBQU0sR0FBR25CLE1BQVQ7QUFDQWMsYUFBSyxDQUFDeUQsUUFBTixDQUFlO0FBQ2RwRCxnQkFBTSxFQUFHQSxNQUFNLEdBQUduQixNQUFWLEdBQW9CLElBRGQsRUFBZjs7QUFHQSxPQUxELE1BS087QUFDTmMsYUFBSyxDQUFDeUQsUUFBTixDQUFlO0FBQ2RwRCxnQkFBTSxFQUFHQSxNQUFNLEdBQUduQixNQUFWLEdBQW9CLElBRGQsRUFBZjs7QUFHQXFFLFlBQUk7QUFDSjtBQUNELEtBYlMsRUFhUCxFQWJPLENBQVY7QUFjQSxHQWZEO0FBZ0JBQSxNQUFJO0FBQ0osQzs7QUFFY3JGLEsiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB3aW5kb3dXaWR0aCA9IHVuaS5nZXRTeXN0ZW1JbmZvU3luYygpLnNjcmVlbldpZHRoXHJcbmNvbnN0IHdpbmRvd0hlaWdodCA9IHVuaS5nZXRTeXN0ZW1JbmZvU3luYygpLnNjcmVlbkhlaWdodFxyXG5pbXBvcnQgY3JlYXRlTWFza3MgZnJvbSAnLi9tYXNrLmpzJ1xyXG5pbXBvcnQgY29sb3IgZnJvbSAnLi9jb2xvci5qcydcclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhbmVsICh7dGl0bGUsIHN1YlRpdGxlLCBtZW51cywgY2FuY2VsVGV4dCwgdGhlbWVDb2xvciwgZGFyaywgc3VjY2VzcywgZmFpbH0pIHtcclxuXHRjb25zdCBsaW5lcyA9IE1hdGguY2VpbChtZW51cy5sZW5ndGggLyA0KVxyXG5cdGNvbnN0IHRpdGxlSGVpZ2h0ID0gdW5pLnVweDJweCg2MCkgKyAoc3ViVGl0bGUgPyB1bmkudXB4MnB4KDIwKSA6IDApXHJcblx0Y29uc3QgZm9vdGVySGVpZ2h0ID0gdW5pLnVweDJweCgxMDApXHJcblx0Y29uc3QgaGVpZ2h0ID0gdW5pLnVweDJweCgobGluZXMgKiAxNTApKSArIGZvb3RlckhlaWdodCArIHRpdGxlSGVpZ2h0XHJcblx0Y29uc3QgZm9vdGVyVG9wID0gaGVpZ2h0IC0gZm9vdGVySGVpZ2h0XHJcblx0XHJcblx0Y29uc3QgdGl0bGVTaXplID0gdW5pLnVweDJweCgyOClcclxuXHRjb25zdCB0ZXh0U2l6ZSA9IHVuaS51cHgycHgoMjIpXHJcblx0XHJcblx0Y29uc3QgbW9kZSA9IGRhcmsgPyAnZGFyaycgOiAnbGlnaHQnXHJcblx0Y29uc3QgYmdDb2xvciA9IGNvbG9yW21vZGVdLmJnXHJcblx0Y29uc3QgbGluZUNvbG9yID0gY29sb3JbbW9kZV0uZ2FwXHJcblx0Y29uc3QgdGl0bGVDb2xvciA9IHRoZW1lQ29sb3IgfHwgY29sb3JbbW9kZV0udGl0bGVcclxuXHRjb25zdCB0ZXh0Q29sb3IgPSBjb2xvclttb2RlXS50ZXh0XzJcclxuXHRcclxuXHRsZXQgbWFzayA9IGNyZWF0ZU1hc2tzKClcclxuXHRsZXQgcG9wdXAgPSBuZXcgcGx1cy5uYXRpdmVPYmouVmlldygncG9wdXAnLCB7XHJcblx0XHR3aWR0aDogJzEwMCUnLFxyXG5cdFx0aGVpZ2h0OiBoZWlnaHQgKyAncHgnLFxyXG5cdFx0Ym90dG9tOiAtaGVpZ2h0ICsgJ3B4JyxcclxuXHRcdGxlZnQ6ICcwJ1xyXG5cdH0pO1xyXG5cdGxldCBkcmF3cyA9IFt7XHJcblx0XHR0YWc6J3JlY3QnLFxyXG5cdFx0aWQ6J2JnJyxcclxuXHRcdHJlY3RTdHlsZXM6IHtcclxuXHRcdFx0Y29sb3I6IGJnQ29sb3JcclxuXHRcdH0sXHJcblx0XHRwb3NpdGlvbjoge1xyXG5cdFx0XHR0b3A6IDAgKyAncHgnLFxyXG5cdFx0XHRsZWZ0OiAwICsgJ3B4JyxcclxuXHRcdFx0d2lkdGg6ICcxMDAlJyxcclxuXHRcdFx0aGVpZ2h0OiAnMTAwJScsXHJcblx0XHR9XHJcblx0fSx7XHJcblx0XHR0YWc6J2ZvbnQnLFxyXG5cdFx0aWQ6J3RpdGxlJyxcclxuXHRcdHRleHQ6IHRpdGxlIHx8ICfmk43kvZzpnaLmnb8nLFxyXG5cdFx0dGV4dFN0eWxlczoge1xyXG5cdFx0XHRjb2xvcjogdGl0bGVDb2xvcixcclxuXHRcdFx0c2l6ZTogdGl0bGVTaXplICsgJ3B4JyxcclxuXHRcdFx0b3ZlcmZsb3c6ICdlbGxpcHNpcycsXHJcblx0XHRcdGFsaWduOiAnbWlkZGxlJyxcclxuXHRcdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZSdcclxuXHRcdH0sXHJcblx0XHRwb3NpdGlvbjoge1xyXG5cdFx0XHR0b3A6IDAgKyAncHgnLFxyXG5cdFx0XHRsZWZ0OiAnNSUnLFxyXG5cdFx0XHR3aWR0aDogJzkwJScsXHJcblx0XHRcdGhlaWdodDogdGl0bGVIZWlnaHQgKyAncHgnLFxyXG5cdFx0fVxyXG5cdH0se1xyXG5cdFx0dGFnOidmb250JyxcclxuXHRcdGlkOidzdWJUaXRsZScsXHJcblx0XHR0ZXh0OiBzdWJUaXRsZSB8fCAnJyxcclxuXHRcdHRleHRTdHlsZXM6IHtcclxuXHRcdFx0Y29sb3I6IHRleHRDb2xvcixcclxuXHRcdFx0c2l6ZTogdGV4dFNpemUgKyAncHgnLFxyXG5cdFx0XHRvdmVyZmxvdzogJ2VsbGlwc2lzJyxcclxuXHRcdFx0YWxpZ246ICdtaWRkbGUnLFxyXG5cdFx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xyXG5cdFx0fSxcclxuXHRcdHBvc2l0aW9uOiB7XHJcblx0XHRcdHRvcDogKHRpdGxlU2l6ZSArIDUpICsgJ3B4JyxcclxuXHRcdFx0bGVmdDogJzUlJyxcclxuXHRcdFx0d2lkdGg6ICc5MCUnLFxyXG5cdFx0XHRoZWlnaHQ6IHRpdGxlSGVpZ2h0ICsgJ3B4JyxcclxuXHRcdH1cclxuXHR9LHtcclxuXHRcdHRhZzoncmVjdCcsXHJcblx0XHRpZDonaC1saW5lJyxcclxuXHRcdHJlY3RTdHlsZXM6IHtcclxuXHRcdFx0Y29sb3I6IGxpbmVDb2xvclxyXG5cdFx0fSxcclxuXHRcdHBvc2l0aW9uOiB7XHJcblx0XHRcdHRvcDogZm9vdGVyVG9wICsgJ3B4JyxcclxuXHRcdFx0bGVmdDogMCxcclxuXHRcdFx0d2lkdGg6ICcxMDAlJyxcclxuXHRcdFx0aGVpZ2h0OiAxICsgJ3B4JyxcclxuXHRcdH1cclxuXHR9LHtcclxuXHRcdHRhZzonZm9udCcsXHJcblx0XHRpZDogJ2NhbmNlbFRleHQnLFxyXG5cdFx0dGV4dDogY2FuY2VsVGV4dCB8fCAn5YWz6Zet6Z2i5p2/JyxcclxuXHRcdHRleHRTdHlsZXM6IHtcclxuXHRcdFx0Y29sb3I6IHRpdGxlQ29sb3IsXHJcblx0XHRcdHNpemU6IHRpdGxlU2l6ZSArICdweCcsXHJcblx0XHRcdGFsaWduOiAnbWlkZGxlJyxcclxuXHRcdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZSdcclxuXHRcdH0sXHJcblx0XHRwb3NpdGlvbjoge1xyXG5cdFx0XHR0b3A6IGZvb3RlclRvcCArICdweCcsXHJcblx0XHRcdGxlZnQ6IDAsXHJcblx0XHRcdHdpZHRoOiAnMTAwJScsXHJcblx0XHRcdGhlaWdodDogZm9vdGVySGVpZ2h0ICsgJ3B4JyxcclxuXHRcdH1cclxuXHR9XVxyXG5cdGNvbnN0IGRyYXdNZW51SWNvbiA9IG1lbnVzLm1hcCgobWVudSwga2V5KSA9PiB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0YWc6J2ZvbnQnLFxyXG5cdFx0XHRpZDogbWVudS5pZCxcclxuXHRcdFx0dGV4dDogbWVudS5pY29uLFxyXG5cdFx0XHR0ZXh0U3R5bGVzOiB7XHJcblx0XHRcdFx0ZmFtaWx5OiBtZW51LmZhbWlseSxcclxuXHRcdFx0XHRmb250U3JjOiBtZW51LmZvbnRTcmMsXHJcblx0XHRcdFx0Y29sb3I6IG1lbnUuY29sb3IsXHJcblx0XHRcdFx0c2l6ZTogbWVudS5zaXplICsgJ3B4JyxcclxuXHRcdFx0XHRhbGlnbjogJ21pZGRsZScsXHJcblx0XHRcdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZSdcclxuXHRcdFx0fSxcclxuXHRcdFx0cG9zaXRpb246IHtcclxuXHRcdFx0XHR0b3A6IHRpdGxlSGVpZ2h0ICsgJ3B4JyxcclxuXHRcdFx0XHRsZWZ0OiAoa2V5ICogMjUpICsgJyUnLFxyXG5cdFx0XHRcdHdpZHRoOiAnMjUlJyxcclxuXHRcdFx0XHRoZWlnaHQ6IChoZWlnaHQgLSBmb290ZXJIZWlnaHQgLSB0aXRsZUhlaWdodCAtIDEwKSArICdweCcsXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KVxyXG5cdGNvbnN0IGRyYXdNZW51VGl0bGUgPSBtZW51cy5tYXAoKG1lbnUsIGtleSkgPT4ge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dGFnOidmb250JyxcclxuXHRcdFx0aWQ6IG1lbnUuaWQgKyAnX3RpdGxlJyxcclxuXHRcdFx0dGV4dDogbWVudS50aXRsZSxcclxuXHRcdFx0dGV4dFN0eWxlczoge1xyXG5cdFx0XHRcdGNvbG9yOiB0aXRsZUNvbG9yLFxyXG5cdFx0XHRcdHNpemU6IHRpdGxlU2l6ZSArICdweCcsXHJcblx0XHRcdFx0YWxpZ246ICdtaWRkbGUnLFxyXG5cdFx0XHRcdHZlcnRpY2FsQWxpZ246ICdib3R0b20nXHJcblx0XHRcdH0sXHJcblx0XHRcdHBvc2l0aW9uOiB7XHJcblx0XHRcdFx0dG9wOiB0aXRsZUhlaWdodCArICdweCcsXHJcblx0XHRcdFx0bGVmdDogKGtleSAqIDI1KSArICclJyxcclxuXHRcdFx0XHR3aWR0aDogJzI1JScsXHJcblx0XHRcdFx0aGVpZ2h0OiAoaGVpZ2h0IC0gZm9vdGVySGVpZ2h0IC0gdGl0bGVIZWlnaHQgLSAxMCkgKyAncHgnLFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSlcclxuXHRwb3B1cC5kcmF3KGRyYXdzLmNvbmNhdChkcmF3TWVudUljb24uY29uY2F0KGRyYXdNZW51VGl0bGUpKSlcclxuXHRcclxuXHRjb25zdCBwYWdlcyA9IGdldEN1cnJlbnRQYWdlcygpXHJcblx0Y29uc3QgcGFnZSA9IHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdXHJcblx0Y29uc3QgYmFja3MgPSBwYWdlLiR2bS4kb3B0aW9ucy5vbkJhY2tQcmVzcy8v6K6w5b2V5LiL5b2T5YmN6aG16Z2i5pyJ5Y+v6IO96K6+572u55qE6L+U5Zue5LqL5Lu255uR5ZCs5pa55rOV77yM55So5LqO6L+Y5Y6fXHJcblx0cGFnZS4kdm0uJG9wdGlvbnMub25CYWNrUHJlc3MgPSBuZXcgQXJyYXkoMClcclxuXHRwYWdlLiR2bS4kb3B0aW9ucy5vbkJhY2tQcmVzcy5wdXNoKChlKSA9PiB7XHJcblx0XHRjb21wbGV0ZShmYWxzZSlcclxuXHRcdHJldHVybiB0cnVlXHJcblx0fSlcclxuXHRjb25zdCBjb21wbGV0ZSA9IGZ1bmN0aW9uIChib2wsIGRhdGEpIHtcclxuXHRcdHRyeXtcclxuXHRcdFx0bWFzay5jbG9zZSgpXHJcblx0XHRcdHBvcHVwLmNsb3NlKClcclxuXHRcdFx0bWFzayA9IG51bGxcclxuXHRcdFx0cG9wdXAgPSBudWxsXHJcblx0XHRcdHN1Y2Nlc3MgPyBzdWNjZXNzKHtcclxuXHRcdFx0XHRjb25maXJtOiBib2wsXHJcblx0XHRcdFx0ZGF0YTogZGF0YSB8fCBudWxsXHJcblx0XHRcdH0pIDogbnVsbFxyXG5cdFx0XHRwYWdlLiR2bS4kb3B0aW9ucy5vbkJhY2tQcmVzcyA9IGJhY2tzLy/ov5jljp/lvZPliY3pobXpnaLnmoTov5Tlm57kuovku7bnm5HlkKxcclxuXHRcdH0gY2F0Y2goZSl7XHJcblx0XHRcdGZhaWwgPyBmYWlsKGUpIDogbnVsbFxyXG5cdFx0fVxyXG5cdH1cclxuXHRwb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuXHRcdHRyeXtcclxuXHRcdFx0Y29uc3QgbWVudUl0ZW1zID0gT2JqZWN0LmtleXMobWVudXMpLm1hcChrZXkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHR0b3A6IHRpdGxlSGVpZ2h0LFxyXG5cdFx0XHRcdFx0Ym90dG9tOiB0aXRsZUhlaWdodCArIChoZWlnaHQgLSBmb290ZXJIZWlnaHQgLSB0aXRsZUhlaWdodCAtIDEwKSxcclxuXHRcdFx0XHRcdGxlZnQ6IGtleSAqICh3aW5kb3dXaWR0aCAqIDAuMjUpLFxyXG5cdFx0XHRcdFx0cmlnaHQ6IChwYXJzZUludChrZXkpICsgMSkgKiAod2luZG93V2lkdGggKiAwLjI1KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdFx0bWVudUl0ZW1zLmZvckVhY2goKGl0ZW0sIGtleSkgPT4ge1xyXG5cdFx0XHRcdGlmICggZS5jbGllbnRYID49IGl0ZW0ubGVmdCAmJiBlLmNsaWVudFggPD0gaXRlbS5yaWdodCAmJiBlLmNsaWVudFkgPj0gaXRlbS50b3AgJiYgZS5jbGllbnRZIDw9IGl0ZW0uYm90dG9tICkge1xyXG5cdFx0XHRcdFx0Y29tcGxldGUodHJ1ZSwge1xyXG5cdFx0XHRcdFx0XHRpZDogbWVudXNba2V5XS5pZCxcclxuXHRcdFx0XHRcdFx0a2V5OiBrZXlcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHRjb25zdCBjYW5jZWwgPXtcclxuXHRcdFx0XHR0b3A6IGZvb3RlclRvcCxcclxuXHRcdFx0XHRib3R0b206IGZvb3RlclRvcCArIGZvb3RlckhlaWdodCxcclxuXHRcdFx0XHRsZWZ0OiAwLFxyXG5cdFx0XHRcdHJpZ2h0OiB3aW5kb3dXaWR0aFxyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggZS5jbGllbnRYID49IGNhbmNlbC5sZWZ0ICYmIGUuY2xpZW50WCA8PSBjYW5jZWwucmlnaHQgJiYgZS5jbGllbnRZID49IGNhbmNlbC50b3AgJiYgZS5jbGllbnRZIDw9IGNhbmNlbC5ib3R0b20gKSB7XHJcblx0XHRcdFx0Y29tcGxldGUoZmFsc2UpXHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2goZSl7XHJcblx0XHRcdGNvbXBsZXRlKGZhbHNlKVxyXG5cdFx0fVxyXG5cdH0pXHJcblx0bWFzay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuXHRcdHRyeXtcclxuXHRcdFx0Y29tcGxldGUoZmFsc2UpXHJcblx0XHR9IGNhdGNoKGUpe1xyXG5cdFx0XHRjb21wbGV0ZShmYWxzZSlcclxuXHRcdH1cclxuXHR9KVxyXG5cdG1hc2suc2hvdygpXHJcblx0cG9wdXAuc2hvdygpXHJcblx0bGV0IGJvdHRvbSA9IDBcclxuXHRjb25zdCBzaG93ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGJvdHRvbSArPSAxMFxyXG5cdFx0XHRpZiAoIGJvdHRvbSA+PSBoZWlnaHQgKSB7XHJcblx0XHRcdFx0Ym90dG9tID0gaGVpZ2h0XHJcblx0XHRcdFx0cG9wdXAuc2V0U3R5bGUoe1xyXG5cdFx0XHRcdFx0Ym90dG9tOiAoYm90dG9tIC0gaGVpZ2h0KSArICdweCdcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHBvcHVwLnNldFN0eWxlKHtcclxuXHRcdFx0XHRcdGJvdHRvbTogKGJvdHRvbSAtIGhlaWdodCkgKyAncHgnXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHRzaG93KClcclxuXHRcdFx0fVxyXG5cdFx0fSwgMTApXHJcblx0fVxyXG5cdHNob3coKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwYW5lbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/*!*******************************************************************!*\
  !*** G:/my-project/uni-polymerize/js_sdk/yb-native-ui/toolbar.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.toolbar = toolbar;exports.default = void 0;var _mask = _interopRequireDefault(__webpack_require__(/*! ./mask.js */ 35));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n\n\nfunction toolbar(_ref) {var menus = _ref.menus,cancelText = _ref.cancelText,dark = _ref.dark,success = _ref.success,fail = _ref.fail;\n  var system = uni.getSystemInfoSync();\n  var windowWidth = system.windowWidth;\n  var windowHeight = system.screenHeight;\n  var height = windowHeight - uni.upx2px(200);\n  var itemHeight = uni.upx2px(50);\n  var lineItemLength = Math.floor(height / itemHeight); //每一列最多排多少项\n  var width = Math.ceil(menus.length / lineItemLength) * uni.upx2px(140);\n\n  var textSize = uni.upx2px(26);\n\n  var bgColor = dark ? '#3F3F3F' : '#FFFFFF';\n  var lineColor = dark ? '#191919' : '#c5c5c5';\n  var textColor = dark ? '#f4f7f5' : '#333333';\n\n  var mask = (0, _mask.default)(0);\n\n  var popup = new plus.nativeObj.View('toolbar', {\n    width: width + 'px',\n    height: height + 'px',\n    top: windowHeight / 2 - height / 2 + 'px',\n    left: windowWidth - width - uni.upx2px(20) + 'px' });\n\n  var draws = [{\n    tag: 'rect',\n    id: 'bg',\n    rectStyles: {\n      color: bgColor,\n      radius: uni.upx2px(20) + 'px',\n      borderWidth: '1px',\n      borderColor: lineColor },\n\n    position: {\n      top: 0 + 'px',\n      left: 0 + 'px',\n      width: width - +'px',\n      height: height + 'px' } }];\n\n\n  popup.draw(draws);\n\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var backs = page.$vm.$options.onBackPress; //记录下当前页面有可能设置的返回事件监听方法，用于还原\n  page.$vm.$options.onBackPress = new Array(0);\n  page.$vm.$options.onBackPress.push(function (e) {\n    complete(false);\n    return true;\n  });\n  var complete = function complete(bol) {\n    try {\n      mask.close();\n      popup.close();\n      success({\n        confirm: bol });\n\n      page.$vm.$options.onBackPress = backs; //还原当前页面的返回事件监听\n    } catch (e) {\n      fail(e);\n    }\n  };\n  mask.show();\n  popup.show();\n}var _default =\n\ntoolbar;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vanNfc2RrL3liLW5hdGl2ZS11aS90b29sYmFyLmpzIl0sIm5hbWVzIjpbInRvb2xiYXIiLCJtZW51cyIsImNhbmNlbFRleHQiLCJkYXJrIiwic3VjY2VzcyIsImZhaWwiLCJzeXN0ZW0iLCJ1bmkiLCJnZXRTeXN0ZW1JbmZvU3luYyIsIndpbmRvd1dpZHRoIiwid2luZG93SGVpZ2h0Iiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwidXB4MnB4IiwiaXRlbUhlaWdodCIsImxpbmVJdGVtTGVuZ3RoIiwiTWF0aCIsImZsb29yIiwid2lkdGgiLCJjZWlsIiwibGVuZ3RoIiwidGV4dFNpemUiLCJiZ0NvbG9yIiwibGluZUNvbG9yIiwidGV4dENvbG9yIiwibWFzayIsInBvcHVwIiwicGx1cyIsIm5hdGl2ZU9iaiIsIlZpZXciLCJ0b3AiLCJsZWZ0IiwiZHJhd3MiLCJ0YWciLCJpZCIsInJlY3RTdHlsZXMiLCJjb2xvciIsInJhZGl1cyIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJwb3NpdGlvbiIsImRyYXciLCJwYWdlcyIsImdldEN1cnJlbnRQYWdlcyIsInBhZ2UiLCJiYWNrcyIsIiR2bSIsIiRvcHRpb25zIiwib25CYWNrUHJlc3MiLCJBcnJheSIsInB1c2giLCJlIiwiY29tcGxldGUiLCJib2wiLCJjbG9zZSIsImNvbmZpcm0iLCJzaG93Il0sIm1hcHBpbmdzIjoiaUhBQUEsNkU7Ozs7QUFJTyxTQUFTQSxPQUFULE9BQTRELEtBQXpDQyxLQUF5QyxRQUF6Q0EsS0FBeUMsQ0FBbENDLFVBQWtDLFFBQWxDQSxVQUFrQyxDQUF0QkMsSUFBc0IsUUFBdEJBLElBQXNCLENBQWhCQyxPQUFnQixRQUFoQkEsT0FBZ0IsQ0FBUEMsSUFBTyxRQUFQQSxJQUFPO0FBQ2xFLE1BQU1DLE1BQU0sR0FBR0MsR0FBRyxDQUFDQyxpQkFBSixFQUFmO0FBQ0EsTUFBTUMsV0FBVyxHQUFHSCxNQUFNLENBQUNHLFdBQTNCO0FBQ0EsTUFBTUMsWUFBWSxH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LENBQUM7QUFDUG1ELGVBQU8sRUFBRUYsR0FERixFQUFELENBQVA7O0FBR0FULFVBQUksQ0FBQ0UsR0FBTCxDQUFTQyxRQUFULENBQWtCQyxXQUFsQixHQUFnQ0gsS0FBaEMsQ0FORSxDQU1tQztBQUNyQyxLQVBELENBT0UsT0FBTU0sQ0FBTixFQUFRO0FBQ1Q5QyxVQUFJLENBQUM4QyxDQUFELENBQUo7QUFDQTtBQUNELEdBWEQ7QUFZQTFCLE1BQUksQ0FBQytCLElBQUw7QUFDQTlCLE9BQUssQ0FBQzhCLElBQU47QUFDQSxDOztBQUVjeEQsTyIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVNYXNrcyBmcm9tICcuL21hc2suanMnXHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b29sYmFyICh7bWVudXMsIGNhbmNlbFRleHQsIGRhcmssIHN1Y2Nlc3MsIGZhaWx9KSB7XHJcblx0Y29uc3Qgc3lzdGVtID0gdW5pLmdldFN5c3RlbUluZm9TeW5jKCk7XHJcblx0Y29uc3Qgd2luZG93V2lkdGggPSBzeXN0ZW0ud2luZG93V2lkdGhcclxuXHRjb25zdCB3aW5kb3dIZWlnaHQgPSBzeXN0ZW0uc2NyZWVuSGVpZ2h0XHJcblx0Y29uc3QgaGVpZ2h0ID0gd2luZG93SGVpZ2h0IC0gdW5pLnVweDJweCgyMDApXHJcblx0Y29uc3QgaXRlbUhlaWdodCA9IHVuaS51cHgycHgoNTApXHJcblx0Y29uc3QgbGluZUl0ZW1MZW5ndGggPSBNYXRoLmZsb29yKGhlaWdodCAvIGl0ZW1IZWlnaHQpIC8v5q+P5LiA5YiX5pyA5aSa5o6S5aSa5bCR6aG5XHJcblx0Y29uc3Qgd2lkdGggPSBNYXRoLmNlaWwobWVudXMubGVuZ3RoIC8gbGluZUl0ZW1MZW5ndGgpICogdW5pLnVweDJweCgxNDApXHJcblx0XHJcblx0Y29uc3QgdGV4dFNpemUgPSB1bmkudXB4MnB4KDI2KVxyXG5cdFxyXG5cdGNvbnN0IGJnQ29sb3IgPSBkYXJrID8gJyMzRjNGM0YnIDogJyNGRkZGRkYnXHJcblx0Y29uc3QgbGluZUNvbG9yID0gZGFyayA/ICcjMTkxOTE5JyA6ICcjYzVjNWM1J1xyXG5cdGNvbnN0IHRleHRDb2xvciA9IGRhcmsgPyAnI2Y0ZjdmNScgOiAnIzMzMzMzMydcclxuXHRcclxuXHRjb25zdCBtYXNrID0gY3JlYXRlTWFza3MoMClcclxuXHRcclxuXHRjb25zdCBwb3B1cCA9IG5ldyBwbHVzLm5hdGl2ZU9iai5WaWV3KCd0b29sYmFyJywge1xyXG5cdFx0d2lkdGg6IHdpZHRoICsgJ3B4JyxcclxuXHRcdGhlaWdodDogaGVpZ2h0ICsgJ3B4JyxcclxuXHRcdHRvcDogKCh3aW5kb3dIZWlnaHQgLyAyKSAtIChoZWlnaHQgLyAyKSkgKyAncHgnLFxyXG5cdFx0bGVmdDogKHdpbmRvd1dpZHRoIC0gd2lkdGggLSB1bmkudXB4MnB4KDIwKSkgKyAncHgnLFxyXG5cdH0pO1xyXG5cdGxldCBkcmF3cyA9IFt7XHJcblx0XHR0YWc6J3JlY3QnLFxyXG5cdFx0aWQ6J2JnJyxcclxuXHRcdHJlY3RTdHlsZXM6IHtcclxuXHRcdFx0Y29sb3I6IGJnQ29sb3IsXHJcblx0XHRcdHJhZGl1czogdW5pLnVweDJweCgyMCkgKyAncHgnLFxyXG5cdFx0XHRib3JkZXJXaWR0aDogJzFweCcsXHJcblx0XHRcdGJvcmRlckNvbG9yOiBsaW5lQ29sb3JcclxuXHRcdH0sXHJcblx0XHRwb3NpdGlvbjoge1xyXG5cdFx0XHR0b3A6IDAgKyAncHgnLFxyXG5cdFx0XHRsZWZ0OiAwICsgJ3B4JyxcclxuXHRcdFx0d2lkdGg6IHdpZHRoIC0gICsgJ3B4JyxcclxuXHRcdFx0aGVpZ2h0OiBoZWlnaHQgKyAncHgnLFxyXG5cdFx0fVxyXG5cdH1dXHJcblx0cG9wdXAuZHJhdyhkcmF3cylcclxuXHRcclxuXHRjb25zdCBwYWdlcyA9IGdldEN1cnJlbnRQYWdlcygpXHJcblx0Y29uc3QgcGFnZSA9IHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdXHJcblx0Y29uc3QgYmFja3MgPSBwYWdlLiR2bS4kb3B0aW9ucy5vbkJhY2tQcmVzcy8v6K6w5b2V5LiL5b2T5YmN6aG16Z2i5pyJ5Y+v6IO96K6+572u55qE6L+U5Zue5LqL5Lu255uR5ZCs5pa55rOV77yM55So5LqO6L+Y5Y6fXHJcblx0cGFnZS4kdm0uJG9wdGlvbnMub25CYWNrUHJlc3MgPSBuZXcgQXJyYXkoMClcclxuXHRwYWdlLiR2bS4kb3B0aW9ucy5vbkJhY2tQcmVzcy5wdXNoKChlKSA9PiB7XHJcblx0XHRjb21wbGV0ZShmYWxzZSlcclxuXHRcdHJldHVybiB0cnVlXHJcblx0fSlcclxuXHRjb25zdCBjb21wbGV0ZSA9IGZ1bmN0aW9uIChib2wpIHtcclxuXHRcdHRyeXtcclxuXHRcdFx0bWFzay5jbG9zZSgpXHJcblx0XHRcdHBvcHVwLmNsb3NlKClcclxuXHRcdFx0c3VjY2Vzcyh7XHJcblx0XHRcdFx0Y29uZmlybTogYm9sXHJcblx0XHRcdH0pXHJcblx0XHRcdHBhZ2UuJHZtLiRvcHRpb25zLm9uQmFja1ByZXNzID0gYmFja3MvL+i/mOWOn+W9k+WJjemhtemdoueahOi/lOWbnuS6i+S7tuebkeWQrFxyXG5cdFx0fSBjYXRjaChlKXtcclxuXHRcdFx0ZmFpbChlKVxyXG5cdFx0fVxyXG5cdH1cclxuXHRtYXNrLnNob3coKVxyXG5cdHBvcHVwLnNob3coKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0b29sYmFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/*!*******************************************************************!*\
  !*** G:/my-project/uni-polymerize/js_sdk/yb-native-ui/scircle.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var stopInterval = false;\nvar touchtime = 0;\n\nvar windowWidth = uni.getSystemInfoSync().screenWidth;\nvar windowHeight = uni.getSystemInfoSync().screenHeight;\n\nfunction create(_ref) {var size = _ref.size,left = _ref.left,top = _ref.top,text = _ref.text,border = _ref.border,touch = _ref.touch,func = _ref.func,dark = _ref.dark;\n  var btn = new plus.nativeObj.View('overall-btn', {\n    width: size + 'px',\n    height: size + 'px',\n    top: top + 'px',\n    left: left + 'px' });\n\n  drawRect(btn, size, border || 5, dark || false);\n  if (text) {\n    drawText(btn, text, dark || false);\n  }\n  var setInterval = function setInterval() {\n    setTimeout(function () {\n      touchtime += 50;\n      if (!stopInterval) {\n        setInterval();\n      }\n    }, 50);\n  };\n  if (touch) {\n    btn.addEventListener(\"touchstart\", function (e) {\n      stopInterval = false;\n      setInterval();\n    });\n    btn.addEventListener(\"touchmove\", function (e) {\n      top = e.pageY - size / 2;\n      left = e.pageX - size / 2;\n      if (top < 0) top = 0;\n      if (top > windowHeight - size) top = windowHeight - size;\n      if (left < 0) left = 0;\n      if (left > windowWidth - size) left = windowWidth - size;\n      btn.setStyle({ top: top + 'px', left: left + 'px' });\n    });\n    btn.addEventListener(\"touchend\", function (e) {\n      stopInterval = true;\n      if (touchtime < 200 && func) {\n        e.top = top;\n        e.left = left;\n        func(e);\n      }\n      touchtime = 0;\n    });\n  } else {\n    if (func) {\n      btn.addEventListener(\"click\", function (e) {\n        func(e);\n      });\n    }\n  }\n  return {\n    show: function show() {\n      return btn.show();\n    },\n    hide: function hide() {\n      return btn.hide();\n    },\n    close: function close() {\n      return btn.close();\n    },\n    draw: function draw(text) {\n      drawText(btn, text, dark || false);\n    },\n    reset: function reset(_ref2) {var dark = _ref2.dark;\n      drawRect(btn, size, border, dark || false);\n    } };\n\n}\n\nfunction drawRect(btn, size, border, dark) {\n  var opacity = 0.3;\n  var bgColor = dark ? \"rgba(255,255,255,\".concat(opacity, \")\") : \"rgba(0,0,0,\".concat(opacity, \")\");\n  var borderColor = dark ? \"rgba(50,50,50,\".concat(opacity, \")\") : \"rgba(225,225,225,\".concat(opacity, \")\");\n  btn.draw([{\n    tag: 'rect',\n    id: 'bg',\n    rectStyles: {\n      color: bgColor,\n      radius: size + 'px',\n      borderColor: borderColor,\n      borderWidth: border + 'px' },\n\n    position: {\n      top: border / 2 + 'px',\n      left: border / 2 + 'px',\n      width: size - border + 'px',\n      height: size - border + 'px' } }]);\n\n\n}\n\nfunction drawText(btn, text, dark) {\n  var color = dark ? 'rgba(0,0,0,0.7)' : 'rgba(255,255,255,0.7)';\n  btn.draw([{\n    tag: 'font', id: 'text', text: text,\n    textStyles: {\n      size: size / 2 + 'px',\n      color: color,\n      verticalAlign: 'middle',\n      weight: 'bold',\n      align: 'center' } }]);\n\n\n}var _default =\n\ncreate;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/*!*****************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/constructor/player.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 41));var _api = _interopRequireDefault(__webpack_require__(/*! @/assets/api/music/api.js */ 44));\nvar _config = _interopRequireDefault(__webpack_require__(/*! @/assets/js/config.js */ 11));\nvar _store = _interopRequireDefault(__webpack_require__(/*! @/store */ 17));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\n\ngetters = _store.default.getters,dispatch = _store.default.dispatch;var\nERR_OK = _config.default.ERR_OK;var\n\nPlayer = /*#__PURE__*/function () {\n  function Player(song) {_classCallCheck(this, Player);\n    this.id = song.id;\n    this.songId = song.songId || '';\n    this.lyricId = song.lyricId || '';\n    this.src = song.src || getCache(this.id);\n    this.lyric = song.lyric || '';\n    this.instance = null;\n    this.source = song.source;\n  }_createClass(Player, [{ key: \"init\", value: function () {var _init = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee() {var _this = this;var arr;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:\n\n                arr = [];\n                this.instance = uni.createInnerAudioContext();\n                this.songId && !this.src ? arr.push(_api.default[this.source].getPlayUrl({\n                  id: this.songId,\n                  source: this.source })) :\n                this.instance.src = this.src;\n                this.lyricId && !this.lyric ? arr.push(_api.default[this.source].getLyric({\n                  id: this.lyricId,\n                  source: this.source })) :\n                null;if (!(\n                arr.length > 0)) {_context.next = 10;break;}_context.next = 7;return Promise.all(arr).then(function (ress) {\n                  ress.forEach(function (res, key) {\n                    if (res.code == ERR_OK) {\n                      if (res.data.src) {\n                        _this.src = res.data.src;\n                      }\n                      if (res.data.lyric) {\n                        _this.lyric = res.data.lyric;\n                      }\n                    }\n                  });\n                  _this.src ? _this.instance.src = _this.src : null;\n                  return _this.src ? true : false;\n                }).catch(function () {\n                  return false;\n                });case 7:_context.t0 = _context.sent;_context.next = 11;break;case 10:_context.t0 = true;case 11:return _context.abrupt(\"return\", _context.t0);case 12:case \"end\":return _context.stop();}}}, _callee, this);}));function init() {return _init.apply(this, arguments);}return init;}() }, { key: \"destroy\", value: function destroy()\n\n    {\n      this.instance.stop();\n      this.instance.destroy();\n      this.instance = null;\n    } }]);return Player;}();\n\n\n//获取缓存\nexports.default = Player;function getCache(id) {\n  var caches = getters['cache/getCache'];\n  var index = caches.findIndex(function (cache) {return cache.parentId == id;});\n  if (index > -1) {\n    var src = plus.io.convertLocalFileSystemURL(caches[index].src);\n    var file = plus.android.newObject('java.io.File', src);\n    if (plus.android.invoke(file, 'exists')) {\n      return src;\n    } else {\n      dispatch('cache/removeCache', id);\n    }\n  }\n  return null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2NvbnN0cnVjdG9yL3BsYXllci5qcyJdLCJuYW1lcyI6WyJnZXR0ZXJzIiwiU3RvcmUiLCJkaXNwYXRjaCIsIkVSUl9PSyIsIkNvbmZpZyIsIlBsYXllciIsInNvbmciLCJpZCIsInNvbmdJZCIsImx5cmljSWQiLCJzcmMiLCJnZXRDYWNoZSIsImx5cmljIiwiaW5zdGFuY2UiLCJzb3VyY2UiLCJhcnIiLCJ1bmkiLCJjcmVhdGVJbm5lckF1ZGlvQ29udGV4dCIsInB1c2giLCJBcGkiLCJnZXRQbGF5VXJsIiwiZ2V0THlyaWMiLCJsZW5ndGgiLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsInJlc3MiLCJmb3JFYWNoIiwicmVzIiwia2V5IiwiY29kZSIsImRhdGEiLCJjYXRjaCIsInN0b3AiLCJkZXN0cm95IiwiY2FjaGVzIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJjYWNoZSIsInBhcmVudElkIiwicGx1cyIsImlvIiwiY29udmVydExvY2FsRmlsZVN5c3RlbVVSTCIsImZpbGUiLCJhbmRyb2lkIiwibmV3T2JqZWN0IiwiaW52b2tlIl0sIm1hcHBpbmdzIjoiMk1BQUE7QUFDQTtBQUNBLDRFOztBQUVRQSxPLEdBQXNCQyxjLENBQXRCRCxPLENBQVNFLFEsR0FBYUQsYyxDQUFiQyxRO0FBQ1RDLE0sR0FBV0MsZSxDQUFYRCxNOztBQUVhRSxNO0FBQ3BCLGtCQUFZQyxJQUFaLEVBQWtCO0FBQ2pCLFNBQUtDLEVBQUwsR0FBVUQsSUFBSSxDQUFDQyxFQUFmO0FBQ0EsU0FBS0MsTUFBTCxHQUFjRixJQUFJLENBQUNFLE1BQUwsSUFBZSxFQUE3QjtBQUNBLFNBQUtDLE9BQUwsR0FBZUgsSUFBSSxDQUFDRyxPQUFMLElBQWdCLEVBQS9CO0FBQ0EsU0FBS0MsR0FBTCxHQUFXSixJQUFJLENBQUNJLEdBQUwsSUFBWUMsUUFBUSxDQUFDLEtBQUtKLEVBQU4sQ0FBL0I7QUFDQSxTQUFLSyxLQUFMLEdBQWFOLElBQUksQ0FBQ00sS0FBTCxJQUFj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LEVBQTJDO0FBQzFDLGFBQU9qQyxHQUFQO0FBQ0EsS0FGRCxNQUVPO0FBQ05SLGNBQVEsQ0FBQyxtQkFBRCxFQUFzQkssRUFBdEIsQ0FBUjtBQUNBO0FBQ0Q7QUFDRCxTQUFPLElBQVA7QUFDQSIsImZpbGUiOiI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcGkgZnJvbSAnQC9hc3NldHMvYXBpL211c2ljL2FwaS5qcydcclxuaW1wb3J0IENvbmZpZyBmcm9tICdAL2Fzc2V0cy9qcy9jb25maWcuanMnXHJcbmltcG9ydCBTdG9yZSBmcm9tIFwiQC9zdG9yZVwiXHJcblxyXG5jb25zdCB7IGdldHRlcnMsIGRpc3BhdGNoIH0gPSBTdG9yZVxyXG5jb25zdCB7IEVSUl9PSyB9ID0gQ29uZmlnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIge1xyXG5cdGNvbnN0cnVjdG9yKHNvbmcpIHtcclxuXHRcdHRoaXMuaWQgPSBzb25nLmlkXHJcblx0XHR0aGlzLnNvbmdJZCA9IHNvbmcuc29uZ0lkIHx8ICcnXHJcblx0XHR0aGlzLmx5cmljSWQgPSBzb25nLmx5cmljSWQgfHwgJydcclxuXHRcdHRoaXMuc3JjID0gc29uZy5zcmMgfHwgZ2V0Q2FjaGUodGhpcy5pZClcclxuXHRcdHRoaXMubHlyaWMgPSBzb25nLmx5cmljIHx8ICcnXHJcblx0XHR0aGlzLmluc3RhbmNlID0gbnVsbFxyXG5cdFx0dGhpcy5zb3VyY2UgPSBzb25nLnNvdXJjZVxyXG5cdH1cclxuXHRhc3luYyBpbml0KCkge1xyXG5cdFx0bGV0IGFyciA9IFtdXHJcblx0XHR0aGlzLmluc3RhbmNlID0gdW5pLmNyZWF0ZUlubmVyQXVkaW9Db250ZXh0KClcclxuXHRcdHRoaXMuc29uZ0lkICYmICF0aGlzLnNyYyA/IGFyci5wdXNoKEFwaVt0aGlzLnNvdXJjZV0uZ2V0UGxheVVybCh7XHJcblx0XHRcdGlkOiB0aGlzLnNvbmdJZCxcclxuXHRcdFx0c291cmNlOiB0aGlzLnNvdXJjZVxyXG5cdFx0fSkpIDogdGhpcy5pbnN0YW5jZS5zcmMgPSB0aGlzLnNyYztcclxuXHRcdHRoaXMubHlyaWNJZCAmJiAhdGhpcy5seXJpYyA/IGFyci5wdXNoKEFwaVt0aGlzLnNvdXJjZV0uZ2V0THlyaWMoe1xyXG5cdFx0XHRpZDogdGhpcy5seXJpY0lkLFxyXG5cdFx0XHRzb3VyY2U6IHRoaXMuc291cmNlXHJcblx0XHR9KSkgOiBudWxsXHJcblx0XHRyZXR1cm4gYXJyLmxlbmd0aCA+IDAgPyBhd2FpdCBQcm9taXNlLmFsbChhcnIpLnRoZW4oKHJlc3MpID0+IHtcclxuXHRcdFx0cmVzcy5mb3JFYWNoKChyZXMsIGtleSkgPT4ge1xyXG5cdFx0XHRcdGlmICggcmVzLmNvZGUgPT0gRVJSX09LICkge1xyXG5cdFx0XHRcdFx0aWYgKCByZXMuZGF0YS5zcmMgKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuc3JjID0gcmVzLmRhdGEuc3JjXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIHJlcy5kYXRhLmx5cmljICl7XHJcblx0XHRcdFx0XHRcdHRoaXMubHlyaWMgPSByZXMuZGF0YS5seXJpY1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdFx0dGhpcy5zcmMgPyB0aGlzLmluc3RhbmNlLnNyYyA9IHRoaXMuc3JjIDogbnVsbFxyXG5cdFx0XHRyZXR1cm4gdGhpcy5zcmMgPyB0cnVlIDogZmFsc2VcclxuXHRcdH0pLmNhdGNoKCgpID0+IHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHR9KSA6IHRydWVcclxuXHR9XHJcblx0ZGVzdHJveSgpIHtcclxuXHRcdHRoaXMuaW5zdGFuY2Uuc3RvcCgpXHJcblx0XHR0aGlzLmluc3RhbmNlLmRlc3Ryb3koKVxyXG5cdFx0dGhpcy5pbnN0YW5jZSA9IG51bGxcclxuXHR9XHJcbn1cclxuXHJcbi8v6I635Y+W57yT5a2YXHJcbmZ1bmN0aW9uIGdldENhY2hlIChpZCkge1xyXG5cdGNvbnN0IGNhY2hlcyA9IGdldHRlcnNbJ2NhY2hlL2dldENhY2hlJ11cclxuXHRjb25zdCBpbmRleCA9IGNhY2hlcy5maW5kSW5kZXgoY2FjaGUgPT4gY2FjaGUucGFyZW50SWQgPT0gaWQpXHJcblx0aWYgKCBpbmRleCA+IC0xICkge1xyXG5cdFx0Y29uc3Qgc3JjID0gcGx1cy5pby5jb252ZXJ0TG9jYWxGaWxlU3lzdGVtVVJMKGNhY2hlc1tpbmRleF0uc3JjKTtcclxuXHRcdGNvbnN0IGZpbGUgPSBwbHVzLmFuZHJvaWQubmV3T2JqZWN0KCdqYXZhLmlvLkZpbGUnLCBzcmMpO1xyXG5cdFx0aWYgKCBwbHVzLmFuZHJvaWQuaW52b2tlKGZpbGUsICdleGlzdHMnKSApIHtcclxuXHRcdFx0cmV0dXJuIHNyY1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGlzcGF0Y2goJ2NhY2hlL3JlbW92ZUNhY2hlJywgaWQpXHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBudWxsXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ 42);

/***/ }),
/* 42 */
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() {
  return this || (typeof self === "object" && self);
})() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(/*! ./runtime */ 43);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 43 */
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);


/***/ }),
/* 44 */
/*!************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/api/music/api.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _music = _interopRequireDefault(__webpack_require__(/*! ./163music.js */ 45));\nvar _qqmusic = _interopRequireDefault(__webpack_require__(/*! ./qqmusic.js */ 54));var _api_163music$source$;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var _default = (_api_163music$source$ = {}, _defineProperty(_api_163music$source$,\n\n\n_music.default.source, _music.default), _defineProperty(_api_163music$source$,\n_qqmusic.default.source, _qqmusic.default), _api_163music$source$);exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2FwaS9tdXNpYy9hcGkuanMiXSwibmFtZXMiOlsiYXBpXzE2M211c2ljIiwic291cmNlIiwiYXBpX3FxbXVzaWMiXSwibWFwcGluZ3MiOiJ1RkFBQTtBQUNBLG1GOzs7QUFHRUEsZUFBYUMsTSxFQUFTRCxjO0FBQ3RCRSxpQkFBWUQsTSxFQUFTQyxnQiIsImZpbGUiOiI0NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGlfMTYzbXVzaWMgZnJvbSAnLi8xNjNtdXNpYy5qcydcclxuaW1wb3J0IGFwaV9xcW11c2ljIGZyb20gJy4vcXFtdXNpYy5qcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRbYXBpXzE2M211c2ljLnNvdXJjZV06IGFwaV8xNjNtdXNpYyxcclxuXHRbYXBpX3FxbXVzaWMuc291cmNlXTogYXBpX3FxbXVzaWNcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/*!*****************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/api/music/163music.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\nvar _index = _interopRequireDefault(__webpack_require__(/*! @/plugins/request/index.js */ 9));\nvar _config = _interopRequireDefault(__webpack_require__(/*! @/assets/js/config.js */ 11));\nvar _util = _interopRequireDefault(__webpack_require__(/*! @/assets/js/util.js */ 15));\nvar _comment = _interopRequireDefault(__webpack_require__(/*! @/assets/constructor/comment.js */ 46));\nvar _song = _interopRequireDefault(__webpack_require__(/*! @/assets/constructor/song.js */ 47));\nvar _album = _interopRequireDefault(__webpack_require__(/*! @/assets/constructor/album.js */ 48));\nvar _singer = _interopRequireDefault(__webpack_require__(/*! @/assets/constructor/singer.js */ 49));\nvar _asrsea = _interopRequireDefault(__webpack_require__(/*! @/assets/other/asrsea.js */ 50));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // 网易云音乐\nvar\nMUSICURL = _config.default.MUSICURL,ERR_OK = _config.default.ERR_OK,ERR_FALSE = _config.default.ERR_FALSE;var\ntime2seconds = _util.default.time2seconds,dateFormat = _util.default.dateFormat;\n\nvar source = '163music';\nvar href = MUSICURL[source].href;var _default =\n\n{\n  /**\r\n   * 搜索\r\n   * @param {Object} data = {keyword: '搜索关键词', page: '搜索页数'} \r\n   **/\n  search: function search(data) {\n    var arr = [this.searchSong(data)];\n    if (data.page[source] <= 1) {\n      arr.push(this.multimatch(data));\n    }\n    return new Promise(function (resolve) {\n      Promise.all(arr).then(function (ress) {\n        var list = [];\n        ress.forEach(function (res) {\n          if (res.code == ERR_OK) {\n            list = res.data.list.concat(list);\n          }\n        });\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            isLastPage: ress[0].data.list.length < 20,\n            currentPage: data.page[source],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 搜索音乐列表\r\n      * @param {Object} data = {keyword: '搜索关键词', page: '搜索页数'} \r\n      **/\n  searchSong: function searchSong(data) {\n    var dataValue = (0, _asrsea.default)({ \"s\": data.keyword, \"limit\": 20, \"offset\": (data.page[source] - 1) * 20, \"type\": 1, \"strategy\": 5, \"queryCorrect\": true }, \"xNQjoijbLvYRFhCF\");\n    return new Promise(function (resolve) {\n      _index.default.post('https://interface.music.163.com/weapi/search/get', {\n        params: {\n          params: dataValue,\n          encSecKey: \"b4817de5baa70f1add165575040d354df276f10747ee29231e20eff099db2a5556f15de01fdb7899a12ef1c1cfd27eff07fd12ed2ded945825807488459ad381d80388b566a9c4cf32b0a3d056c82251b3199c2d1d4cf2c3b158fff1af91ffd2350c173286c26d323c7c339ed2610e2772106ae4c0927355e30da796c1240a91\" },\n\n        headers: {\n          referer: 'https://y.music.163.com',\n          'Content-Type': 'application/x-www-form-urlencoded' } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.result.songs.forEach(function (song) {\n            var singer = '';\n            song.ar.forEach(function (sin, k) {\n              singer += sin.name + (k < song.ar.length - 1 ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.id,\n              commentId: 'R_SO_4_' + song.id,\n              lyricId: song.id,\n              title: song.name,\n              cover: song.al.picUrl,\n              singer: singer || '未知歌手',\n              payplay: song.fee != 8 && song.fee != 0,\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 多重匹配\r\n      * @param {Object} data = {keyword: '搜索关键词'} \r\n      **/\n  multimatch: function multimatch(data) {\n    var dataSync = {\n      keywords: data.keyword };\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/search/multimatch', {\n        params: dataSync }).\n      then(function (res) {\n        var artists = res.data.result.artist;\n        var list = [];\n        if (res.data.code == 200) {\n          artists.forEach(function (artist) {\n            var item = new _singer.default({\n              singerId: artist.id,\n              title: artist.name,\n              cover: artist.picUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              albumSize: artist.albumSize,\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function () {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取热门搜索关键词\r\n      *\r\n      **/\n  getHotKeyword: function getHotKeyword() {\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/search/hot').then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.result.hots.forEach(function (hot) {\n            list.push(hot.first);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取热门推荐\r\n      *\r\n      **/\n  getRecom: function getRecom() {var _this = this;\n    return new Promise(function (resolve) {\n      var newArr = [];\n      var recome = {\n        title: MUSICURL[source].title,\n        source: source,\n        banners: [],\n        hotSinger: [],\n        topList: [],\n        hotDisc: [],\n        newSong: [] };\n\n      if (MUSICURL[source].banner) {\n        newArr.push(_this.getBannerList());\n      }\n      if (MUSICURL[source].singer) {\n        newArr.push(_this.getHotSinger());\n      }\n      if (MUSICURL[source].top) {\n        newArr.push(_this.getToplist());\n      }\n      if (MUSICURL[source].album) {\n        newArr.push(_this.getHotDiscList());\n      }\n      Promise.all(newArr).then(function (ress) {\n        ress.forEach(function (res, key) {\n          if (res.code == ERR_OK) {\n            switch (key) {\n              case 0:\n                recome.banners = res.data.list;\n                break;\n              case 1:\n                recome.hotSinger = res.data.list;\n                break;\n              case 2:\n                recome.topList = res.data.list;\n                break;\n              default:\n                recome.hotDisc = res.data.list;}\n\n          }\n        });\n        resolve({\n          code: ERR_OK,\n          data: {\n            data: recome,\n            source: source } });\n\n\n      }).catch(function () {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            data: recome,\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取轮播图列表\r\n      *\r\n      **/\n  getBannerList: function getBannerList() {\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/banner', {\n        params: {\n          type: 1 } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.banners.forEach(function (top) {\n            var item = '';\n            if (top.targetType == 1000) {\n              item = new _album.default({\n                albumId: top.targetId,\n                title: top.typeTitle,\n                cover: top.pic,\n                type: 'album',\n                source: source });\n\n            }\n            if (top.targetType == 1) {\n              var song = top.song;\n              var singer = '';\n              song.ar.forEach(function (sin, k) {\n                singer += sin.name + (k < song.ar.length ? ' ' : '');\n              });\n              var single = new _song.default({\n                songId: song.id,\n                commentId: 'R_SO_4_' + song.id,\n                lyricId: song.id,\n                title: song.name,\n                cover: song.al.picUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n                singer: singer || '未知歌手',\n                source: source });\n\n              item = new _album.default({\n                albumId: top.targetId,\n                title: top.typeTitle,\n                cover: top.pic,\n                song: [single],\n                type: 'newAlbum',\n                source: source });\n\n            }\n            item ? list.push(item) : null;\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取排行榜\r\n      *\r\n      **/\n  getToplist: function getToplist() {\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/toplist').then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.list.forEach(function (top) {var _top$description;\n            var item = new _album.default({\n              albumId: top.id,\n              commentId: 'A_PL_0_' + top.id,\n              title: top.name,\n              cover: top.coverImgUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              desc: ((_top$description = top.description) === null || _top$description === void 0 ? void 0 : _top$description.replace(/<br>/g, '')) || '',\n              type: 'top',\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取排行榜详情\r\n      * @param {Object} data = {id: 排行榜id} \r\n      **/\n  getTopDetail: function getTopDetail(data) {var _this2 = this;\n    return new Promise(function (resolve) {\n      _this2.getDiscDetail({\n        id: data.id }).\n      then(function (res) {\n        resolve({\n          code: res.code,\n          data: {\n            list: res.data.list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取最新歌曲\r\n      * \r\n      **/\n  getNewSongList: function getNewSongList() {\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/top/song', {\n        params: {\n          type: 0 } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.data.forEach(function (song) {\n            var singer = '';\n            song.artists.forEach(function (sin, k) {\n              singer += sin.name + (k < song.artists.length ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.id,\n              commentId: 'R_SO_4_' + song.id,\n              lyricId: song.id,\n              title: song.name,\n              cover: song.album.picUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              singer: singer || '未知歌手',\n              payplay: song.fee != 8 && song.fee != 0,\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取新碟类型\r\n      *\r\n      **/\n  getNewAlbumType: function getNewAlbumType() {\n    return new Promise(function (resolve) {\n      var list = [{\n        title: '全部',\n        typeId: 'ALL',\n        source: source },\n      {\n        title: '华语',\n        typeId: 'ZH',\n        source: source },\n      {\n        title: '欧美',\n        typeId: 'EA',\n        source: source },\n      {\n        title: '韩国',\n        typeId: 'KR',\n        source: source },\n      {\n        title: '日本',\n        typeId: 'JP',\n        source: source }];\n\n      resolve({\n        code: ERR_OK,\n        data: {\n          list: list,\n          source: source } });\n\n\n    });\n  },\n\n  /**\r\n      * 获取上架新碟\r\n      * \r\n      **/\n  getNewAlbumList: function getNewAlbumList(data) {\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/album/new', {\n        params: {\n          limit: 40,\n          offset: (data.page - 1) * 40,\n          area: data.typeId } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.albums.forEach(function (album) {\n            var singer = '';\n            album.artists.forEach(function (sin, k) {\n              singer += sin.name + (k < album.artists.length - 1 ? ' / ' : '');\n            });\n            var item = new _album.default({\n              albumId: album.id,\n              commentId: 'R_AL_3_' + album.id,\n              title: album.name,\n              cover: album.picUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              creator: singer,\n              type: 'newAlbum',\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            isLastPage: list.length < 40,\n            currentPage: data.page,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            isLastPage: false,\n            currentPage: data.page - 1,\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取专辑详情\r\n      * @param {Object} data = {id: 专辑id} \r\n      **/\n  getAlbumDetail: function getAlbumDetail(data) {\n    var dataValue = (0, _asrsea.default)({}, \"GGUrx9xMnkNBwqd7\");\n    return new Promise(function (resolve) {\n      _index.default.post('https://interface.music.163.com/weapi/v1/album/' + data.id, {\n        params: {\n          params: dataValue,\n          encSecKey: \"3b7bf6bd5eef5ccd3923e0ac08584032a0293d77c16d67c0c80e1c7b354525a68354e92fa50ec85efb65ac3f4ae1dce383fec67fff1d51be9d5b9b606136b97f563eccbcbb14d20616a68e45edcd75704c1b40f4a13bb985b66fdae8da4c5b0e78e71b535a772a7baaa685e64dc8cce7203762d7b646bbea06fde702f1480939\" },\n\n        headers: {\n          referer: 'https://y.music.163.com',\n          'Content-Type': 'application/x-www-form-urlencoded' } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.songs.forEach(function (song) {\n            var singer = '';\n            song.ar.forEach(function (sin, k) {\n              singer += sin.name + (k < song.ar.length ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.id,\n              lyricId: song.id,\n              commentId: 'R_SO_4_' + song.id,\n              title: song.name,\n              cover: song.al.picUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              singer: singer,\n              payplay: song.fee != 8 && song.fee != 0,\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌手类型\r\n      *\r\n      **/\n  getSingerType: function getSingerType() {\n    return new Promise(function (resolve) {\n      var list = [{\n        title: '华语',\n        typeId: '7',\n        source: source },\n      {\n        title: '欧美',\n        typeId: '96',\n        source: source },\n      {\n        title: '韩国',\n        typeId: '16',\n        source: source },\n      {\n        title: '日本',\n        typeId: '8',\n        source: source },\n      {\n        title: '其它',\n        typeId: '0',\n        source: source }];\n\n      resolve({\n        code: ERR_OK,\n        data: {\n          list: list,\n          source: source } });\n\n\n    });\n  },\n\n  /**\r\n      * 获取热门歌手\r\n      *\r\n      **/\n  getHotSinger: function getHotSinger() {\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/top/artists', {\n        params: {\n          limit: 10 } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.artists.forEach(function (singer) {\n            var item = new _singer.default({\n              singerId: singer.id,\n              title: singer.name,\n              cover: singer.picUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌手\r\n      * @param {Object} data = {area: 地区} \r\n      **/\n  getSinger: function getSinger(data) {\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/artist/list', {\n        params: {\n          limit: 80,\n          initial: -1,\n          type: -1,\n          area: data.area } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.artists.forEach(function (singer) {\n            var item = new _singer.default({\n              singerId: singer.id,\n              title: singer.name,\n              cover: singer.picUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌手详情\r\n      * @param {Object} data = {area: 地区} \r\n      **/\n  getSingerDetail: function getSingerDetail(data) {\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/artists', {\n        params: {\n          id: data.id } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.hotSongs.forEach(function (song) {\n            var singer = '';\n            song.ar.forEach(function (sin, k) {\n              singer += sin.name + (k < song.ar.length ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.id,\n              lyricId: song.id,\n              commentId: 'R_SO_4_' + song.id,\n              title: song.name,\n              cover: song.al.picUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              singer: singer,\n              payplay: song.fee != 8 && song.fee != 0,\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            desc: res.data.artist.briefDesc,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌单分类\r\n      *\r\n      **/\n  getDiscType: function getDiscType(data) {\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/playlist/catlist').then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          var categories = res.data.categories;\n          var subs = res.data.sub;\n          Object.keys(categories).forEach(function (key) {\n            var arr = subs.filter(function (sub) {return sub.category == key;});\n            list.push({\n              label: categories[key],\n              child: arr.map(function (sub) {\n                return {\n                  label: sub.name,\n                  value: sub.name };\n\n              }) });\n\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取热门歌单\r\n      *\r\n      **/\n  getHotDiscList: function getHotDiscList() {var _this3 = this;\n    return new Promise(function (resolve) {\n      _this3.getDiscList({\n        order: 'hot',\n        cat: '全部',\n        page: 1,\n        limit: 15 }).\n      then(function (res) {\n        resolve({\n          code: res.code,\n          data: {\n            list: res.data.list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌单\r\n      * @param {Object} data = {参数} \r\n      * @param {String} order = {new or hot} \r\n      * @param {Number} limit = {请求数量} \r\n      * @param {String} cat = {分类} \r\n      **/\n  getDiscList: function getDiscList(data) {\n    var limit = data.limit || 50;\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/top/playlist', {\n        params: {\n          order: data.order || 'hot',\n          limit: limit,\n          cat: data.typeId,\n          offset: (data.page - 1) * limit } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.playlists.forEach(function (top) {\n            var item = new _album.default({\n              albumId: top.id,\n              commentId: 'A_PL_0_' + top.id,\n              title: top.name,\n              cover: top.coverImgUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              desc: top.description,\n              playnum: top.playCount,\n              creator: top.creator.nickname,\n              type: 'album',\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            isLastPage: list.length < data.limit,\n            currentPage: data.page,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            isLastPage: false,\n            currentPage: data.page - 1,\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌单详情\r\n      * @param {Object} data = {id: 歌单id} \r\n      **/\n  getDiscDetail: function getDiscDetail(data) {\n    var dataValue = (0, _asrsea.default)({ \"id\": data.id, \"n\": 1000, \"shareUserId\": 0 }, \"avNrNiiiQqgFTkg3\");\n    return new Promise(function (resolve) {\n      _index.default.post('https://interface.music.163.com/weapi/v6/playlist/detail', {\n        params: {\n          params: dataValue,\n          encSecKey: \"aca49f84485cfa76dc80e13bc10be021a42559a8fec9839c01d873db7e615bf7fbeebbdd47f9f76dd94fda8afce2d3fa5ff91208a8d75a182229d8f6d8ace52163e1cd095e9db8d04e7804898e0a12a6767916fbc3af2976624af9eb71dd259a4977f471c41468a904b54a7aae75f7ff0090d3a852959e2b9424e6bc70843b36\" },\n\n        headers: {\n          referer: 'https://y.music.163.com',\n          'Content-Type': 'application/x-www-form-urlencoded' } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.playlist.tracks.forEach(function (song) {\n            var singer = '';\n            song.ar.forEach(function (sin, k) {\n              singer += sin.name + (k < song.ar.length ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.id,\n              lyricId: song.id,\n              commentId: 'R_SO_4_' + song.id,\n              title: song.al.name,\n              cover: song.al.picUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              singer: singer,\n              payplay: song.fee != 8 && song.fee != 0,\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取播放链接\r\n      * @param {Object} data = {id: '音乐ID'} \r\n      **/\n  getPlayUrl: function getPlayUrl(data) {\n    var dataSync = {\n      id: data.id };\n\n    return new Promise(function (resolve, reject) {\n      _index.default.get(href + '/song/url', {\n        params: dataSync }).\n      then(function (res) {\n        var playUrl = '';\n        if (res.data.code == 200) {\n          playUrl = res.data.data[0].url || '';\n        } else {\n          playUrl = \"https://music.163.com/song/media/outer/url?id=\".concat(data.id, \".mp3\");\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            src: playUrl,\n            source: source } });\n\n\n      }).catch(function (err) {\n        reject({\n          code: ERR_FALSE,\n          data: {\n            src: '',\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌词\r\n      * @param {Object} data = {id: '歌词ID'} \r\n      **/\n  getLyric: function getLyric(data) {\n    var dataSync = {\n      id: data.id };\n\n    return new Promise(function (resolve, reject) {\n      _index.default.get(href + '/lyric', {\n        params: dataSync }).\n      then(function (res) {\n        var lyrics = [];\n        if (res.data.code == 200) {\n          var arr = res.data.lrc.lyric.split('\\n');\n          for (var i in arr) {\n            var time = arr[i].match(/\\[(\\S*)\\]/) ? arr[i].match(/\\[(\\S*)\\]/)[0] : '';\n            var title = arr[i].split(']')[1];\n            if (title && time) {\n              lyrics.push({\n                time: time2seconds(time.substring(1, time.length - 1)),\n                title: title });\n\n            }\n          }\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            lyric: lyrics,\n            source: source } });\n\n\n      }).catch(function (err) {\n        reject({\n          code: ERR_FALSE,\n          data: {\n            lyric: [],\n            source: source } });\n\n\n      });\n    });\n  },\n  /**\r\n      * 获取评论列表\r\n      * @param {Object} data = {id: 歌单id} \r\n      **/\n  getComment: function getComment(data) {\n    var dataValue = (0, _asrsea.default)({ \"rid\": data.id, \"threadId\": data.id, \"pageNo\": data.page, \"pageSize\": \"20\", \"cursor\": \"1638966725671\", \"offset\": (data.page - 1) * 20, \"orderType\": \"1\", \"csrf_token\": \"\" }, \"1yhgKF2pMaAlYNcX\");\n    return new Promise(function (resolve) {\n      _index.default.post('https://music.163.com/weapi/comment/resource/comments/get?csrf_token=', {\n        params: {\n          params: dataValue,\n          encSecKey: \"a27eb3deda2cf5a473ffb868f29cf1b33693e0fa234d739e998d7481537b5482e21e190943cde4ba814253ad3ff0ee3a80842ecf45c1b091b9077908f2a394ef713991f35f2721663c55ee53a6cf0647776bf825823ac116cde4dee9c47f06c935c59b96bfb99041de4e32d109c650fb3dd24c15eab5d3ce194a6f1e47ae10db\" },\n\n        headers: {\n          referer: 'https://y.music.163.com',\n          'Content-Type': 'application/x-www-form-urlencoded' } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 200) {\n          res.data.data.comments.forEach(function (comment) {\n            var subComments = comment.beReplied || [];\n            var subComment = [];\n            subComments.forEach(function (sub) {\n              subComment.push(\n              new _comment.default({\n                id: sub.beRepliedCommentId,\n                avatar: sub.user.avatarUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n                title: sub.user.nickname,\n                subtitle: dateFormat(comment.time),\n                content: sub.content }));\n\n\n            });\n            var item = new _comment.default({\n              id: comment.commentId,\n              avatar: comment.user.avatarUrl + '?imageView&thumbnail=360y360&quality=75&tostatic=0',\n              title: comment.user.nickname,\n              subtitle: dateFormat(comment.time),\n              subComment: subComment,\n              content: comment.content,\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            isLastPage: list.length < 20,\n            currentPage: data.page,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            isLastPage: false,\n            currentPage: data.page - 1,\n            source: source } });\n\n\n      });\n    });\n  },\n  source: source };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/*!******************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/constructor/comment.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}var Comment =\nfunction Comment(_ref) {var id = _ref.id,avatar = _ref.avatar,title = _ref.title,subtitle = _ref.subtitle,content = _ref.content,subComment = _ref.subComment,extra = _ref.extra;_classCallCheck(this, Comment);\n  this.id = id;\n  this.avatar = avatar;\n  this.title = title;\n  this.subtitle = subtitle || '';\n  this.content = content || '';\n  this.subComment = subComment || [];\n  this.extra = extra || {}; //附加字段\n};exports.default = Comment;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2NvbnN0cnVjdG9yL2NvbW1lbnQuanMiXSwibmFtZXMiOlsiQ29tbWVudCIsImlkIiwiYXZhdGFyIiwidGl0bGUiLCJzdWJ0aXRsZSIsImNvbnRlbnQiLCJzdWJDb21tZW50IiwiZXh0cmEiXSwibWFwcGluZ3MiOiJnUEFBcUJBLE87QUFDcEIsdUJBQXVFLEtBQTFEQyxFQUEwRCxRQUExREEsRUFBMEQsQ0FBdERDLE1BQXNELFFBQXREQSxNQUFzRCxDQUE5Q0MsS0FBOEMsUUFBOUNBLEtBQThDLENBQXZDQyxRQUF1QyxRQUF2Q0EsUUFBdUMsQ0FBN0JDLE9BQTZCLFFBQTdCQSxPQUE2QixDQUFwQkMsVUFBb0IsUUFBcEJBLFVBQW9CLENBQVJDLEtBQVEsUUFBUkEsS0FBUTtBQUNyRSxPQUFLTixFQUFMLEdBQVVBLEVBQVY7QUFDQSxPQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxPQUFLQyxLQUFMLEdBQWFBLEtBQWI7QUFDQSxPQUFLQyxRQUFMLEdBQWdCQSxRQUFRLElBQUksRUFBNUI7QUFDQSxPQUFLQyxPQUFMLEdBQWVBLE9BQU8sSUFBSSxFQUExQjtBQUNBLE9BQUtDLFVBQUwsR0FBa0JBLFVBQVUsSUFBSSxFQUFoQztBQUNBLE9BQUtDLEtBQUwsR0FBYUEsS0FBSyxJQUFJLEVBQXRCLENBUHFFLENBTzdDO0FBQ3pCLEMiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tZW50IHtcclxuXHRjb25zdHJ1Y3Rvcih7aWQsIGF2YXRhciwgdGl0bGUsIHN1YnRpdGxlLCBjb250ZW50LCBzdWJDb21tZW50LCBleHRyYX0pIHtcclxuXHQgIHRoaXMuaWQgPSBpZFxyXG5cdCAgdGhpcy5hdmF0YXIgPSBhdmF0YXJcclxuXHQgIHRoaXMudGl0bGUgPSB0aXRsZVxyXG5cdCAgdGhpcy5zdWJ0aXRsZSA9IHN1YnRpdGxlIHx8ICcnXHJcblx0ICB0aGlzLmNvbnRlbnQgPSBjb250ZW50IHx8ICcnXHJcblx0ICB0aGlzLnN1YkNvbW1lbnQgPSBzdWJDb21tZW50IHx8IFtdXHJcblx0ICB0aGlzLmV4dHJhID0gZXh0cmEgfHwge30vL+mZhOWKoOWtl+autVxyXG5cdH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/*!***************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/constructor/song.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}var Song =\nfunction Song(_ref) {var title = _ref.title,songId = _ref.songId,lyricId = _ref.lyricId,commentId = _ref.commentId,src = _ref.src,lyric = _ref.lyric,cover = _ref.cover,singer = _ref.singer,desc = _ref.desc,payplay = _ref.payplay,playnum = _ref.playnum,extra = _ref.extra,source = _ref.source;_classCallCheck(this, Song);\n  this.id = (songId || '') + '_' + source;\n  this.title = title; //名称\n  this.songId = songId || '', //歌曲ID\n  this.lyricId = lyricId || '', //歌词ID\n  this.commentId = commentId || '', //评论ID\n  this.src = src || ''; //播放路径\n  this.lyric = lyric || ''; //歌词\n  this.cover = cover || '/static/music/music-bg.jpg'; //封面\n  this.singer = singer || '未知歌手'; //歌手\n  this.desc = desc || ''; //介绍\n  this.payplay = payplay || false; //是否需要支付播放\n  this.playnum = playnum || 0; //播放次数\n  this.extra = extra || {}; //附加字段\n  this.type = 'song'; //单曲类型\n  this.source = source; //来源\n};exports.default = Song;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2NvbnN0cnVjdG9yL3NvbmcuanMiXSwibmFtZXMiOlsiU29uZyIsInRpdGxlIiwic29uZ0lkIiwibHlyaWNJZCIsImNvbW1lbnRJZCIsInNyYyIsImx5cmljIiwiY292ZXIiLCJzaW5nZXIiLCJkZXNjIiwicGF5cGxheSIsInBsYXludW0iLCJleHRyYSIsInNvdXJjZSIsImlkIiwidHlwZSJdLCJtYXBwaW5ncyI6ImdQQUFxQkEsSTtBQUNwQixvQkFBb0gsS0FBdkdDLEtBQXVHLFFBQXZHQSxLQUF1RyxDQUFoR0MsTUFBZ0csUUFBaEdBLE1BQWdHLENBQXhGQyxPQUF3RixRQUF4RkEsT0FBd0YsQ0FBL0VDLFNBQStFLFFBQS9FQSxTQUErRSxDQUFwRUMsR0FBb0UsUUFBcEVBLEdBQW9FLENBQS9EQyxLQUErRCxRQUEvREEsS0FBK0QsQ0FBeERDLEtBQXdELFFBQXhEQSxLQUF3RCxDQUFqREMsTUFBaUQsUUFBakRBLE1BQWlELENBQXpDQyxJQUF5QyxRQUF6Q0EsSUFBeUMsQ0FBbkNDLE9BQW1DLFFBQW5DQSxPQUFtQyxDQUExQkMsT0FBMEIsUUFBMUJBLE9BQTBCLENBQWpCQyxLQUFpQixRQUFqQkEsS0FBaUIsQ0FBVkMsTUFBVSxRQUFWQSxNQUFVO0FBQ25ILE9BQUtDLEVBQUwsR0FBVSxDQUFDWixNQUFNLElBQUksRUFBWCxJQUFpQixHQUFqQixHQUF1QlcsTUFBakM7QUFDRSxPQUFLWixLQUFMLEdBQWFBLEtBQWIsQ0FGaUgsQ0FFL0Y7QUFDbEIsT0FBS0MsTUFBTCxHQUFjQSxNQUFNLElBQUksRUFBeEIsRUFBMkI7QUFDM0IsT0FBS0MsT0FBTCxHQUFlQSxPQUFPLElBQUksRUFEMUIsRUFDNkI7QUFDN0IsT0FBS0MsU0FBTCxHQUFpQkEsU0FBUyxJQUFJLEVBRjlCLEVBRWlDO0FBQ2pDLE9BQUtDLEdBQUwsR0FBV0EsR0FBRyxJQUFJLEVBSGxCLENBSGlILENBTTdGO0FBQ3BCLE9BQUtDLEtBQUwsR0FBYUEsS0FBSyxJQUFJLEVBQXRCLENBUGlILENBT3pGO0FBQ3hCLE9BQUtDLEtBQUwsR0FBYUEsS0FBSyxJQUFJLDRCQUF0QixDQVJpSCxDQVEvRDtBQUNsRCxPQUFLQyxNQUFMLEdBQWNBLE1BQU0sSUFBSSxNQUF4QixDQVRpSCxDQVNuRjtBQUM5QixPQUFLQyxJQUFMLEdBQVlBLElBQUksSUFBSSxFQUFwQixDQVZpSCxDQVUzRjtBQUN0QixPQUFLQyxPQUFMLEdBQWVBLE9BQU8sSUFBSSxLQUExQixDQVhpSCxDQVdsRjtBQUMvQixPQUFLQyxPQUFMLEdBQWVBLE9BQU8sSUFBSSxDQUExQixDQVppSCxDQVl0RjtBQUMzQixPQUFLQyxLQUFMLEdBQWFBLEtBQUssSUFBSSxFQUF0QixDQWJpSCxDQWF6RjtBQUN4QixPQUFLRyxJQUFMLEdBQVksTUFBWixDQWRpSCxDQWMvRjtBQUNsQixPQUFLRixNQUFMLEdBQWNBLE1BQWQsQ0FmaUgsQ0FlN0Y7QUFDdEIsQyIsImZpbGUiOiI0Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvbmcge1xyXG5cdGNvbnN0cnVjdG9yKHt0aXRsZSwgc29uZ0lkLCBseXJpY0lkLCBjb21tZW50SWQsIHNyYywgbHlyaWMsIGNvdmVyLCBzaW5nZXIsIGRlc2MsIHBheXBsYXksIHBsYXludW0sIGV4dHJhLCBzb3VyY2UgfSkge1xyXG5cdFx0dGhpcy5pZCA9IChzb25nSWQgfHwgJycpICsgJ18nICsgc291cmNlXHJcblx0ICBcdHRoaXMudGl0bGUgPSB0aXRsZS8v5ZCN56ewXHJcblx0ICBcdHRoaXMuc29uZ0lkID0gc29uZ0lkIHx8ICcnLC8v5q2M5puySURcclxuXHQgIFx0dGhpcy5seXJpY0lkID0gbHlyaWNJZCB8fCAnJywvL+atjOivjUlEXHJcblx0ICBcdHRoaXMuY29tbWVudElkID0gY29tbWVudElkIHx8ICcnLC8v6K+E6K66SURcclxuXHQgIFx0dGhpcy5zcmMgPSBzcmMgfHwgJycvL+aSreaUvui3r+W+hFxyXG5cdCAgXHR0aGlzLmx5cmljID0gbHlyaWMgfHwgJycvL+atjOivjVxyXG5cdCAgXHR0aGlzLmNvdmVyID0gY292ZXIgfHwgJy9zdGF0aWMvbXVzaWMvbXVzaWMtYmcuanBnJy8v5bCB6Z2iXHJcblx0ICBcdHRoaXMuc2luZ2VyID0gc2luZ2VyIHx8ICfmnKrnn6XmrYzmiYsnLy/mrYzmiYtcclxuXHQgIFx0dGhpcy5kZXNjID0gZGVzYyB8fCAnJy8v5LuL57uNXHJcblx0ICBcdHRoaXMucGF5cGxheSA9IHBheXBsYXkgfHwgZmFsc2UvL+aYr+WQpumcgOimgeaUr+S7mOaSreaUvlxyXG5cdCAgXHR0aGlzLnBsYXludW0gPSBwbGF5bnVtIHx8IDAvL+aSreaUvuasoeaVsFxyXG5cdCAgXHR0aGlzLmV4dHJhID0gZXh0cmEgfHwge30vL+mZhOWKoOWtl+autVxyXG5cdCAgXHR0aGlzLnR5cGUgPSAnc29uZycvL+WNleabsuexu+Wei1xyXG5cdCAgXHR0aGlzLnNvdXJjZSA9IHNvdXJjZS8v5p2l5rqQXHJcblx0fVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/*!****************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/constructor/album.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}var Album =\nfunction Album(_ref) {var albumId = _ref.albumId,commentId = _ref.commentId,title = _ref.title,cover = _ref.cover,desc = _ref.desc,song = _ref.song,creator = _ref.creator,playnum = _ref.playnum,extra = _ref.extra,type = _ref.type,source = _ref.source;_classCallCheck(this, Album);\n  this.id = albumId + '_' + source;\n  this.albumId = albumId; //专辑ID\n  this.commentId = commentId || '', //评论ID\n  this.title = title; //名称\n  this.cover = cover || '/static/music/music-bg.jpg'; //封面\n  this.desc = desc || ''; //介绍\n  this.song = song || []; //单曲集合\n  this.creator = creator || '不详'; //创建者\n  this.playnum = playnum || 0; //播放次数\n  this.extra = extra || {}; //附加字段\n  this.type = type; //type包含 top:<排行榜> banner:<轮播图> album:<歌单> newAlbum: <新碟>\n  this.source = source; //来源\n};exports.default = Album;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2NvbnN0cnVjdG9yL2FsYnVtLmpzIl0sIm5hbWVzIjpbIkFsYnVtIiwiYWxidW1JZCIsImNvbW1lbnRJZCIsInRpdGxlIiwiY292ZXIiLCJkZXNjIiwic29uZyIsImNyZWF0b3IiLCJwbGF5bnVtIiwiZXh0cmEiLCJ0eXBlIiwic291cmNlIiwiaWQiXSwibWFwcGluZ3MiOiJnUEFBcUJBLEs7QUFDcEIscUJBQW1HLEtBQXRGQyxPQUFzRixRQUF0RkEsT0FBc0YsQ0FBN0VDLFNBQTZFLFFBQTdFQSxTQUE2RSxDQUFsRUMsS0FBa0UsUUFBbEVBLEtBQWtFLENBQTNEQyxLQUEyRCxRQUEzREEsS0FBMkQsQ0FBcERDLElBQW9ELFFBQXBEQSxJQUFvRCxDQUE5Q0MsSUFBOEMsUUFBOUNBLElBQThDLENBQXhDQyxPQUF3QyxRQUF4Q0EsT0FBd0MsQ0FBL0JDLE9BQStCLFFBQS9CQSxPQUErQixDQUF0QkMsS0FBc0IsUUFBdEJBLEtBQXNCLENBQWZDLElBQWUsUUFBZkEsSUFBZSxDQUFUQyxNQUFTLFFBQVRBLE1BQVM7QUFDbEcsT0FBS0MsRUFBTCxHQUFVWCxPQUFPLEdBQUcsR0FBVixHQUFnQlUsTUFBMUI7QUFDQSxPQUFLVixPQUFMLEdBQWVBLE9BQWYsQ0FGa0csQ0FFM0U7QUFDdkIsT0FBS0MsU0FBTCxHQUFpQkEsU0FBUyxJQUFJLEVBQTlCLEVBQWtDO0FBQ2xDLE9BQUtDLEtBQUwsR0FBYUEsS0FEYixDQUhrRyxDQUkvRTtBQUNuQixPQUFLQyxLQUFMLEdBQWFBLEtBQUssSUFBSSw0QkFBdEIsQ0FMa0csQ0FLL0M7QUFDbkQsT0FBS0MsSUFBTCxHQUFZQSxJQUFJLElBQUksRUFBcEIsQ0FOa0csQ0FNM0U7QUFDdkIsT0FBS0MsSUFBTCxHQUFZQSxJQUFJLElBQUksRUFBcEIsQ0FQa0csQ0FPM0U7QUFDdkIsT0FBS0MsT0FBTCxHQUFlQSxPQUFPLElBQUksSUFBMUIsQ0FSa0csQ0FRbkU7QUFDL0IsT0FBS0MsT0FBTCxHQUFlQSxPQUFPLElBQUksQ0FBMUIsQ0FUa0csQ0FTdEU7QUFDNUIsT0FBS0MsS0FBTCxHQUFhQSxLQUFLLElBQUksRUFBdEIsQ0FWa0csQ0FVekU7QUFDekIsT0FBS0MsSUFBTCxHQUFZQSxJQUFaLENBWGtHLENBV2pGO0FBQ2pCLE9BQUtDLE1BQUwsR0FBY0EsTUFBZCxDQVprRyxDQVk3RTtBQUNyQixDIiwiZmlsZSI6IjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWxidW0ge1xyXG5cdGNvbnN0cnVjdG9yKHthbGJ1bUlkLCBjb21tZW50SWQsIHRpdGxlLCBjb3ZlciwgZGVzYywgc29uZywgY3JlYXRvciwgcGxheW51bSwgZXh0cmEsIHR5cGUsIHNvdXJjZX0pIHtcclxuXHRcdHRoaXMuaWQgPSBhbGJ1bUlkICsgJ18nICsgc291cmNlXHJcblx0XHR0aGlzLmFsYnVtSWQgPSBhbGJ1bUlkIC8v5LiT6L6RSURcclxuXHRcdHRoaXMuY29tbWVudElkID0gY29tbWVudElkIHx8ICcnLCAvL+ivhOiuuklEXHJcblx0XHR0aGlzLnRpdGxlID0gdGl0bGUgLy/lkI3np7BcclxuXHRcdHRoaXMuY292ZXIgPSBjb3ZlciB8fCAnL3N0YXRpYy9tdXNpYy9tdXNpYy1iZy5qcGcnIC8v5bCB6Z2iXHJcblx0XHR0aGlzLmRlc2MgPSBkZXNjIHx8ICcnIC8v5LuL57uNXHJcblx0XHR0aGlzLnNvbmcgPSBzb25nIHx8IFtdIC8v5Y2V5puy6ZuG5ZCIXHJcblx0XHR0aGlzLmNyZWF0b3IgPSBjcmVhdG9yIHx8ICfkuI3or6YnIC8v5Yib5bu66ICFXHJcblx0XHR0aGlzLnBsYXludW0gPSBwbGF5bnVtIHx8IDAgLy/mkq3mlL7mrKHmlbBcclxuXHRcdHRoaXMuZXh0cmEgPSBleHRyYSB8fCB7fSAvL+mZhOWKoOWtl+autVxyXG5cdFx0dGhpcy50eXBlID0gdHlwZSAvL3R5cGXljIXlkKsgdG9wOjzmjpLooYzmppw+IGJhbm5lcjo86L2u5pKt5Zu+PiBhbGJ1bTo85q2M5Y2VPiBuZXdBbGJ1bTogPOaWsOeinz5cclxuXHRcdHRoaXMuc291cmNlID0gc291cmNlIC8v5p2l5rqQXHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/*!*****************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/constructor/singer.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}var Singer =\nfunction Singer(_ref) {var singerId = _ref.singerId,title = _ref.title,cover = _ref.cover,desc = _ref.desc,song = _ref.song,albumSize = _ref.albumSize,extra = _ref.extra,source = _ref.source;_classCallCheck(this, Singer);\n  this.id = singerId + '_' + source;\n  this.singerId = singerId; //歌手ID\n  this.title = title; //歌手名称\n  this.cover = cover || '/static/music/music-bg.jpg'; //歌手封面\n  this.desc = desc || ''; //歌手介绍\n  this.song = song || []; //单曲集合\n  this.albumSize = albumSize || 0; //专辑数量\n  this.extra = extra || {}; //附加字段\n  this.type = 'singer'; //歌手类型\n  this.source = source; //来源\n};exports.default = Singer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2NvbnN0cnVjdG9yL3Npbmdlci5qcyJdLCJuYW1lcyI6WyJTaW5nZXIiLCJzaW5nZXJJZCIsInRpdGxlIiwiY292ZXIiLCJkZXNjIiwic29uZyIsImFsYnVtU2l6ZSIsImV4dHJhIiwic291cmNlIiwiaWQiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiZ1BBQXFCQSxNO0FBQ3BCLHNCQUE0RSxLQUEvREMsUUFBK0QsUUFBL0RBLFFBQStELENBQXJEQyxLQUFxRCxRQUFyREEsS0FBcUQsQ0FBOUNDLEtBQThDLFFBQTlDQSxLQUE4QyxDQUF2Q0MsSUFBdUMsUUFBdkNBLElBQXVDLENBQWpDQyxJQUFpQyxRQUFqQ0EsSUFBaUMsQ0FBM0JDLFNBQTJCLFFBQTNCQSxTQUEyQixDQUFoQkMsS0FBZ0IsUUFBaEJBLEtBQWdCLENBQVRDLE1BQVMsUUFBVEEsTUFBUztBQUMzRSxPQUFLQyxFQUFMLEdBQVVSLFFBQVEsR0FBRyxHQUFYLEdBQWlCTyxNQUEzQjtBQUNFLE9BQUtQLFFBQUwsR0FBZ0JBLFFBQWhCLENBRnlFLENBRWpEO0FBQ3hCLE9BQUtDLEtBQUwsR0FBYUEsS0FBYixDQUh5RSxDQUd2RDtBQUNsQixPQUFLQyxLQUFMLEdBQWFBLEtBQUssSUFBSSw0QkFBdEIsQ0FKeUUsQ0FJdkI7QUFDbEQsT0FBS0MsSUFBTCxHQUFZQSxJQUFJLElBQUksRUFBcEIsQ0FMeUUsQ0FLbkQ7QUFDdEIsT0FBS0MsSUFBTCxHQUFZQSxJQUFJLElBQUksRUFBcEIsQ0FOeUUsQ0FNbkQ7QUFDdEIsT0FBS0MsU0FBTCxHQUFpQkEsU0FBUyxJQUFJLENBQTlCLENBUHlFLENBTzFDO0FBQy9CLE9BQUtDLEtBQUwsR0FBYUEsS0FBSyxJQUFJLEVBQXRCLENBUnlFLENBUWpEO0FBQ3hCLE9BQUtHLElBQUwsR0FBWSxRQUFaLENBVHlFLENBU3BEO0FBQ3JCLE9BQUtGLE1BQUwsR0FBY0EsTUFBZCxDQVZ5RSxDQVVyRDtBQUN0QixDIiwiZmlsZSI6IjQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2luZ2VyIHtcclxuXHRjb25zdHJ1Y3Rvcih7c2luZ2VySWQsIHRpdGxlLCBjb3ZlciwgZGVzYywgc29uZywgYWxidW1TaXplLCBleHRyYSwgc291cmNlfSkge1xyXG5cdFx0dGhpcy5pZCA9IHNpbmdlcklkICsgJ18nICsgc291cmNlXHJcblx0ICBcdHRoaXMuc2luZ2VySWQgPSBzaW5nZXJJZC8v5q2M5omLSURcclxuXHQgIFx0dGhpcy50aXRsZSA9IHRpdGxlLy/mrYzmiYvlkI3np7BcclxuXHQgIFx0dGhpcy5jb3ZlciA9IGNvdmVyIHx8ICcvc3RhdGljL211c2ljL211c2ljLWJnLmpwZycvL+atjOaJi+WwgemdolxyXG5cdCAgXHR0aGlzLmRlc2MgPSBkZXNjIHx8ICcnLy/mrYzmiYvku4vnu41cclxuXHQgIFx0dGhpcy5zb25nID0gc29uZyB8fCBbXS8v5Y2V5puy6ZuG5ZCIXHJcblx0ICBcdHRoaXMuYWxidW1TaXplID0gYWxidW1TaXplIHx8IDAvL+S4k+i+keaVsOmHj1xyXG5cdCAgXHR0aGlzLmV4dHJhID0gZXh0cmEgfHwge30vL+mZhOWKoOWtl+autVxyXG5cdCAgXHR0aGlzLnR5cGUgPSAnc2luZ2VyJyAvL+atjOaJi+exu+Wei1xyXG5cdCAgXHR0aGlzLnNvdXJjZSA9IHNvdXJjZS8v5p2l5rqQXHJcblx0fVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/*!***********************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/other/asrsea.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _cryptoJs = _interopRequireDefault(__webpack_require__(/*! @/assets/crypto-js/crypto-js.js */ 51));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction aes(params, key) {\n  var c = _cryptoJs.default.enc.Utf8.parse(key);\n  var d = _cryptoJs.default.enc.Utf8.parse(\"0102030405060708\");\n  var e = _cryptoJs.default.enc.Utf8.parse(params);\n  var f = _cryptoJs.default.AES.encrypt(e, c, {\n    iv: d,\n    mode: _cryptoJs.default.mode.CBC });\n\n  return f.toString();\n}\n\nfunction params(data, key) {\n  var param = aes(JSON.stringify(data), '0CoJUm6Qyw8W8jud');\n  return aes(param, key);\n}var _default =\n\nparams;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL290aGVyL2FzcnNlYS5qcyJdLCJuYW1lcyI6WyJhZXMiLCJwYXJhbXMiLCJrZXkiLCJjIiwiQ3J5cHRvSlMiLCJlbmMiLCJVdGY4IiwicGFyc2UiLCJkIiwiZSIsImYiLCJBRVMiLCJlbmNyeXB0IiwiaXYiLCJtb2RlIiwiQ0JDIiwidG9TdHJpbmciLCJkYXRhIiwicGFyYW0iLCJKU09OIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoidUZBQUEsdUc7O0FBRUEsU0FBU0EsR0FBVCxDQUFhQyxNQUFiLEVBQXFCQyxHQUFyQixFQUEwQjtBQUN6QixNQUFNQyxDQUFDLEdBQUdDLGtCQUFTQyxHQUFULENBQWFDLElBQWIsQ0FBa0JDLEtBQWxCLENBQXdCTCxHQUF4QixDQUFWO0FBQ0EsTUFBTU0sQ0FBQyxHQUFHSixrQkFBU0MsR0FBVCxDQUFhQyxJQUFiLENBQWtCQyxLQUFsQixDQUF3QixrQkFBeEIsQ0FBVjtBQUNBLE1BQU1FLENBQUMsR0FBR0wsa0JBQVNDLEdBQVQsQ0FBYUMsSUFBYixDQUFrQkMsS0FBbEIsQ0FBd0JOLE1BQXhCLENBQVY7QUFDQSxNQUFNUyxDQUFDLEdBQUdOLGtCQUFTTyxHQUFULENBQWFDLE9BQWIsQ0FBcUJILENBQXJCLEVBQXdCTixDQUF4QixFQUEyQjtBQUNwQ1UsTUFBRSxFQUFFTCxDQURnQztBQUVwQ00sUUFBSSxFQUFFVixrQkFBU1UsSUFBVCxDQUFjQyxHQUZnQixFQUEzQixDQUFWOztBQUlBLFNBQU9MLENBQUMsQ0FBQ00sUUFBRixFQUFQO0FBQ0E7O0FBRUQsU0FBU2YsTUFBVCxDQUFnQmdCLElBQWhCLEVBQXNCZixHQUF0QixFQUEyQjtBQUMxQixNQUFNZ0IsS0FBSyxHQUFHbEIsR0FBRyxDQUFDbUIsSUFBSSxDQUFDQyxTQUFMLENBQWVILElBQWYsQ0FBRCxFQUF1QixrQkFBdkIsQ0FBakI7QUFDQSxTQUFPakIsR0FBRyxDQUFDa0IsS0FBRCxFQUFRaEIsR0FBUixDQUFWO0FBQ0EsQzs7QUFFY0QsTSIsImZpbGUiOiI1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDcnlwdG9KUyBmcm9tIFwiQC9hc3NldHMvY3J5cHRvLWpzL2NyeXB0by1qcy5qc1wiXHJcblxyXG5mdW5jdGlvbiBhZXMocGFyYW1zLCBrZXkpIHtcclxuXHRjb25zdCBjID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2Uoa2V5KVxyXG5cdGNvbnN0IGQgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcIjAxMDIwMzA0MDUwNjA3MDhcIilcclxuXHRjb25zdCBlID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UocGFyYW1zKVxyXG5cdGNvbnN0IGYgPSBDcnlwdG9KUy5BRVMuZW5jcnlwdChlLCBjLCB7XHJcblx0XHRpdjogZCxcclxuXHRcdG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDXHJcblx0fSk7XHJcblx0cmV0dXJuIGYudG9TdHJpbmcoKVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJhbXMoZGF0YSwga2V5KSB7XHJcblx0Y29uc3QgcGFyYW0gPSBhZXMoSlNPTi5zdHJpbmdpZnkoZGF0YSksICcwQ29KVW02UXl3OFc4anVkJylcclxuXHRyZXR1cm4gYWVzKHBhcmFtLCBrZXkpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBhcmFtc1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/*!******************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/crypto-js/crypto-js.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_crypto, global, __webpack_provided_global_dot_crypto) {;(function (root, factory) {\n  if (true) {\n    // CommonJS\n    module.exports = exports = factory();\n  } else\n  {}\n})(this, function () {\n\n  /*globals window, global, require*/\n\n  /**\n                                       * CryptoJS core components.\n                                       */\n  var CryptoJS = CryptoJS || function (Math, undefined) {\n\n    var crypto;\n\n    // Native crypto from window (Browser)\n    if (typeof window !== 'undefined' && __webpack_provided_window_dot_crypto) {\n      crypto = __webpack_provided_window_dot_crypto;\n    }\n\n    // Native crypto in web worker (Browser)\n    if (typeof self !== 'undefined' && self.crypto) {\n      crypto = self.crypto;\n    }\n\n    // Native crypto from worker\n    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n      crypto = globalThis.crypto;\n    }\n\n    // Native (experimental IE 11) crypto from window (Browser)\n    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n      crypto = window.msCrypto;\n    }\n\n    // Native crypto from global (NodeJS)\n    if (!crypto && typeof global !== 'undefined' && __webpack_provided_global_dot_crypto) {\n      crypto = __webpack_provided_global_dot_crypto;\n    }\n\n    // Native crypto import via require (NodeJS)\n    if (!crypto && \"function\" === 'function') {\n      try {\n        crypto = __webpack_require__(/*! crypto */ 53);\n      } catch (err) {}\n    }\n\n    /*\n       * Cryptographically secure pseudorandom number generator\n       *\n       * As Math.random() is cryptographically not safe to use\n       */\n    var cryptoSecureRandomInt = function cryptoSecureRandomInt() {\n      if (crypto) {\n        // Use getRandomValues method (Browser)\n        if (typeof crypto.getRandomValues === 'function') {\n          try {\n            return crypto.getRandomValues(new Uint32Array(1))[0];\n          } catch (err) {}\n        }\n\n        // Use randomBytes method (NodeJS)\n        if (typeof crypto.randomBytes === 'function') {\n          try {\n            return crypto.randomBytes(4).readInt32LE();\n          } catch (err) {}\n        }\n      }\n\n      throw new Error('Native crypto module could not be used to get secure random number.');\n    };\n\n    /*\n        * Local polyfill of Object.create\n         */\n\n    var create = Object.create || function () {\n      function F() {}\n\n      return function (obj) {\n        var subtype;\n\n        F.prototype = obj;\n\n        subtype = new F();\n\n        F.prototype = null;\n\n        return subtype;\n      };\n    }();\n\n    /**\n          * CryptoJS namespace.\n          */\n    var C = {};\n\n    /**\n                 * Library namespace.\n                 */\n    var C_lib = C.lib = {};\n\n    /**\n                             * Base object for prototypal inheritance.\n                             */\n    var Base = C_lib.Base = function () {\n\n\n      return {\n        /**\n                * Creates a new object that inherits from this object.\n                *\n                * @param {Object} overrides Properties to copy into the new object.\n                *\n                * @return {Object} The new object.\n                *\n                * @static\n                *\n                * @example\n                *\n                *     var MyType = CryptoJS.lib.Base.extend({\n                *         field: 'value',\n                *\n                *         method: function () {\n                *         }\n                *     });\n                */\n        extend: function extend(overrides) {\n          // Spawn\n          var subtype = create(this);\n\n          // Augment\n          if (overrides) {\n            subtype.mixIn(overrides);\n          }\n\n          // Create default initializer\n          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n            subtype.init = function () {\n              subtype.$super.init.apply(this, arguments);\n            };\n          }\n\n          // Initializer's prototype is the subtype object\n          subtype.init.prototype = subtype;\n\n          // Reference supertype\n          subtype.$super = this;\n\n          return subtype;\n        },\n\n        /**\n            * Extends this object and runs the init method.\n            * Arguments to create() will be passed to init().\n            *\n            * @return {Object} The new object.\n            *\n            * @static\n            *\n            * @example\n            *\n            *     var instance = MyType.create();\n            */\n        create: function create() {\n          var instance = this.extend();\n          instance.init.apply(instance, arguments);\n\n          return instance;\n        },\n\n        /**\n            * Initializes a newly created object.\n            * Override this method to add some logic when your objects are created.\n            *\n            * @example\n            *\n            *     var MyType = CryptoJS.lib.Base.extend({\n            *         init: function () {\n            *             // ...\n            *         }\n            *     });\n            */\n        init: function init() {\n        },\n\n        /**\n            * Copies properties into this object.\n            *\n            * @param {Object} properties The properties to mix in.\n            *\n            * @example\n            *\n            *     MyType.mixIn({\n            *         field: 'value'\n            *     });\n            */\n        mixIn: function mixIn(properties) {\n          for (var propertyName in properties) {\n            if (properties.hasOwnProperty(propertyName)) {\n              this[propertyName] = properties[propertyName];\n            }\n          }\n\n          // IE won't copy toString using the loop above\n          if (properties.hasOwnProperty('toString')) {\n            this.toString = properties.toString;\n          }\n        },\n\n        /**\n            * Creates a copy of this object.\n            *\n            * @return {Object} The clone.\n            *\n            * @example\n            *\n            *     var clone = instance.clone();\n            */\n        clone: function clone() {\n          return this.init.prototype.extend(this);\n        } };\n\n    }();\n\n    /**\n          * An array of 32-bit words.\n          *\n          * @property {Array} words The array of 32-bit words.\n          * @property {number} sigBytes The number of significant bytes in this word array.\n          */\n    var WordArray = C_lib.WordArray = Base.extend({\n      /**\n                                                     * Initializes a newly created word array.\n                                                     *\n                                                     * @param {Array} words (Optional) An array of 32-bit words.\n                                                     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n                                                     *\n                                                     * @example\n                                                     *\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create();\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n                                                     */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 4;\n        }\n      },\n\n      /**\n          * Converts this word array to a string.\n          *\n          * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n          *\n          * @return {string} The stringified word array.\n          *\n          * @example\n          *\n          *     var string = wordArray + '';\n          *     var string = wordArray.toString();\n          *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n          */\n      toString: function toString(encoder) {\n        return (encoder || Hex).stringify(this);\n      },\n\n      /**\n          * Concatenates a word array to this word array.\n          *\n          * @param {WordArray} wordArray The word array to append.\n          *\n          * @return {WordArray} This word array.\n          *\n          * @example\n          *\n          *     wordArray1.concat(wordArray2);\n          */\n      concat: function concat(wordArray) {\n        // Shortcuts\n        var thisWords = this.words;\n        var thatWords = wordArray.words;\n        var thisSigBytes = this.sigBytes;\n        var thatSigBytes = wordArray.sigBytes;\n\n        // Clamp excess bits\n        this.clamp();\n\n        // Concat\n        if (thisSigBytes % 4) {\n          // Copy one byte at a time\n          for (var i = 0; i < thatSigBytes; i++) {\n            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n          }\n        } else {\n          // Copy one word at a time\n          for (var j = 0; j < thatSigBytes; j += 4) {\n            thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];\n          }\n        }\n        this.sigBytes += thatSigBytes;\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Removes insignificant bits.\n          *\n          * @example\n          *\n          *     wordArray.clamp();\n          */\n      clamp: function clamp() {\n        // Shortcuts\n        var words = this.words;\n        var sigBytes = this.sigBytes;\n\n        // Clamp\n        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n        words.length = Math.ceil(sigBytes / 4);\n      },\n\n      /**\n          * Creates a copy of this word array.\n          *\n          * @return {WordArray} The clone.\n          *\n          * @example\n          *\n          *     var clone = wordArray.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone.words = this.words.slice(0);\n\n        return clone;\n      },\n\n      /**\n          * Creates a word array filled with random bytes.\n          *\n          * @param {number} nBytes The number of random bytes to generate.\n          *\n          * @return {WordArray} The random word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.lib.WordArray.random(16);\n          */\n      random: function random(nBytes) {\n        var words = [];\n\n        for (var i = 0; i < nBytes; i += 4) {\n          words.push(cryptoSecureRandomInt());\n        }\n\n        return new WordArray.init(words, nBytes);\n      } });\n\n\n    /**\n             * Encoder namespace.\n             */\n    var C_enc = C.enc = {};\n\n    /**\n                             * Hex encoding strategy.\n                             */\n    var Hex = C_enc.Hex = {\n      /**\n                             * Converts a word array to a hex string.\n                             *\n                             * @param {WordArray} wordArray The word array.\n                             *\n                             * @return {string} The hex string.\n                             *\n                             * @static\n                             *\n                             * @example\n                             *\n                             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n                             */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var hexChars = [];\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          hexChars.push((bite >>> 4).toString(16));\n          hexChars.push((bite & 0x0f).toString(16));\n        }\n\n        return hexChars.join('');\n      },\n\n      /**\n          * Converts a hex string to a word array.\n          *\n          * @param {string} hexStr The hex string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n          */\n      parse: function parse(hexStr) {\n        // Shortcut\n        var hexStrLength = hexStr.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < hexStrLength; i += 2) {\n          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n        }\n\n        return new WordArray.init(words, hexStrLength / 2);\n      } };\n\n\n    /**\n            * Latin1 encoding strategy.\n            */\n    var Latin1 = C_enc.Latin1 = {\n      /**\n                                   * Converts a word array to a Latin1 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Latin1 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var latin1Chars = [];\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          latin1Chars.push(String.fromCharCode(bite));\n        }\n\n        return latin1Chars.join('');\n      },\n\n      /**\n          * Converts a Latin1 string to a word array.\n          *\n          * @param {string} latin1Str The Latin1 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n          */\n      parse: function parse(latin1Str) {\n        // Shortcut\n        var latin1StrLength = latin1Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < latin1StrLength; i++) {\n          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n        }\n\n        return new WordArray.init(words, latin1StrLength);\n      } };\n\n\n    /**\n            * UTF-8 encoding strategy.\n            */\n    var Utf8 = C_enc.Utf8 = {\n      /**\n                               * Converts a word array to a UTF-8 string.\n                               *\n                               * @param {WordArray} wordArray The word array.\n                               *\n                               * @return {string} The UTF-8 string.\n                               *\n                               * @static\n                               *\n                               * @example\n                               *\n                               *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n                               */\n      stringify: function stringify(wordArray) {\n        try {\n          return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n        } catch (e) {\n          throw new Error('Malformed UTF-8 data');\n        }\n      },\n\n      /**\n          * Converts a UTF-8 string to a word array.\n          *\n          * @param {string} utf8Str The UTF-8 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n          */\n      parse: function parse(utf8Str) {\n        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n      } };\n\n\n    /**\n            * Abstract buffered block algorithm template.\n            *\n            * The property blockSize must be implemented in a concrete subtype.\n            *\n            * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n            */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n      /**\n                                                                               * Resets this block algorithm's data buffer to its initial state.\n                                                                               *\n                                                                               * @example\n                                                                               *\n                                                                               *     bufferedBlockAlgorithm.reset();\n                                                                               */\n      reset: function reset() {\n        // Initial values\n        this._data = new WordArray.init();\n        this._nDataBytes = 0;\n      },\n\n      /**\n          * Adds new data to this block algorithm's buffer.\n          *\n          * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n          *\n          * @example\n          *\n          *     bufferedBlockAlgorithm._append('data');\n          *     bufferedBlockAlgorithm._append(wordArray);\n          */\n      _append: function _append(data) {\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof data == 'string') {\n          data = Utf8.parse(data);\n        }\n\n        // Append\n        this._data.concat(data);\n        this._nDataBytes += data.sigBytes;\n      },\n\n      /**\n          * Processes available data blocks.\n          *\n          * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n          *\n          * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n          *\n          * @return {WordArray} The processed data.\n          *\n          * @example\n          *\n          *     var processedData = bufferedBlockAlgorithm._process();\n          *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n          */\n      _process: function _process(doFlush) {\n        var processedWords;\n\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var dataSigBytes = data.sigBytes;\n        var blockSize = this.blockSize;\n        var blockSizeBytes = blockSize * 4;\n\n        // Count blocks ready\n        var nBlocksReady = dataSigBytes / blockSizeBytes;\n        if (doFlush) {\n          // Round up to include partial blocks\n          nBlocksReady = Math.ceil(nBlocksReady);\n        } else {\n          // Round down to include only full blocks,\n          // less the number of blocks that must remain in the buffer\n          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n        }\n\n        // Count words ready\n        var nWordsReady = nBlocksReady * blockSize;\n\n        // Count bytes ready\n        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n        // Process blocks\n        if (nWordsReady) {\n          for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n            // Perform concrete-algorithm logic\n            this._doProcessBlock(dataWords, offset);\n          }\n\n          // Remove processed words\n          processedWords = dataWords.splice(0, nWordsReady);\n          data.sigBytes -= nBytesReady;\n        }\n\n        // Return processed words\n        return new WordArray.init(processedWords, nBytesReady);\n      },\n\n      /**\n          * Creates a copy of this object.\n          *\n          * @return {Object} The clone.\n          *\n          * @example\n          *\n          *     var clone = bufferedBlockAlgorithm.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone._data = this._data.clone();\n\n        return clone;\n      },\n\n      _minBufferSize: 0 });\n\n\n    /**\n                             * Abstract hasher template.\n                             *\n                             * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n                             */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n      /**\n                                                                 * Configuration options.\n                                                                 */\n      cfg: Base.extend(),\n\n      /**\n                           * Initializes a newly created hasher.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n                           *\n                           * @example\n                           *\n                           *     var hasher = CryptoJS.algo.SHA256.create();\n                           */\n      init: function init(cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg);\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this hasher to its initial state.\n          *\n          * @example\n          *\n          *     hasher.reset();\n          */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this);\n\n        // Perform concrete-hasher logic\n        this._doReset();\n      },\n\n      /**\n          * Updates this hasher with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {Hasher} This hasher.\n          *\n          * @example\n          *\n          *     hasher.update('message');\n          *     hasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        // Append\n        this._append(messageUpdate);\n\n        // Update the hash\n        this._process();\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Finalizes the hash computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The hash.\n          *\n          * @example\n          *\n          *     var hash = hasher.finalize();\n          *     var hash = hasher.finalize('message');\n          *     var hash = hasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Final message update\n        if (messageUpdate) {\n          this._append(messageUpdate);\n        }\n\n        // Perform concrete-hasher logic\n        var hash = this._doFinalize();\n\n        return hash;\n      },\n\n      blockSize: 512 / 32,\n\n      /**\n                            * Creates a shortcut function to a hasher's object interface.\n                            *\n                            * @param {Hasher} hasher The hasher to create a helper for.\n                            *\n                            * @return {Function} The shortcut function.\n                            *\n                            * @static\n                            *\n                            * @example\n                            *\n                            *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n                            */\n      _createHelper: function _createHelper(hasher) {\n        return function (message, cfg) {\n          return new hasher.init(cfg).finalize(message);\n        };\n      },\n\n      /**\n          * Creates a shortcut function to the HMAC's object interface.\n          *\n          * @param {Hasher} hasher The hasher to use in this HMAC helper.\n          *\n          * @return {Function} The shortcut function.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n          */\n      _createHmacHelper: function _createHmacHelper(hasher) {\n        return function (message, key) {\n          return new C_algo.HMAC.init(hasher, key).finalize(message);\n        };\n      } });\n\n\n    /**\n             * Algorithm namespace.\n             */\n    var C_algo = C.algo = {};\n\n    return C;\n  }(Math);\n\n\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var X32WordArray = C_lib.WordArray;\n\n    /**\n                                         * x64 namespace.\n                                         */\n    var C_x64 = C.x64 = {};\n\n    /**\n                             * A 64-bit word.\n                             */\n    var X64Word = C_x64.Word = Base.extend({\n      /**\n                                              * Initializes a newly created 64-bit word.\n                                              *\n                                              * @param {number} high The high 32 bits.\n                                              * @param {number} low The low 32 bits.\n                                              *\n                                              * @example\n                                              *\n                                              *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n                                              */\n      init: function init(high, low) {\n        this.high = high;\n        this.low = low;\n      }\n\n      /**\n         * Bitwise NOTs this word.\n         *\n         * @return {X64Word} A new x64-Word object after negating.\n         *\n         * @example\n         *\n         *     var negated = x64Word.not();\n         */\n      // not: function () {\n      // var high = ~this.high;\n      // var low = ~this.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise ANDs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to AND with this word.\n       *\n       * @return {X64Word} A new x64-Word object after ANDing.\n       *\n       * @example\n       *\n       *     var anded = x64Word.and(anotherX64Word);\n       */\n      // and: function (word) {\n      // var high = this.high & word.high;\n      // var low = this.low & word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise ORs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to OR with this word.\n       *\n       * @return {X64Word} A new x64-Word object after ORing.\n       *\n       * @example\n       *\n       *     var ored = x64Word.or(anotherX64Word);\n       */\n      // or: function (word) {\n      // var high = this.high | word.high;\n      // var low = this.low | word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise XORs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to XOR with this word.\n       *\n       * @return {X64Word} A new x64-Word object after XORing.\n       *\n       * @example\n       *\n       *     var xored = x64Word.xor(anotherX64Word);\n       */\n      // xor: function (word) {\n      // var high = this.high ^ word.high;\n      // var low = this.low ^ word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Shifts this word n bits to the left.\n       *\n       * @param {number} n The number of bits to shift.\n       *\n       * @return {X64Word} A new x64-Word object after shifting.\n       *\n       * @example\n       *\n       *     var shifted = x64Word.shiftL(25);\n       */\n      // shiftL: function (n) {\n      // if (n < 32) {\n      // var high = (this.high << n) | (this.low >>> (32 - n));\n      // var low = this.low << n;\n      // } else {\n      // var high = this.low << (n - 32);\n      // var low = 0;\n      // }\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Shifts this word n bits to the right.\n       *\n       * @param {number} n The number of bits to shift.\n       *\n       * @return {X64Word} A new x64-Word object after shifting.\n       *\n       * @example\n       *\n       *     var shifted = x64Word.shiftR(7);\n       */\n      // shiftR: function (n) {\n      // if (n < 32) {\n      // var low = (this.low >>> n) | (this.high << (32 - n));\n      // var high = this.high >>> n;\n      // } else {\n      // var low = this.high >>> (n - 32);\n      // var high = 0;\n      // }\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Rotates this word n bits to the left.\n       *\n       * @param {number} n The number of bits to rotate.\n       *\n       * @return {X64Word} A new x64-Word object after rotating.\n       *\n       * @example\n       *\n       *     var rotated = x64Word.rotL(25);\n       */\n      // rotL: function (n) {\n      // return this.shiftL(n).or(this.shiftR(64 - n));\n      // },\n\n      /**\n       * Rotates this word n bits to the right.\n       *\n       * @param {number} n The number of bits to rotate.\n       *\n       * @return {X64Word} A new x64-Word object after rotating.\n       *\n       * @example\n       *\n       *     var rotated = x64Word.rotR(7);\n       */\n      // rotR: function (n) {\n      // return this.shiftR(n).or(this.shiftL(64 - n));\n      // },\n\n      /**\n       * Adds this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to add with this word.\n       *\n       * @return {X64Word} A new x64-Word object after adding.\n       *\n       * @example\n       *\n       *     var added = x64Word.add(anotherX64Word);\n       */\n      // add: function (word) {\n      // var low = (this.low + word.low) | 0;\n      // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n      // var high = (this.high + word.high + carry) | 0;\n\n      // return X64Word.create(high, low);\n      // }\n    });\n\n    /**\n         * An array of 64-bit words.\n         *\n         * @property {Array} words The array of CryptoJS.x64.Word objects.\n         * @property {number} sigBytes The number of significant bytes in this word array.\n         */\n    var X64WordArray = C_x64.WordArray = Base.extend({\n      /**\n                                                        * Initializes a newly created word array.\n                                                        *\n                                                        * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n                                                        * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n                                                        *\n                                                        * @example\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create();\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create([\n                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n                                                        *     ]);\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create([\n                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n                                                        *     ], 10);\n                                                        */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 8;\n        }\n      },\n\n      /**\n          * Converts this 64-bit word array to a 32-bit word array.\n          *\n          * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n          *\n          * @example\n          *\n          *     var x32WordArray = x64WordArray.toX32();\n          */\n      toX32: function toX32() {\n        // Shortcuts\n        var x64Words = this.words;\n        var x64WordsLength = x64Words.length;\n\n        // Convert\n        var x32Words = [];\n        for (var i = 0; i < x64WordsLength; i++) {\n          var x64Word = x64Words[i];\n          x32Words.push(x64Word.high);\n          x32Words.push(x64Word.low);\n        }\n\n        return X32WordArray.create(x32Words, this.sigBytes);\n      },\n\n      /**\n          * Creates a copy of this word array.\n          *\n          * @return {X64WordArray} The clone.\n          *\n          * @example\n          *\n          *     var clone = x64WordArray.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n\n        // Clone \"words\" array\n        var words = clone.words = this.words.slice(0);\n\n        // Clone each X64Word object\n        var wordsLength = words.length;\n        for (var i = 0; i < wordsLength; i++) {\n          words[i] = words[i].clone();\n        }\n\n        return clone;\n      } });\n\n  })();\n\n\n  (function () {\n    // Check if typed arrays are supported\n    if (typeof ArrayBuffer != 'function') {\n      return;\n    }\n\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n\n    // Reference original init\n    var superInit = WordArray.init;\n\n    // Augment WordArray.init to handle typed arrays\n    var subInit = WordArray.init = function (typedArray) {\n      // Convert buffers to uint8\n      if (typedArray instanceof ArrayBuffer) {\n        typedArray = new Uint8Array(typedArray);\n      }\n\n      // Convert other array views to uint8\n      if (\n      typedArray instanceof Int8Array ||\n      typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray ||\n      typedArray instanceof Int16Array ||\n      typedArray instanceof Uint16Array ||\n      typedArray instanceof Int32Array ||\n      typedArray instanceof Uint32Array ||\n      typedArray instanceof Float32Array ||\n      typedArray instanceof Float64Array)\n      {\n        typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n      }\n\n      // Handle Uint8Array\n      if (typedArray instanceof Uint8Array) {\n        // Shortcut\n        var typedArrayByteLength = typedArray.byteLength;\n\n        // Extract bytes\n        var words = [];\n        for (var i = 0; i < typedArrayByteLength; i++) {\n          words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n        }\n\n        // Initialize this word array\n        superInit.call(this, words, typedArrayByteLength);\n      } else {\n        // Else call normal init\n        superInit.apply(this, arguments);\n      }\n    };\n\n    subInit.prototype = WordArray;\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n                        * UTF-16 BE encoding strategy.\n                        */\n    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n      /**\n                                                   * Converts a word array to a UTF-16 BE string.\n                                                   *\n                                                   * @param {WordArray} wordArray The word array.\n                                                   *\n                                                   * @return {string} The UTF-16 BE string.\n                                                   *\n                                                   * @static\n                                                   *\n                                                   * @example\n                                                   *\n                                                   *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n                                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var utf16Chars = [];\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\n          * Converts a UTF-16 BE string to a word array.\n          *\n          * @param {string} utf16Str The UTF-16 BE string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n          */\n      parse: function parse(utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      } };\n\n\n    /**\n            * UTF-16 LE encoding strategy.\n            */\n    C_enc.Utf16LE = {\n      /**\n                       * Converts a word array to a UTF-16 LE string.\n                       *\n                       * @param {WordArray} wordArray The word array.\n                       *\n                       * @return {string} The UTF-16 LE string.\n                       *\n                       * @static\n                       *\n                       * @example\n                       *\n                       *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n                       */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var utf16Chars = [];\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\n          * Converts a UTF-16 LE string to a word array.\n          *\n          * @param {string} utf16Str The UTF-16 LE string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n          */\n      parse: function parse(utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      } };\n\n\n    function swapEndian(word) {\n      return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n    }\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n                        * Base64 encoding strategy.\n                        */\n    var Base64 = C_enc.Base64 = {\n      /**\n                                   * Converts a word array to a Base64 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Base64 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = this._map;\n\n        // Clamp excess bits\n        wordArray.clamp();\n\n        // Convert\n        var base64Chars = [];\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        }\n\n        // Add padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n\n        return base64Chars.join('');\n      },\n\n      /**\n          * Converts a Base64 string to a word array.\n          *\n          * @param {string} base64Str The Base64 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n          */\n      parse: function parse(base64Str) {\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = this._map;\n        var reverseMap = this._reverseMap;\n\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        }\n\n        // Ignore padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        }\n\n        // Convert\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n\n      },\n\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' };\n\n\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          var bitsCombined = bits1 | bits2;\n          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n      return WordArray.create(words, nBytes);\n    }\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n                        * Base64url encoding strategy.\n                        */\n    var Base64url = C_enc.Base64url = {\n      /**\n                                         * Converts a word array to a Base64url string.\n                                         *\n                                         * @param {WordArray} wordArray The word array.\n                                         *\n                                         * @param {boolean} urlSafe Whether to use url safe\n                                         *\n                                         * @return {string} The Base64url string.\n                                         *\n                                         * @static\n                                         *\n                                         * @example\n                                         *\n                                         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\n                                         */\n      stringify: function stringify(wordArray) {var urlSafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = urlSafe ? this._safe_map : this._map;\n\n        // Clamp excess bits\n        wordArray.clamp();\n\n        // Convert\n        var base64Chars = [];\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        }\n\n        // Add padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n\n        return base64Chars.join('');\n      },\n\n      /**\n          * Converts a Base64url string to a word array.\n          *\n          * @param {string} base64Str The Base64url string.\n          *\n          * @param {boolean} urlSafe Whether to use url safe\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\n          */\n      parse: function parse(base64Str) {var urlSafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = urlSafe ? this._safe_map : this._map;\n        var reverseMap = this._reverseMap;\n\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        }\n\n        // Ignore padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        }\n\n        // Convert\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n\n      },\n\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n      _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' };\n\n\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          var bitsCombined = bits1 | bits2;\n          words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n      return WordArray.create(words, nBytes);\n    }\n  })();\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Constants table\n    var T = [];\n\n    // Compute constants\n    (function () {\n      for (var i = 0; i < 64; i++) {\n        T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;\n      }\n    })();\n\n    /**\n           * MD5 hash algorithm.\n           */\n    var MD5 = C_algo.MD5 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0x67452301, 0xefcdab89,\n        0x98badcfe, 0x10325476]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Swap endian\n        for (var i = 0; i < 16; i++) {\n          // Shortcuts\n          var offset_i = offset + i;\n          var M_offset_i = M[offset_i];\n\n          M[offset_i] =\n          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |\n          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n\n        }\n\n        // Shortcuts\n        var H = this._hash.words;\n\n        var M_offset_0 = M[offset + 0];\n        var M_offset_1 = M[offset + 1];\n        var M_offset_2 = M[offset + 2];\n        var M_offset_3 = M[offset + 3];\n        var M_offset_4 = M[offset + 4];\n        var M_offset_5 = M[offset + 5];\n        var M_offset_6 = M[offset + 6];\n        var M_offset_7 = M[offset + 7];\n        var M_offset_8 = M[offset + 8];\n        var M_offset_9 = M[offset + 9];\n        var M_offset_10 = M[offset + 10];\n        var M_offset_11 = M[offset + 11];\n        var M_offset_12 = M[offset + 12];\n        var M_offset_13 = M[offset + 13];\n        var M_offset_14 = M[offset + 14];\n        var M_offset_15 = M[offset + 15];\n\n        // Working varialbes\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n\n        // Computation\n        a = FF(a, b, c, d, M_offset_0, 7, T[0]);\n        d = FF(d, a, b, c, M_offset_1, 12, T[1]);\n        c = FF(c, d, a, b, M_offset_2, 17, T[2]);\n        b = FF(b, c, d, a, M_offset_3, 22, T[3]);\n        a = FF(a, b, c, d, M_offset_4, 7, T[4]);\n        d = FF(d, a, b, c, M_offset_5, 12, T[5]);\n        c = FF(c, d, a, b, M_offset_6, 17, T[6]);\n        b = FF(b, c, d, a, M_offset_7, 22, T[7]);\n        a = FF(a, b, c, d, M_offset_8, 7, T[8]);\n        d = FF(d, a, b, c, M_offset_9, 12, T[9]);\n        c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n        b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n        a = FF(a, b, c, d, M_offset_12, 7, T[12]);\n        d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n        c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n        b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n        a = GG(a, b, c, d, M_offset_1, 5, T[16]);\n        d = GG(d, a, b, c, M_offset_6, 9, T[17]);\n        c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n        b = GG(b, c, d, a, M_offset_0, 20, T[19]);\n        a = GG(a, b, c, d, M_offset_5, 5, T[20]);\n        d = GG(d, a, b, c, M_offset_10, 9, T[21]);\n        c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n        b = GG(b, c, d, a, M_offset_4, 20, T[23]);\n        a = GG(a, b, c, d, M_offset_9, 5, T[24]);\n        d = GG(d, a, b, c, M_offset_14, 9, T[25]);\n        c = GG(c, d, a, b, M_offset_3, 14, T[26]);\n        b = GG(b, c, d, a, M_offset_8, 20, T[27]);\n        a = GG(a, b, c, d, M_offset_13, 5, T[28]);\n        d = GG(d, a, b, c, M_offset_2, 9, T[29]);\n        c = GG(c, d, a, b, M_offset_7, 14, T[30]);\n        b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n        a = HH(a, b, c, d, M_offset_5, 4, T[32]);\n        d = HH(d, a, b, c, M_offset_8, 11, T[33]);\n        c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n        b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n        a = HH(a, b, c, d, M_offset_1, 4, T[36]);\n        d = HH(d, a, b, c, M_offset_4, 11, T[37]);\n        c = HH(c, d, a, b, M_offset_7, 16, T[38]);\n        b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n        a = HH(a, b, c, d, M_offset_13, 4, T[40]);\n        d = HH(d, a, b, c, M_offset_0, 11, T[41]);\n        c = HH(c, d, a, b, M_offset_3, 16, T[42]);\n        b = HH(b, c, d, a, M_offset_6, 23, T[43]);\n        a = HH(a, b, c, d, M_offset_9, 4, T[44]);\n        d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n        c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n        b = HH(b, c, d, a, M_offset_2, 23, T[47]);\n\n        a = II(a, b, c, d, M_offset_0, 6, T[48]);\n        d = II(d, a, b, c, M_offset_7, 10, T[49]);\n        c = II(c, d, a, b, M_offset_14, 15, T[50]);\n        b = II(b, c, d, a, M_offset_5, 21, T[51]);\n        a = II(a, b, c, d, M_offset_12, 6, T[52]);\n        d = II(d, a, b, c, M_offset_3, 10, T[53]);\n        c = II(c, d, a, b, M_offset_10, 15, T[54]);\n        b = II(b, c, d, a, M_offset_1, 21, T[55]);\n        a = II(a, b, c, d, M_offset_8, 6, T[56]);\n        d = II(d, a, b, c, M_offset_15, 10, T[57]);\n        c = II(c, d, a, b, M_offset_6, 15, T[58]);\n        b = II(b, c, d, a, M_offset_13, 21, T[59]);\n        a = II(a, b, c, d, M_offset_4, 6, T[60]);\n        d = II(d, a, b, c, M_offset_11, 10, T[61]);\n        c = II(c, d, a, b, M_offset_2, 15, T[62]);\n        b = II(b, c, d, a, M_offset_9, 21, T[63]);\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n\n        var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n        var nBitsTotalL = nBitsTotal;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] =\n        (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff |\n        (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;\n\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =\n        (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff |\n        (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;\n\n\n        data.sigBytes = (dataWords.length + 1) * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var hash = this._hash;\n        var H = hash.words;\n\n        // Swap endian\n        for (var i = 0; i < 4; i++) {\n          // Shortcut\n          var H_i = H[i];\n\n          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |\n          (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n        }\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    function FF(a, b, c, d, x, s, t) {\n      var n = a + (b & c | ~b & d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function GG(a, b, c, d, x, s, t) {\n      var n = a + (b & d | c & ~d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function HH(a, b, c, d, x, s, t) {\n      var n = a + (b ^ c ^ d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function II(a, b, c, d, x, s, t) {\n      var n = a + (c ^ (b | ~d)) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    /**\n       * Shortcut function to the hasher's object interface.\n       *\n       * @param {WordArray|string} message The message to hash.\n       *\n       * @return {WordArray} The hash.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var hash = CryptoJS.MD5('message');\n       *     var hash = CryptoJS.MD5(wordArray);\n       */\n    C.MD5 = Hasher._createHelper(MD5);\n\n    /**\n                                        * Shortcut function to the HMAC's object interface.\n                                        *\n                                        * @param {WordArray|string} message The message to hash.\n                                        * @param {WordArray|string} key The secret key.\n                                        *\n                                        * @return {WordArray} The HMAC.\n                                        *\n                                        * @static\n                                        *\n                                        * @example\n                                        *\n                                        *     var hmac = CryptoJS.HmacMD5(message, key);\n                                        */\n    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n                 * SHA-1 hash algorithm.\n                 */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0x67452301, 0xefcdab89,\n        0x98badcfe, 0x10325476,\n        0xc3d2e1f0]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words;\n\n        // Working variables\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n\n        // Computation\n        for (var i = 0; i < 80; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n            W[i] = n << 1 | n >>> 31;\n          }\n\n          var t = (a << 5 | a >>> 27) + e + W[i];\n          if (i < 20) {\n            t += (b & c | ~b & d) + 0x5a827999;\n          } else if (i < 40) {\n            t += (b ^ c ^ d) + 0x6ed9eba1;\n          } else if (i < 60) {\n            t += (b & c | b & d | c & d) - 0x70e44324;\n          } else /* if (i < 80) */{\n              t += (b ^ c ^ d) - 0x359d3e2a;\n            }\n\n          e = d;\n          d = c;\n          c = b << 30 | b >>> 2;\n          b = a;\n          a = t;\n        }\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Return final computed hash\n        return this._hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA1('message');\n             *     var hash = CryptoJS.SHA1(wordArray);\n             */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n                                          * Shortcut function to the HMAC's object interface.\n                                          *\n                                          * @param {WordArray|string} message The message to hash.\n                                          * @param {WordArray|string} key The secret key.\n                                          *\n                                          * @return {WordArray} The HMAC.\n                                          *\n                                          * @static\n                                          *\n                                          * @example\n                                          *\n                                          *     var hmac = CryptoJS.HmacSHA1(message, key);\n                                          */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Initialization and round constants tables\n    var H = [];\n    var K = [];\n\n    // Compute constants\n    (function () {\n      function isPrime(n) {\n        var sqrtN = Math.sqrt(n);\n        for (var factor = 2; factor <= sqrtN; factor++) {\n          if (!(n % factor)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function getFractionalBits(n) {\n        return (n - (n | 0)) * 0x100000000 | 0;\n      }\n\n      var n = 2;\n      var nPrime = 0;\n      while (nPrime < 64) {\n        if (isPrime(n)) {\n          if (nPrime < 8) {\n            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n          }\n          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n          nPrime++;\n        }\n\n        n++;\n      }\n    })();\n\n    // Reusable object\n    var W = [];\n\n    /**\n                 * SHA-256 hash algorithm.\n                 */\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init(H.slice(0));\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words;\n\n        // Working variables\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n        var f = H[5];\n        var g = H[6];\n        var h = H[7];\n\n        // Computation\n        for (var i = 0; i < 64; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var gamma0x = W[i - 15];\n            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (\n            gamma0x << 14 | gamma0x >>> 18) ^\n            gamma0x >>> 3;\n\n            var gamma1x = W[i - 2];\n            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (\n            gamma1x << 13 | gamma1x >>> 19) ^\n            gamma1x >>> 10;\n\n            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n          }\n\n          var ch = e & f ^ ~e & g;\n          var maj = a & b ^ a & c ^ b & c;\n\n          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n\n          var t1 = h + sigma1 + ch + K[i] + W[i];\n          var t2 = sigma0 + maj;\n\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        }\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n        H[5] = H[5] + f | 0;\n        H[6] = H[6] + g | 0;\n        H[7] = H[7] + h | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Return final computed hash\n        return this._hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA256('message');\n             *     var hash = CryptoJS.SHA256(wordArray);\n             */\n    C.SHA256 = Hasher._createHelper(SHA256);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA256(message, key);\n                                              */\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var SHA256 = C_algo.SHA256;\n\n    /**\n                                 * SHA-224 hash algorithm.\n                                 */\n    var SHA224 = C_algo.SHA224 = SHA256.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);\n\n      },\n\n      _doFinalize: function _doFinalize() {\n        var hash = SHA256._doFinalize.call(this);\n\n        hash.sigBytes -= 4;\n\n        return hash;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA224('message');\n             *     var hash = CryptoJS.SHA224(wordArray);\n             */\n    C.SHA224 = SHA256._createHelper(SHA224);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA224(message, key);\n                                              */\n    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n\n    function X64Word_create() {\n      return X64Word.create.apply(X64Word, arguments);\n    }\n\n    // Constants\n    var K = [\n    X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n    X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n    X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n    X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n    X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n    X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n    X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n    X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n    X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n    X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n    X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n    X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n    X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n    X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n    X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n    X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n    X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n    X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n    X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n    X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n    X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n    X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n    X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n    X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n    X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n    X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n    X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n    X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n    X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n    X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n    X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n    X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n    X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n    X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n    X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n    X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n    X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n    X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n    X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n    X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];\n\n\n    // Reusable objects\n    var W = [];\n    (function () {\n      for (var i = 0; i < 80; i++) {\n        W[i] = X64Word_create();\n      }\n    })();\n\n    /**\n           * SHA-512 hash algorithm.\n           */\n    var SHA512 = C_algo.SHA512 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new X64WordArray.init([\n        new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n        new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n        new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n        new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcuts\n        var H = this._hash.words;\n\n        var H0 = H[0];\n        var H1 = H[1];\n        var H2 = H[2];\n        var H3 = H[3];\n        var H4 = H[4];\n        var H5 = H[5];\n        var H6 = H[6];\n        var H7 = H[7];\n\n        var H0h = H0.high;\n        var H0l = H0.low;\n        var H1h = H1.high;\n        var H1l = H1.low;\n        var H2h = H2.high;\n        var H2l = H2.low;\n        var H3h = H3.high;\n        var H3l = H3.low;\n        var H4h = H4.high;\n        var H4l = H4.low;\n        var H5h = H5.high;\n        var H5l = H5.low;\n        var H6h = H6.high;\n        var H6l = H6.low;\n        var H7h = H7.high;\n        var H7l = H7.low;\n\n        // Working variables\n        var ah = H0h;\n        var al = H0l;\n        var bh = H1h;\n        var bl = H1l;\n        var ch = H2h;\n        var cl = H2l;\n        var dh = H3h;\n        var dl = H3l;\n        var eh = H4h;\n        var el = H4l;\n        var fh = H5h;\n        var fl = H5l;\n        var gh = H6h;\n        var gl = H6l;\n        var hh = H7h;\n        var hl = H7l;\n\n        // Rounds\n        for (var i = 0; i < 80; i++) {\n          var Wil;\n          var Wih;\n\n          // Shortcut\n          var Wi = W[i];\n\n          // Extend message\n          if (i < 16) {\n            Wih = Wi.high = M[offset + i * 2] | 0;\n            Wil = Wi.low = M[offset + i * 2 + 1] | 0;\n          } else {\n            // Gamma0\n            var gamma0x = W[i - 15];\n            var gamma0xh = gamma0x.high;\n            var gamma0xl = gamma0x.low;\n            var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;\n            var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);\n\n            // Gamma1\n            var gamma1x = W[i - 2];\n            var gamma1xh = gamma1x.high;\n            var gamma1xl = gamma1x.low;\n            var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;\n            var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);\n\n            // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n            var Wi7 = W[i - 7];\n            var Wi7h = Wi7.high;\n            var Wi7l = Wi7.low;\n\n            var Wi16 = W[i - 16];\n            var Wi16h = Wi16.high;\n            var Wi16l = Wi16.low;\n\n            Wil = gamma0l + Wi7l;\n            Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);\n            Wil = Wil + gamma1l;\n            Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);\n            Wil = Wil + Wi16l;\n            Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);\n\n            Wi.high = Wih;\n            Wi.low = Wil;\n          }\n\n          var chh = eh & fh ^ ~eh & gh;\n          var chl = el & fl ^ ~el & gl;\n          var majh = ah & bh ^ ah & ch ^ bh & ch;\n          var majl = al & bl ^ al & cl ^ bl & cl;\n\n          var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);\n          var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);\n          var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);\n          var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);\n\n          // t1 = h + sigma1 + ch + K[i] + W[i]\n          var Ki = K[i];\n          var Kih = Ki.high;\n          var Kil = Ki.low;\n\n          var t1l = hl + sigma1l;\n          var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);\n          var t1l = t1l + chl;\n          var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);\n          var t1l = t1l + Kil;\n          var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);\n          var t1l = t1l + Wil;\n          var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);\n\n          // t2 = sigma0 + maj\n          var t2l = sigma0l + majl;\n          var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);\n\n          // Update working variables\n          hh = gh;\n          hl = gl;\n          gh = fh;\n          gl = fl;\n          fh = eh;\n          fl = el;\n          el = dl + t1l | 0;\n          eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;\n          dh = ch;\n          dl = cl;\n          ch = bh;\n          cl = bl;\n          bh = ah;\n          bl = al;\n          al = t1l + t2l | 0;\n          ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;\n        }\n\n        // Intermediate hash value\n        H0l = H0.low = H0l + al;\n        H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);\n        H1l = H1.low = H1l + bl;\n        H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);\n        H2l = H2.low = H2l + cl;\n        H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);\n        H3l = H3.low = H3l + dl;\n        H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);\n        H4l = H4.low = H4l + el;\n        H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);\n        H5l = H5.low = H5l + fl;\n        H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);\n        H6l = H6.low = H6l + gl;\n        H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);\n        H7l = H7.low = H7l + hl;\n        H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Convert hash to 32-bit word array before returning\n        var hash = this._hash.toX32();\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      },\n\n      blockSize: 1024 / 32 });\n\n\n    /**\n                                * Shortcut function to the hasher's object interface.\n                                *\n                                * @param {WordArray|string} message The message to hash.\n                                *\n                                * @return {WordArray} The hash.\n                                *\n                                * @static\n                                *\n                                * @example\n                                *\n                                *     var hash = CryptoJS.SHA512('message');\n                                *     var hash = CryptoJS.SHA512(wordArray);\n                                */\n    C.SHA512 = Hasher._createHelper(SHA512);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA512(message, key);\n                                              */\n    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n    var SHA512 = C_algo.SHA512;\n\n    /**\n                                 * SHA-384 hash algorithm.\n                                 */\n    var SHA384 = C_algo.SHA384 = SHA512.extend({\n      _doReset: function _doReset() {\n        this._hash = new X64WordArray.init([\n        new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n        new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n        new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n        new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);\n\n      },\n\n      _doFinalize: function _doFinalize() {\n        var hash = SHA512._doFinalize.call(this);\n\n        hash.sigBytes -= 16;\n\n        return hash;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA384('message');\n             *     var hash = CryptoJS.SHA384(wordArray);\n             */\n    C.SHA384 = SHA512._createHelper(SHA384);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA384(message, key);\n                                              */\n    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var C_algo = C.algo;\n\n    // Constants tables\n    var RHO_OFFSETS = [];\n    var PI_INDEXES = [];\n    var ROUND_CONSTANTS = [];\n\n    // Compute Constants\n    (function () {\n      // Compute rho offset constants\n      var x = 1,y = 0;\n      for (var t = 0; t < 24; t++) {\n        RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;\n\n        var newX = y % 5;\n        var newY = (2 * x + 3 * y) % 5;\n        x = newX;\n        y = newY;\n      }\n\n      // Compute pi index constants\n      for (var x = 0; x < 5; x++) {\n        for (var y = 0; y < 5; y++) {\n          PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;\n        }\n      }\n\n      // Compute round constants\n      var LFSR = 0x01;\n      for (var i = 0; i < 24; i++) {\n        var roundConstantMsw = 0;\n        var roundConstantLsw = 0;\n\n        for (var j = 0; j < 7; j++) {\n          if (LFSR & 0x01) {\n            var bitPosition = (1 << j) - 1;\n            if (bitPosition < 32) {\n              roundConstantLsw ^= 1 << bitPosition;\n            } else /* if (bitPosition >= 32) */{\n                roundConstantMsw ^= 1 << bitPosition - 32;\n              }\n          }\n\n          // Compute next LFSR\n          if (LFSR & 0x80) {\n            // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n            LFSR = LFSR << 1 ^ 0x71;\n          } else {\n            LFSR <<= 1;\n          }\n        }\n\n        ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n      }\n    })();\n\n    // Reusable objects for temporary values\n    var T = [];\n    (function () {\n      for (var i = 0; i < 25; i++) {\n        T[i] = X64Word.create();\n      }\n    })();\n\n    /**\n           * SHA-3 hash algorithm.\n           */\n    var SHA3 = C_algo.SHA3 = Hasher.extend({\n      /**\n                                              * Configuration options.\n                                              *\n                                              * @property {number} outputLength\n                                              *   The desired number of bits in the output hash.\n                                              *   Only values permitted are: 224, 256, 384, 512.\n                                              *   Default: 512\n                                              */\n      cfg: Hasher.cfg.extend({\n        outputLength: 512 }),\n\n\n      _doReset: function _doReset() {\n        var state = this._state = [];\n        for (var i = 0; i < 25; i++) {\n          state[i] = new X64Word.init();\n        }\n\n        this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcuts\n        var state = this._state;\n        var nBlockSizeLanes = this.blockSize / 2;\n\n        // Absorb\n        for (var i = 0; i < nBlockSizeLanes; i++) {\n          // Shortcuts\n          var M2i = M[offset + 2 * i];\n          var M2i1 = M[offset + 2 * i + 1];\n\n          // Swap endian\n          M2i =\n          (M2i << 8 | M2i >>> 24) & 0x00ff00ff |\n          (M2i << 24 | M2i >>> 8) & 0xff00ff00;\n\n          M2i1 =\n          (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff |\n          (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;\n\n\n          // Absorb message into state\n          var lane = state[i];\n          lane.high ^= M2i1;\n          lane.low ^= M2i;\n        }\n\n        // Rounds\n        for (var round = 0; round < 24; round++) {\n          // Theta\n          for (var x = 0; x < 5; x++) {\n            // Mix column lanes\n            var tMsw = 0,tLsw = 0;\n            for (var y = 0; y < 5; y++) {\n              var lane = state[x + 5 * y];\n              tMsw ^= lane.high;\n              tLsw ^= lane.low;\n            }\n\n            // Temporary values\n            var Tx = T[x];\n            Tx.high = tMsw;\n            Tx.low = tLsw;\n          }\n          for (var x = 0; x < 5; x++) {\n            // Shortcuts\n            var Tx4 = T[(x + 4) % 5];\n            var Tx1 = T[(x + 1) % 5];\n            var Tx1Msw = Tx1.high;\n            var Tx1Lsw = Tx1.low;\n\n            // Mix surrounding columns\n            var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);\n            var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);\n            for (var y = 0; y < 5; y++) {\n              var lane = state[x + 5 * y];\n              lane.high ^= tMsw;\n              lane.low ^= tLsw;\n            }\n          }\n\n          // Rho Pi\n          for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n            var tMsw;\n            var tLsw;\n\n            // Shortcuts\n            var lane = state[laneIndex];\n            var laneMsw = lane.high;\n            var laneLsw = lane.low;\n            var rhoOffset = RHO_OFFSETS[laneIndex];\n\n            // Rotate lanes\n            if (rhoOffset < 32) {\n              tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;\n              tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;\n            } else /* if (rhoOffset >= 32) */{\n                tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;\n                tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;\n              }\n\n            // Transpose lanes\n            var TPiLane = T[PI_INDEXES[laneIndex]];\n            TPiLane.high = tMsw;\n            TPiLane.low = tLsw;\n          }\n\n          // Rho pi at x = y = 0\n          var T0 = T[0];\n          var state0 = state[0];\n          T0.high = state0.high;\n          T0.low = state0.low;\n\n          // Chi\n          for (var x = 0; x < 5; x++) {\n            for (var y = 0; y < 5; y++) {\n              // Shortcuts\n              var laneIndex = x + 5 * y;\n              var lane = state[laneIndex];\n              var TLane = T[laneIndex];\n              var Tx1Lane = T[(x + 1) % 5 + 5 * y];\n              var Tx2Lane = T[(x + 2) % 5 + 5 * y];\n\n              // Mix rows\n              lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;\n              lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;\n            }\n          }\n\n          // Iota\n          var lane = state[0];\n          var roundConstant = ROUND_CONSTANTS[round];\n          lane.high ^= roundConstant.high;\n          lane.low ^= roundConstant.low;\n        }\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n        var blockSizeBits = this.blockSize * 32;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;\n        dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var state = this._state;\n        var outputLengthBytes = this.cfg.outputLength / 8;\n        var outputLengthLanes = outputLengthBytes / 8;\n\n        // Squeeze\n        var hashWords = [];\n        for (var i = 0; i < outputLengthLanes; i++) {\n          // Shortcuts\n          var lane = state[i];\n          var laneMsw = lane.high;\n          var laneLsw = lane.low;\n\n          // Swap endian\n          laneMsw =\n          (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff |\n          (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;\n\n          laneLsw =\n          (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff |\n          (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;\n\n\n          // Squeeze state to retrieve hash\n          hashWords.push(laneLsw);\n          hashWords.push(laneMsw);\n        }\n\n        // Return final computed hash\n        return new WordArray.init(hashWords, outputLengthBytes);\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n\n        var state = clone._state = this._state.slice(0);\n        for (var i = 0; i < 25; i++) {\n          state[i] = state[i].clone();\n        }\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA3('message');\n             *     var hash = CryptoJS.SHA3(wordArray);\n             */\n    C.SHA3 = Hasher._createHelper(SHA3);\n\n    /**\n                                          * Shortcut function to the HMAC's object interface.\n                                          *\n                                          * @param {WordArray|string} message The message to hash.\n                                          * @param {WordArray|string} key The secret key.\n                                          *\n                                          * @return {WordArray} The HMAC.\n                                          *\n                                          * @static\n                                          *\n                                          * @example\n                                          *\n                                          *     var hmac = CryptoJS.HmacSHA3(message, key);\n                                          */\n    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n  })(Math);\n\n\n  /** @preserve\n            (c) 2012 by Cédric Mesnil. All rights reserved.\n            \tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n            \t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n                - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n            \tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n            */\n\n\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Constants table\n    var _zl = WordArray.create([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);\n    var _zr = WordArray.create([\n    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);\n    var _sl = WordArray.create([\n    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);\n    var _sr = WordArray.create([\n    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);\n\n    var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n    var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n    /**\n                                                                                               * RIPEMD160 hash algorithm.\n                                                                                               */\n    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n\n        // Swap endian\n        for (var i = 0; i < 16; i++) {\n          // Shortcuts\n          var offset_i = offset + i;\n          var M_offset_i = M[offset_i];\n\n          // Swap\n          M[offset_i] =\n          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |\n          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n\n        }\n        // Shortcut\n        var H = this._hash.words;\n        var hl = _hl.words;\n        var hr = _hr.words;\n        var zl = _zl.words;\n        var zr = _zr.words;\n        var sl = _sl.words;\n        var sr = _sr.words;\n\n        // Working variables\n        var al, bl, cl, dl, el;\n        var ar, br, cr, dr, er;\n\n        ar = al = H[0];\n        br = bl = H[1];\n        cr = cl = H[2];\n        dr = dl = H[3];\n        er = el = H[4];\n        // Computation\n        var t;\n        for (var i = 0; i < 80; i += 1) {\n          t = al + M[offset + zl[i]] | 0;\n          if (i < 16) {\n            t += f1(bl, cl, dl) + hl[0];\n          } else if (i < 32) {\n            t += f2(bl, cl, dl) + hl[1];\n          } else if (i < 48) {\n            t += f3(bl, cl, dl) + hl[2];\n          } else if (i < 64) {\n            t += f4(bl, cl, dl) + hl[3];\n          } else {// if (i<80) {\n            t += f5(bl, cl, dl) + hl[4];\n          }\n          t = t | 0;\n          t = rotl(t, sl[i]);\n          t = t + el | 0;\n          al = el;\n          el = dl;\n          dl = rotl(cl, 10);\n          cl = bl;\n          bl = t;\n\n          t = ar + M[offset + zr[i]] | 0;\n          if (i < 16) {\n            t += f5(br, cr, dr) + hr[0];\n          } else if (i < 32) {\n            t += f4(br, cr, dr) + hr[1];\n          } else if (i < 48) {\n            t += f3(br, cr, dr) + hr[2];\n          } else if (i < 64) {\n            t += f2(br, cr, dr) + hr[3];\n          } else {// if (i<80) {\n            t += f1(br, cr, dr) + hr[4];\n          }\n          t = t | 0;\n          t = rotl(t, sr[i]);\n          t = t + er | 0;\n          ar = er;\n          er = dr;\n          dr = rotl(cr, 10);\n          cr = br;\n          br = t;\n        }\n        // Intermediate hash value\n        t = H[1] + cl + dr | 0;\n        H[1] = H[2] + dl + er | 0;\n        H[2] = H[3] + el + ar | 0;\n        H[3] = H[4] + al + br | 0;\n        H[4] = H[0] + bl + cr | 0;\n        H[0] = t;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =\n        (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff |\n        (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;\n\n        data.sigBytes = (dataWords.length + 1) * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var hash = this._hash;\n        var H = hash.words;\n\n        // Swap endian\n        for (var i = 0; i < 5; i++) {\n          // Shortcut\n          var H_i = H[i];\n\n          // Swap\n          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |\n          (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n        }\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n\n    function f1(x, y, z) {\n      return x ^ y ^ z;\n\n    }\n\n    function f2(x, y, z) {\n      return x & y | ~x & z;\n    }\n\n    function f3(x, y, z) {\n      return (x | ~y) ^ z;\n    }\n\n    function f4(x, y, z) {\n      return x & z | y & ~z;\n    }\n\n    function f5(x, y, z) {\n      return x ^ (y | ~z);\n\n    }\n\n    function rotl(x, n) {\n      return x << n | x >>> 32 - n;\n    }\n\n\n    /**\n       * Shortcut function to the hasher's object interface.\n       *\n       * @param {WordArray|string} message The message to hash.\n       *\n       * @return {WordArray} The hash.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var hash = CryptoJS.RIPEMD160('message');\n       *     var hash = CryptoJS.RIPEMD160(wordArray);\n       */\n    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n    /**\n                                                    * Shortcut function to the HMAC's object interface.\n                                                    *\n                                                    * @param {WordArray|string} message The message to hash.\n                                                    * @param {WordArray|string} key The secret key.\n                                                    *\n                                                    * @return {WordArray} The HMAC.\n                                                    *\n                                                    * @static\n                                                    *\n                                                    * @example\n                                                    *\n                                                    *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n                                                    */\n    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n                          * HMAC algorithm.\n                          */\n    var HMAC = C_algo.HMAC = Base.extend({\n      /**\n                                            * Initializes a newly created HMAC.\n                                            *\n                                            * @param {Hasher} hasher The hash algorithm to use.\n                                            * @param {WordArray|string} key The secret key.\n                                            *\n                                            * @example\n                                            *\n                                            *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n                                            */\n      init: function init(hasher, key) {\n        // Init hasher\n        hasher = this._hasher = new hasher.init();\n\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof key == 'string') {\n          key = Utf8.parse(key);\n        }\n\n        // Shortcuts\n        var hasherBlockSize = hasher.blockSize;\n        var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n        // Allow arbitrary length keys\n        if (key.sigBytes > hasherBlockSizeBytes) {\n          key = hasher.finalize(key);\n        }\n\n        // Clamp excess bits\n        key.clamp();\n\n        // Clone key for inner and outer pads\n        var oKey = this._oKey = key.clone();\n        var iKey = this._iKey = key.clone();\n\n        // Shortcuts\n        var oKeyWords = oKey.words;\n        var iKeyWords = iKey.words;\n\n        // XOR keys with pad constants\n        for (var i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 0x5c5c5c5c;\n          iKeyWords[i] ^= 0x36363636;\n        }\n        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this HMAC to its initial state.\n          *\n          * @example\n          *\n          *     hmacHasher.reset();\n          */\n      reset: function reset() {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Reset\n        hasher.reset();\n        hasher.update(this._iKey);\n      },\n\n      /**\n          * Updates this HMAC with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {HMAC} This HMAC instance.\n          *\n          * @example\n          *\n          *     hmacHasher.update('message');\n          *     hmacHasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        this._hasher.update(messageUpdate);\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Finalizes the HMAC computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The HMAC.\n          *\n          * @example\n          *\n          *     var hmac = hmacHasher.finalize();\n          *     var hmac = hmacHasher.finalize('message');\n          *     var hmac = hmacHasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Compute HMAC\n        var innerHash = hasher.finalize(messageUpdate);\n        hasher.reset();\n        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n        return hmac;\n      } });\n\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var SHA1 = C_algo.SHA1;\n    var HMAC = C_algo.HMAC;\n\n    /**\n                             * Password-Based Key Derivation Function 2 algorithm.\n                             */\n    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n      /**\n                                                * Configuration options.\n                                                *\n                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n                                                * @property {Hasher} hasher The hasher to use. Default: SHA1\n                                                * @property {number} iterations The number of iterations to perform. Default: 1\n                                                */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: SHA1,\n        iterations: 1 }),\n\n\n      /**\n                           * Initializes a newly created key derivation function.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n                           *\n                           * @example\n                           *\n                           *     var kdf = CryptoJS.algo.PBKDF2.create();\n                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n                           */\n      init: function init(cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n\n      /**\n          * Computes the Password-Based Key Derivation Function 2.\n          *\n          * @param {WordArray|string} password The password.\n          * @param {WordArray|string} salt A salt.\n          *\n          * @return {WordArray} The derived key.\n          *\n          * @example\n          *\n          *     var key = kdf.compute(password, salt);\n          */\n      compute: function compute(password, salt) {\n        // Shortcut\n        var cfg = this.cfg;\n\n        // Init HMAC\n        var hmac = HMAC.create(cfg.hasher, password);\n\n        // Initial values\n        var derivedKey = WordArray.create();\n        var blockIndex = WordArray.create([0x00000001]);\n\n        // Shortcuts\n        var derivedKeyWords = derivedKey.words;\n        var blockIndexWords = blockIndex.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations;\n\n        // Generate key\n        while (derivedKeyWords.length < keySize) {\n          var block = hmac.update(salt).finalize(blockIndex);\n          hmac.reset();\n\n          // Shortcuts\n          var blockWords = block.words;\n          var blockWordsLength = blockWords.length;\n\n          // Iterations\n          var intermediate = block;\n          for (var i = 1; i < iterations; i++) {\n            intermediate = hmac.finalize(intermediate);\n            hmac.reset();\n\n            // Shortcut\n            var intermediateWords = intermediate.words;\n\n            // XOR intermediate with block\n            for (var j = 0; j < blockWordsLength; j++) {\n              blockWords[j] ^= intermediateWords[j];\n            }\n          }\n\n          derivedKey.concat(block);\n          blockIndexWords[0]++;\n        }\n        derivedKey.sigBytes = keySize * 4;\n\n        return derivedKey;\n      } });\n\n\n    /**\n             * Computes the Password-Based Key Derivation Function 2.\n             *\n             * @param {WordArray|string} password The password.\n             * @param {WordArray|string} salt A salt.\n             * @param {Object} cfg (Optional) The configuration options to use for this computation.\n             *\n             * @return {WordArray} The derived key.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var key = CryptoJS.PBKDF2(password, salt);\n             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n             */\n    C.PBKDF2 = function (password, salt, cfg) {\n      return PBKDF2.create(cfg).compute(password, salt);\n    };\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var MD5 = C_algo.MD5;\n\n    /**\n                           * This key derivation function is meant to conform with EVP_BytesToKey.\n                           * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n                           */\n    var EvpKDF = C_algo.EvpKDF = Base.extend({\n      /**\n                                                * Configuration options.\n                                                *\n                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n                                                * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n                                                * @property {number} iterations The number of iterations to perform. Default: 1\n                                                */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: MD5,\n        iterations: 1 }),\n\n\n      /**\n                           * Initializes a newly created key derivation function.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n                           *\n                           * @example\n                           *\n                           *     var kdf = CryptoJS.algo.EvpKDF.create();\n                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n                           */\n      init: function init(cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n\n      /**\n          * Derives a key from a password.\n          *\n          * @param {WordArray|string} password The password.\n          * @param {WordArray|string} salt A salt.\n          *\n          * @return {WordArray} The derived key.\n          *\n          * @example\n          *\n          *     var key = kdf.compute(password, salt);\n          */\n      compute: function compute(password, salt) {\n        var block;\n\n        // Shortcut\n        var cfg = this.cfg;\n\n        // Init hasher\n        var hasher = cfg.hasher.create();\n\n        // Initial values\n        var derivedKey = WordArray.create();\n\n        // Shortcuts\n        var derivedKeyWords = derivedKey.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations;\n\n        // Generate key\n        while (derivedKeyWords.length < keySize) {\n          if (block) {\n            hasher.update(block);\n          }\n          block = hasher.update(password).finalize(salt);\n          hasher.reset();\n\n          // Iterations\n          for (var i = 1; i < iterations; i++) {\n            block = hasher.finalize(block);\n            hasher.reset();\n          }\n\n          derivedKey.concat(block);\n        }\n        derivedKey.sigBytes = keySize * 4;\n\n        return derivedKey;\n      } });\n\n\n    /**\n             * Derives a key from a password.\n             *\n             * @param {WordArray|string} password The password.\n             * @param {WordArray|string} salt A salt.\n             * @param {Object} cfg (Optional) The configuration options to use for this computation.\n             *\n             * @return {WordArray} The derived key.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var key = CryptoJS.EvpKDF(password, salt);\n             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n             */\n    C.EvpKDF = function (password, salt, cfg) {\n      return EvpKDF.create(cfg).compute(password, salt);\n    };\n  })();\n\n\n  /**\n         * Cipher core components.\n         */\n  CryptoJS.lib.Cipher || function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var Base64 = C_enc.Base64;\n    var C_algo = C.algo;\n    var EvpKDF = C_algo.EvpKDF;\n\n    /**\n                                 * Abstract base cipher template.\n                                 *\n                                 * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n                                 * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n                                 * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n                                 * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n                                 */\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n      /**\n                                                                 * Configuration options.\n                                                                 *\n                                                                 * @property {WordArray} iv The IV to use for this operation.\n                                                                 */\n      cfg: Base.extend(),\n\n      /**\n                           * Creates this cipher in encryption mode.\n                           *\n                           * @param {WordArray} key The key.\n                           * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                           *\n                           * @return {Cipher} A cipher instance.\n                           *\n                           * @static\n                           *\n                           * @example\n                           *\n                           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n                           */\n      createEncryptor: function createEncryptor(key, cfg) {\n        return this.create(this._ENC_XFORM_MODE, key, cfg);\n      },\n\n      /**\n          * Creates this cipher in decryption mode.\n          *\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {Cipher} A cipher instance.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n          */\n      createDecryptor: function createDecryptor(key, cfg) {\n        return this.create(this._DEC_XFORM_MODE, key, cfg);\n      },\n\n      /**\n          * Initializes a newly created cipher.\n          *\n          * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @example\n          *\n          *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n          */\n      init: function init(xformMode, key, cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg);\n\n        // Store transform mode and key\n        this._xformMode = xformMode;\n        this._key = key;\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this cipher to its initial state.\n          *\n          * @example\n          *\n          *     cipher.reset();\n          */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this);\n\n        // Perform concrete-cipher logic\n        this._doReset();\n      },\n\n      /**\n          * Adds data to be encrypted or decrypted.\n          *\n          * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n          *\n          * @return {WordArray} The data after processing.\n          *\n          * @example\n          *\n          *     var encrypted = cipher.process('data');\n          *     var encrypted = cipher.process(wordArray);\n          */\n      process: function process(dataUpdate) {\n        // Append\n        this._append(dataUpdate);\n\n        // Process available blocks\n        return this._process();\n      },\n\n      /**\n          * Finalizes the encryption or decryption process.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n          *\n          * @return {WordArray} The data after final processing.\n          *\n          * @example\n          *\n          *     var encrypted = cipher.finalize();\n          *     var encrypted = cipher.finalize('data');\n          *     var encrypted = cipher.finalize(wordArray);\n          */\n      finalize: function finalize(dataUpdate) {\n        // Final data update\n        if (dataUpdate) {\n          this._append(dataUpdate);\n        }\n\n        // Perform concrete-cipher logic\n        var finalProcessedData = this._doFinalize();\n\n        return finalProcessedData;\n      },\n\n      keySize: 128 / 32,\n\n      ivSize: 128 / 32,\n\n      _ENC_XFORM_MODE: 1,\n\n      _DEC_XFORM_MODE: 2,\n\n      /**\n                           * Creates shortcut functions to a cipher's object interface.\n                           *\n                           * @param {Cipher} cipher The cipher to create a helper for.\n                           *\n                           * @return {Object} An object with encrypt and decrypt shortcut functions.\n                           *\n                           * @static\n                           *\n                           * @example\n                           *\n                           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n                           */\n      _createHelper: function () {\n        function selectCipherStrategy(key) {\n          if (typeof key == 'string') {\n            return PasswordBasedCipher;\n          } else {\n            return SerializableCipher;\n          }\n        }\n\n        return function (cipher) {\n          return {\n            encrypt: function encrypt(message, key, cfg) {\n              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n            },\n\n            decrypt: function decrypt(ciphertext, key, cfg) {\n              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n            } };\n\n        };\n      }() });\n\n\n    /**\n               * Abstract base stream cipher template.\n               *\n               * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n               */\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n      _doFinalize: function _doFinalize() {\n        // Process partial blocks\n        var finalProcessedBlocks = this._process(!!'flush');\n\n        return finalProcessedBlocks;\n      },\n\n      blockSize: 1 });\n\n\n    /**\n                        * Mode namespace.\n                        */\n    var C_mode = C.mode = {};\n\n    /**\n                               * Abstract base block cipher mode template.\n                               */\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n      /**\n                                                                 * Creates this mode for encryption.\n                                                                 *\n                                                                 * @param {Cipher} cipher A block cipher instance.\n                                                                 * @param {Array} iv The IV words.\n                                                                 *\n                                                                 * @static\n                                                                 *\n                                                                 * @example\n                                                                 *\n                                                                 *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n                                                                 */\n      createEncryptor: function createEncryptor(cipher, iv) {\n        return this.Encryptor.create(cipher, iv);\n      },\n\n      /**\n          * Creates this mode for decryption.\n          *\n          * @param {Cipher} cipher A block cipher instance.\n          * @param {Array} iv The IV words.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n          */\n      createDecryptor: function createDecryptor(cipher, iv) {\n        return this.Decryptor.create(cipher, iv);\n      },\n\n      /**\n          * Initializes a newly created mode.\n          *\n          * @param {Cipher} cipher A block cipher instance.\n          * @param {Array} iv The IV words.\n          *\n          * @example\n          *\n          *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n          */\n      init: function init(cipher, iv) {\n        this._cipher = cipher;\n        this._iv = iv;\n      } });\n\n\n    /**\n             * Cipher Block Chaining mode.\n             */\n    var CBC = C_mode.CBC = function () {\n      /**\n                                         * Abstract base CBC mode.\n                                         */\n      var CBC = BlockCipherMode.extend();\n\n      /**\n                                           * CBC encryptor.\n                                           */\n      CBC.Encryptor = CBC.extend({\n        /**\n                                    * Processes the data block at offset.\n                                    *\n                                    * @param {Array} words The data words to operate on.\n                                    * @param {number} offset The offset where the block starts.\n                                    *\n                                    * @example\n                                    *\n                                    *     mode.processBlock(data.words, offset);\n                                    */\n        processBlock: function processBlock(words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // XOR and encrypt\n          xorBlock.call(this, words, offset, blockSize);\n          cipher.encryptBlock(words, offset);\n\n          // Remember this block to use with next block\n          this._prevBlock = words.slice(offset, offset + blockSize);\n        } });\n\n\n      /**\n               * CBC decryptor.\n               */\n      CBC.Decryptor = CBC.extend({\n        /**\n                                    * Processes the data block at offset.\n                                    *\n                                    * @param {Array} words The data words to operate on.\n                                    * @param {number} offset The offset where the block starts.\n                                    *\n                                    * @example\n                                    *\n                                    *     mode.processBlock(data.words, offset);\n                                    */\n        processBlock: function processBlock(words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // Remember this block to use with next block\n          var thisBlock = words.slice(offset, offset + blockSize);\n\n          // Decrypt and XOR\n          cipher.decryptBlock(words, offset);\n          xorBlock.call(this, words, offset, blockSize);\n\n          // This block becomes the previous block\n          this._prevBlock = thisBlock;\n        } });\n\n\n      function xorBlock(words, offset, blockSize) {\n        var block;\n\n        // Shortcut\n        var iv = this._iv;\n\n        // Choose mixing block\n        if (iv) {\n          block = iv;\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        } else {\n          block = this._prevBlock;\n        }\n\n        // XOR blocks\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= block[i];\n        }\n      }\n\n      return CBC;\n    }();\n\n    /**\n          * Padding namespace.\n          */\n    var C_pad = C.pad = {};\n\n    /**\n                             * PKCS #5/7 padding strategy.\n                             */\n    var Pkcs7 = C_pad.Pkcs7 = {\n      /**\n                                 * Pads data using the algorithm defined in PKCS #5/7.\n                                 *\n                                 * @param {WordArray} data The data to pad.\n                                 * @param {number} blockSize The multiple that the data should be padded to.\n                                 *\n                                 * @static\n                                 *\n                                 * @example\n                                 *\n                                 *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n                                 */\n      pad: function pad(data, blockSize) {\n        // Shortcut\n        var blockSizeBytes = blockSize * 4;\n\n        // Count padding bytes\n        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n        // Create padding word\n        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;\n\n        // Create padding\n        var paddingWords = [];\n        for (var i = 0; i < nPaddingBytes; i += 4) {\n          paddingWords.push(paddingWord);\n        }\n        var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n        // Add padding\n        data.concat(padding);\n      },\n\n      /**\n          * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n          *\n          * @param {WordArray} data The data to unpad.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n          */\n      unpad: function unpad(data) {\n        // Get number of padding bytes from last byte\n        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n        // Remove padding\n        data.sigBytes -= nPaddingBytes;\n      } };\n\n\n    /**\n            * Abstract base block cipher template.\n            *\n            * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n            */\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n      /**\n                                                           * Configuration options.\n                                                           *\n                                                           * @property {Mode} mode The block mode to use. Default: CBC\n                                                           * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n                                                           */\n      cfg: Cipher.cfg.extend({\n        mode: CBC,\n        padding: Pkcs7 }),\n\n\n      reset: function reset() {\n        var modeCreator;\n\n        // Reset cipher\n        Cipher.reset.call(this);\n\n        // Shortcuts\n        var cfg = this.cfg;\n        var iv = cfg.iv;\n        var mode = cfg.mode;\n\n        // Reset block mode\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          modeCreator = mode.createEncryptor;\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            modeCreator = mode.createDecryptor;\n            // Keep at least one block in the buffer for unpadding\n            this._minBufferSize = 1;\n          }\n\n        if (this._mode && this._mode.__creator == modeCreator) {\n          this._mode.init(this, iv && iv.words);\n        } else {\n          this._mode = modeCreator.call(mode, this, iv && iv.words);\n          this._mode.__creator = modeCreator;\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(words, offset) {\n        this._mode.processBlock(words, offset);\n      },\n\n      _doFinalize: function _doFinalize() {\n        var finalProcessedBlocks;\n\n        // Shortcut\n        var padding = this.cfg.padding;\n\n        // Finalize\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          // Pad data\n          padding.pad(this._data, this.blockSize);\n\n          // Process final blocks\n          finalProcessedBlocks = this._process(!!'flush');\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            // Process final blocks\n            finalProcessedBlocks = this._process(!!'flush');\n\n            // Unpad data\n            padding.unpad(finalProcessedBlocks);\n          }\n\n        return finalProcessedBlocks;\n      },\n\n      blockSize: 128 / 32 });\n\n\n    /**\n                               * A collection of cipher parameters.\n                               *\n                               * @property {WordArray} ciphertext The raw ciphertext.\n                               * @property {WordArray} key The key to this ciphertext.\n                               * @property {WordArray} iv The IV used in the ciphering operation.\n                               * @property {WordArray} salt The salt used with a key derivation function.\n                               * @property {Cipher} algorithm The cipher algorithm.\n                               * @property {Mode} mode The block mode used in the ciphering operation.\n                               * @property {Padding} padding The padding scheme used in the ciphering operation.\n                               * @property {number} blockSize The block size of the cipher.\n                               * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n                               */\n    var CipherParams = C_lib.CipherParams = Base.extend({\n      /**\n                                                           * Initializes a newly created cipher params object.\n                                                           *\n                                                           * @param {Object} cipherParams An object with any of the possible cipher parameters.\n                                                           *\n                                                           * @example\n                                                           *\n                                                           *     var cipherParams = CryptoJS.lib.CipherParams.create({\n                                                           *         ciphertext: ciphertextWordArray,\n                                                           *         key: keyWordArray,\n                                                           *         iv: ivWordArray,\n                                                           *         salt: saltWordArray,\n                                                           *         algorithm: CryptoJS.algo.AES,\n                                                           *         mode: CryptoJS.mode.CBC,\n                                                           *         padding: CryptoJS.pad.PKCS7,\n                                                           *         blockSize: 4,\n                                                           *         formatter: CryptoJS.format.OpenSSL\n                                                           *     });\n                                                           */\n      init: function init(cipherParams) {\n        this.mixIn(cipherParams);\n      },\n\n      /**\n          * Converts this cipher params object to a string.\n          *\n          * @param {Format} formatter (Optional) The formatting strategy to use.\n          *\n          * @return {string} The stringified cipher params.\n          *\n          * @throws Error If neither the formatter nor the default formatter is set.\n          *\n          * @example\n          *\n          *     var string = cipherParams + '';\n          *     var string = cipherParams.toString();\n          *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n          */\n      toString: function toString(formatter) {\n        return (formatter || this.formatter).stringify(this);\n      } });\n\n\n    /**\n             * Format namespace.\n             */\n    var C_format = C.format = {};\n\n    /**\n                                   * OpenSSL formatting strategy.\n                                   */\n    var OpenSSLFormatter = C_format.OpenSSL = {\n      /**\n                                                 * Converts a cipher params object to an OpenSSL-compatible string.\n                                                 *\n                                                 * @param {CipherParams} cipherParams The cipher params object.\n                                                 *\n                                                 * @return {string} The OpenSSL-compatible string.\n                                                 *\n                                                 * @static\n                                                 *\n                                                 * @example\n                                                 *\n                                                 *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n                                                 */\n      stringify: function stringify(cipherParams) {\n        var wordArray;\n\n        // Shortcuts\n        var ciphertext = cipherParams.ciphertext;\n        var salt = cipherParams.salt;\n\n        // Format\n        if (salt) {\n          wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n        } else {\n          wordArray = ciphertext;\n        }\n\n        return wordArray.toString(Base64);\n      },\n\n      /**\n          * Converts an OpenSSL-compatible string to a cipher params object.\n          *\n          * @param {string} openSSLStr The OpenSSL-compatible string.\n          *\n          * @return {CipherParams} The cipher params object.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n          */\n      parse: function parse(openSSLStr) {\n        var salt;\n\n        // Parse base64\n        var ciphertext = Base64.parse(openSSLStr);\n\n        // Shortcut\n        var ciphertextWords = ciphertext.words;\n\n        // Test for salt\n        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n          // Extract salt\n          salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n          // Remove salt from ciphertext\n          ciphertextWords.splice(0, 4);\n          ciphertext.sigBytes -= 16;\n        }\n\n        return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n      } };\n\n\n    /**\n            * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n            */\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n      /**\n                                                                       * Configuration options.\n                                                                       *\n                                                                       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n                                                                       */\n      cfg: Base.extend({\n        format: OpenSSLFormatter }),\n\n\n      /**\n                                      * Encrypts a message.\n                                      *\n                                      * @param {Cipher} cipher The cipher algorithm to use.\n                                      * @param {WordArray|string} message The message to encrypt.\n                                      * @param {WordArray} key The key.\n                                      * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                                      *\n                                      * @return {CipherParams} A cipher params object.\n                                      *\n                                      * @static\n                                      *\n                                      * @example\n                                      *\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n                                      */\n      encrypt: function encrypt(cipher, message, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Encrypt\n        var encryptor = cipher.createEncryptor(key, cfg);\n        var ciphertext = encryptor.finalize(message);\n\n        // Shortcut\n        var cipherCfg = encryptor.cfg;\n\n        // Create and return serializable cipher params\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          key: key,\n          iv: cipherCfg.iv,\n          algorithm: cipher,\n          mode: cipherCfg.mode,\n          padding: cipherCfg.padding,\n          blockSize: cipher.blockSize,\n          formatter: cfg.format });\n\n      },\n\n      /**\n          * Decrypts serialized ciphertext.\n          *\n          * @param {Cipher} cipher The cipher algorithm to use.\n          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {WordArray} The plaintext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n          */\n      decrypt: function decrypt(cipher, ciphertext, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Decrypt\n        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n        return plaintext;\n      },\n\n      /**\n          * Converts serialized ciphertext to CipherParams,\n          * else assumed CipherParams already and returns ciphertext unchanged.\n          *\n          * @param {CipherParams|string} ciphertext The ciphertext.\n          * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n          *\n          * @return {CipherParams} The unserialized ciphertext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n          */\n      _parse: function _parse(ciphertext, format) {\n        if (typeof ciphertext == 'string') {\n          return format.parse(ciphertext, this);\n        } else {\n          return ciphertext;\n        }\n      } });\n\n\n    /**\n             * Key derivation function namespace.\n             */\n    var C_kdf = C.kdf = {};\n\n    /**\n                             * OpenSSL key derivation function.\n                             */\n    var OpenSSLKdf = C_kdf.OpenSSL = {\n      /**\n                                        * Derives a key and IV from a password.\n                                        *\n                                        * @param {string} password The password to derive from.\n                                        * @param {number} keySize The size in words of the key to generate.\n                                        * @param {number} ivSize The size in words of the IV to generate.\n                                        * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n                                        *\n                                        * @return {CipherParams} A cipher params object with the key, IV, and salt.\n                                        *\n                                        * @static\n                                        *\n                                        * @example\n                                        *\n                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n                                        */\n      execute: function execute(password, keySize, ivSize, salt) {\n        // Generate random salt\n        if (!salt) {\n          salt = WordArray.random(64 / 8);\n        }\n\n        // Derive key and IV\n        var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n        // Separate key and IV\n        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n        key.sigBytes = keySize * 4;\n\n        // Return params\n        return CipherParams.create({ key: key, iv: iv, salt: salt });\n      } };\n\n\n    /**\n            * A serializable cipher wrapper that derives the key from a password,\n            * and returns ciphertext as a serializable cipher params object.\n            */\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n      /**\n                                                                                       * Configuration options.\n                                                                                       *\n                                                                                       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n                                                                                       */\n      cfg: SerializableCipher.cfg.extend({\n        kdf: OpenSSLKdf }),\n\n\n      /**\n                             * Encrypts a message using a password.\n                             *\n                             * @param {Cipher} cipher The cipher algorithm to use.\n                             * @param {WordArray|string} message The message to encrypt.\n                             * @param {string} password The password.\n                             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                             *\n                             * @return {CipherParams} A cipher params object.\n                             *\n                             * @static\n                             *\n                             * @example\n                             *\n                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n                             */\n      encrypt: function encrypt(cipher, message, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Encrypt\n        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n        // Mix in derived params\n        ciphertext.mixIn(derivedParams);\n\n        return ciphertext;\n      },\n\n      /**\n          * Decrypts serialized ciphertext using a password.\n          *\n          * @param {Cipher} cipher The cipher algorithm to use.\n          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n          * @param {string} password The password.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {WordArray} The plaintext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n          */\n      decrypt: function decrypt(cipher, ciphertext, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Decrypt\n        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n        return plaintext;\n      } });\n\n  }();\n\n\n  /**\n        * Cipher Feedback block mode.\n        */\n  CryptoJS.mode.CFB = function () {\n    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    CFB.Encryptor = CFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n        // Remember this block to use with next block\n        this._prevBlock = words.slice(offset, offset + blockSize);\n      } });\n\n\n    CFB.Decryptor = CFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        // Remember this block to use with next block\n        var thisBlock = words.slice(offset, offset + blockSize);\n\n        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n        // This block becomes the previous block\n        this._prevBlock = thisBlock;\n      } });\n\n\n    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n      var keystream;\n\n      // Shortcut\n      var iv = this._iv;\n\n      // Generate keystream\n      if (iv) {\n        keystream = iv.slice(0);\n\n        // Remove IV for subsequent blocks\n        this._iv = undefined;\n      } else {\n        keystream = this._prevBlock;\n      }\n      cipher.encryptBlock(keystream, 0);\n\n      // Encrypt\n      for (var i = 0; i < blockSize; i++) {\n        words[offset + i] ^= keystream[i];\n      }\n    }\n\n    return CFB;\n  }();\n\n\n  /**\n        * Counter block mode.\n        */\n  CryptoJS.mode.CTR = function () {\n    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = CTR.Encryptor = CTR.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var counter = this._counter;\n\n        // Generate keystream\n        if (iv) {\n          counter = this._counter = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n        var keystream = counter.slice(0);\n        cipher.encryptBlock(keystream, 0);\n\n        // Increment counter\n        counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    CTR.Decryptor = Encryptor;\n\n    return CTR;\n  }();\n\n\n  /** @preserve\n        * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n        * derived from CryptoJS.mode.CTR\n        * Jan Hruby jhruby.web@gmail.com\n        */\n  CryptoJS.mode.CTRGladman = function () {\n    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n    function incWord(word)\n    {\n      if ((word >> 24 & 0xff) === 0xff) {//overflow\n        var b1 = word >> 16 & 0xff;\n        var b2 = word >> 8 & 0xff;\n        var b3 = word & 0xff;\n\n        if (b1 === 0xff) // overflow b1\n          {\n            b1 = 0;\n            if (b2 === 0xff)\n            {\n              b2 = 0;\n              if (b3 === 0xff)\n              {\n                b3 = 0;\n              } else\n\n              {\n                ++b3;\n              }\n            } else\n\n            {\n              ++b2;\n            }\n          } else\n\n        {\n          ++b1;\n        }\n\n        word = 0;\n        word += b1 << 16;\n        word += b2 << 8;\n        word += b3;\n      } else\n\n      {\n        word += 0x01 << 24;\n      }\n      return word;\n    }\n\n    function incCounter(counter)\n    {\n      if ((counter[0] = incWord(counter[0])) === 0)\n      {\n        // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n        counter[1] = incWord(counter[1]);\n      }\n      return counter;\n    }\n\n    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var counter = this._counter;\n\n        // Generate keystream\n        if (iv) {\n          counter = this._counter = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n\n        incCounter(counter);\n\n        var keystream = counter.slice(0);\n        cipher.encryptBlock(keystream, 0);\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    CTRGladman.Decryptor = Encryptor;\n\n    return CTRGladman;\n  }();\n\n\n\n\n  /**\n        * Output Feedback block mode.\n        */\n  CryptoJS.mode.OFB = function () {\n    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = OFB.Encryptor = OFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var keystream = this._keystream;\n\n        // Generate keystream\n        if (iv) {\n          keystream = this._keystream = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n        cipher.encryptBlock(keystream, 0);\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    OFB.Decryptor = Encryptor;\n\n    return OFB;\n  }();\n\n\n  /**\n        * Electronic Codebook block mode.\n        */\n  CryptoJS.mode.ECB = function () {\n    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n    ECB.Encryptor = ECB.extend({\n      processBlock: function processBlock(words, offset) {\n        this._cipher.encryptBlock(words, offset);\n      } });\n\n\n    ECB.Decryptor = ECB.extend({\n      processBlock: function processBlock(words, offset) {\n        this._cipher.decryptBlock(words, offset);\n      } });\n\n\n    return ECB;\n  }();\n\n\n  /**\n        * ANSI X.923 padding strategy.\n        */\n  CryptoJS.pad.AnsiX923 = {\n    pad: function pad(data, blockSize) {\n      // Shortcuts\n      var dataSigBytes = data.sigBytes;\n      var blockSizeBytes = blockSize * 4;\n\n      // Count padding bytes\n      var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n      // Compute last byte position\n      var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n      // Pad\n      data.clamp();\n      data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;\n      data.sigBytes += nPaddingBytes;\n    },\n\n    unpad: function unpad(data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n      // Remove padding\n      data.sigBytes -= nPaddingBytes;\n    } };\n\n\n\n  /**\n          * ISO 10126 padding strategy.\n          */\n  CryptoJS.pad.Iso10126 = {\n    pad: function pad(data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4;\n\n      // Count padding bytes\n      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n      // Pad\n      data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n      concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n    },\n\n    unpad: function unpad(data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n      // Remove padding\n      data.sigBytes -= nPaddingBytes;\n    } };\n\n\n\n  /**\n          * ISO/IEC 9797-1 Padding Method 2.\n          */\n  CryptoJS.pad.Iso97971 = {\n    pad: function pad(data, blockSize) {\n      // Add 0x80 byte\n      data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n      // Zero pad the rest\n      CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n    },\n\n    unpad: function unpad(data) {\n      // Remove zero padding\n      CryptoJS.pad.ZeroPadding.unpad(data);\n\n      // Remove one more byte -- the 0x80 byte\n      data.sigBytes--;\n    } };\n\n\n\n  /**\n          * Zero padding strategy.\n          */\n  CryptoJS.pad.ZeroPadding = {\n    pad: function pad(data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4;\n\n      // Pad\n      data.clamp();\n      data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);\n    },\n\n    unpad: function unpad(data) {\n      // Shortcut\n      var dataWords = data.words;\n\n      // Unpad\n      var i = data.sigBytes - 1;\n      for (var i = data.sigBytes - 1; i >= 0; i--) {\n        if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff) {\n          data.sigBytes = i + 1;\n          break;\n        }\n      }\n    } };\n\n\n\n  /**\n          * A noop padding strategy.\n          */\n  CryptoJS.pad.NoPadding = {\n    pad: function pad() {\n    },\n\n    unpad: function unpad() {\n    } };\n\n\n\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var CipherParams = C_lib.CipherParams;\n    var C_enc = C.enc;\n    var Hex = C_enc.Hex;\n    var C_format = C.format;\n\n    var HexFormatter = C_format.Hex = {\n      /**\n                                         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n                                         *\n                                         * @param {CipherParams} cipherParams The cipher params object.\n                                         *\n                                         * @return {string} The hexadecimally encoded string.\n                                         *\n                                         * @static\n                                         *\n                                         * @example\n                                         *\n                                         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n                                         */\n      stringify: function stringify(cipherParams) {\n        return cipherParams.ciphertext.toString(Hex);\n      },\n\n      /**\n          * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n          *\n          * @param {string} input The hexadecimally encoded string.\n          *\n          * @return {CipherParams} The cipher params object.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n          */\n      parse: function parse(input) {\n        var ciphertext = Hex.parse(input);\n        return CipherParams.create({ ciphertext: ciphertext });\n      } };\n\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var BlockCipher = C_lib.BlockCipher;\n    var C_algo = C.algo;\n\n    // Lookup tables\n    var SBOX = [];\n    var INV_SBOX = [];\n    var SUB_MIX_0 = [];\n    var SUB_MIX_1 = [];\n    var SUB_MIX_2 = [];\n    var SUB_MIX_3 = [];\n    var INV_SUB_MIX_0 = [];\n    var INV_SUB_MIX_1 = [];\n    var INV_SUB_MIX_2 = [];\n    var INV_SUB_MIX_3 = [];\n\n    // Compute lookup tables\n    (function () {\n      // Compute double table\n      var d = [];\n      for (var i = 0; i < 256; i++) {\n        if (i < 128) {\n          d[i] = i << 1;\n        } else {\n          d[i] = i << 1 ^ 0x11b;\n        }\n      }\n\n      // Walk GF(2^8)\n      var x = 0;\n      var xi = 0;\n      for (var i = 0; i < 256; i++) {\n        // Compute sbox\n        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n        SBOX[x] = sx;\n        INV_SBOX[sx] = x;\n\n        // Compute multiplication\n        var x2 = d[x];\n        var x4 = d[x2];\n        var x8 = d[x4];\n\n        // Compute sub bytes, mix columns tables\n        var t = d[sx] * 0x101 ^ sx * 0x1010100;\n        SUB_MIX_0[x] = t << 24 | t >>> 8;\n        SUB_MIX_1[x] = t << 16 | t >>> 16;\n        SUB_MIX_2[x] = t << 8 | t >>> 24;\n        SUB_MIX_3[x] = t;\n\n        // Compute inv sub bytes, inv mix columns tables\n        var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;\n        INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;\n        INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;\n        INV_SUB_MIX_3[sx] = t;\n\n        // Compute next counter\n        if (!x) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n    })();\n\n    // Precomputed Rcon lookup\n    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n    /**\n                                                                                    * AES block cipher algorithm.\n                                                                                    */\n    var AES = C_algo.AES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        var t;\n\n        // Skip reset of nRounds has been set before and key did not change\n        if (this._nRounds && this._keyPriorReset === this._key) {\n          return;\n        }\n\n        // Shortcuts\n        var key = this._keyPriorReset = this._key;\n        var keyWords = key.words;\n        var keySize = key.sigBytes / 4;\n\n        // Compute number of rounds\n        var nRounds = this._nRounds = keySize + 6;\n\n        // Compute number of key schedule rows\n        var ksRows = (nRounds + 1) * 4;\n\n        // Compute key schedule\n        var keySchedule = this._keySchedule = [];\n        for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n          if (ksRow < keySize) {\n            keySchedule[ksRow] = keyWords[ksRow];\n          } else {\n            t = keySchedule[ksRow - 1];\n\n            if (!(ksRow % keySize)) {\n              // Rot word\n              t = t << 8 | t >>> 24;\n\n              // Sub word\n              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n\n              // Mix Rcon\n              t ^= RCON[ksRow / keySize | 0] << 24;\n            } else if (keySize > 6 && ksRow % keySize == 4) {\n              // Sub word\n              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n            }\n\n            keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n          }\n        }\n\n        // Compute inv key schedule\n        var invKeySchedule = this._invKeySchedule = [];\n        for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n          var ksRow = ksRows - invKsRow;\n\n          if (invKsRow % 4) {\n            var t = keySchedule[ksRow];\n          } else {\n            var t = keySchedule[ksRow - 4];\n          }\n\n          if (invKsRow < 4 || ksRow <= 4) {\n            invKeySchedule[invKsRow] = t;\n          } else {\n            invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^\n            INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n          }\n        }\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        // Swap 2nd and 4th rows\n        var t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n\n        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n        // Inv swap 2nd and 4th rows\n        var t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n      },\n\n      _doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n        // Shortcut\n        var nRounds = this._nRounds;\n\n        // Get input, add round key\n        var s0 = M[offset] ^ keySchedule[0];\n        var s1 = M[offset + 1] ^ keySchedule[1];\n        var s2 = M[offset + 2] ^ keySchedule[2];\n        var s3 = M[offset + 3] ^ keySchedule[3];\n\n        // Key schedule row counter\n        var ksRow = 4;\n\n        // Rounds\n        for (var round = 1; round < nRounds; round++) {\n          // Shift rows, sub bytes, mix columns, add round key\n          var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n          var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n          var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n          var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n          // Update state\n          s0 = t0;\n          s1 = t1;\n          s2 = t2;\n          s3 = t3;\n        }\n\n        // Shift rows, sub bytes, add round key\n        var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n        var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n        var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n        var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n        // Set output\n        M[offset] = t0;\n        M[offset + 1] = t1;\n        M[offset + 2] = t2;\n        M[offset + 3] = t3;\n      },\n\n      keySize: 256 / 32 });\n\n\n    /**\n                             * Shortcut functions to the cipher's object interface.\n                             *\n                             * @example\n                             *\n                             *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n                             *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n                             */\n    C.AES = BlockCipher._createHelper(AES);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var BlockCipher = C_lib.BlockCipher;\n    var C_algo = C.algo;\n\n    // Permuted Choice 1 constants\n    var PC1 = [\n    57, 49, 41, 33, 25, 17, 9, 1,\n    58, 50, 42, 34, 26, 18, 10, 2,\n    59, 51, 43, 35, 27, 19, 11, 3,\n    60, 52, 44, 36, 63, 55, 47, 39,\n    31, 23, 15, 7, 62, 54, 46, 38,\n    30, 22, 14, 6, 61, 53, 45, 37,\n    29, 21, 13, 5, 28, 20, 12, 4];\n\n\n    // Permuted Choice 2 constants\n    var PC2 = [\n    14, 17, 11, 24, 1, 5,\n    3, 28, 15, 6, 21, 10,\n    23, 19, 12, 4, 26, 8,\n    16, 7, 27, 20, 13, 2,\n    41, 52, 31, 37, 47, 55,\n    30, 40, 51, 45, 33, 48,\n    44, 49, 39, 56, 34, 53,\n    46, 42, 50, 36, 29, 32];\n\n\n    // Cumulative bit shift constants\n    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n    // SBOXes and round permutation constants\n    var SBOX_P = [\n    {\n      0x0: 0x808200,\n      0x10000000: 0x8000,\n      0x20000000: 0x808002,\n      0x30000000: 0x2,\n      0x40000000: 0x200,\n      0x50000000: 0x808202,\n      0x60000000: 0x800202,\n      0x70000000: 0x800000,\n      0x80000000: 0x202,\n      0x90000000: 0x800200,\n      0xa0000000: 0x8200,\n      0xb0000000: 0x808000,\n      0xc0000000: 0x8002,\n      0xd0000000: 0x800002,\n      0xe0000000: 0x0,\n      0xf0000000: 0x8202,\n      0x8000000: 0x0,\n      0x18000000: 0x808202,\n      0x28000000: 0x8202,\n      0x38000000: 0x8000,\n      0x48000000: 0x808200,\n      0x58000000: 0x200,\n      0x68000000: 0x808002,\n      0x78000000: 0x2,\n      0x88000000: 0x800200,\n      0x98000000: 0x8200,\n      0xa8000000: 0x808000,\n      0xb8000000: 0x800202,\n      0xc8000000: 0x800002,\n      0xd8000000: 0x8002,\n      0xe8000000: 0x202,\n      0xf8000000: 0x800000,\n      0x1: 0x8000,\n      0x10000001: 0x2,\n      0x20000001: 0x808200,\n      0x30000001: 0x800000,\n      0x40000001: 0x808002,\n      0x50000001: 0x8200,\n      0x60000001: 0x200,\n      0x70000001: 0x800202,\n      0x80000001: 0x808202,\n      0x90000001: 0x808000,\n      0xa0000001: 0x800002,\n      0xb0000001: 0x8202,\n      0xc0000001: 0x202,\n      0xd0000001: 0x800200,\n      0xe0000001: 0x8002,\n      0xf0000001: 0x0,\n      0x8000001: 0x808202,\n      0x18000001: 0x808000,\n      0x28000001: 0x800000,\n      0x38000001: 0x200,\n      0x48000001: 0x8000,\n      0x58000001: 0x800002,\n      0x68000001: 0x2,\n      0x78000001: 0x8202,\n      0x88000001: 0x8002,\n      0x98000001: 0x800202,\n      0xa8000001: 0x202,\n      0xb8000001: 0x808200,\n      0xc8000001: 0x800200,\n      0xd8000001: 0x0,\n      0xe8000001: 0x8200,\n      0xf8000001: 0x808002 },\n\n    {\n      0x0: 0x40084010,\n      0x1000000: 0x4000,\n      0x2000000: 0x80000,\n      0x3000000: 0x40080010,\n      0x4000000: 0x40000010,\n      0x5000000: 0x40084000,\n      0x6000000: 0x40004000,\n      0x7000000: 0x10,\n      0x8000000: 0x84000,\n      0x9000000: 0x40004010,\n      0xa000000: 0x40000000,\n      0xb000000: 0x84010,\n      0xc000000: 0x80010,\n      0xd000000: 0x0,\n      0xe000000: 0x4010,\n      0xf000000: 0x40080000,\n      0x800000: 0x40004000,\n      0x1800000: 0x84010,\n      0x2800000: 0x10,\n      0x3800000: 0x40004010,\n      0x4800000: 0x40084010,\n      0x5800000: 0x40000000,\n      0x6800000: 0x80000,\n      0x7800000: 0x40080010,\n      0x8800000: 0x80010,\n      0x9800000: 0x0,\n      0xa800000: 0x4000,\n      0xb800000: 0x40080000,\n      0xc800000: 0x40000010,\n      0xd800000: 0x84000,\n      0xe800000: 0x40084000,\n      0xf800000: 0x4010,\n      0x10000000: 0x0,\n      0x11000000: 0x40080010,\n      0x12000000: 0x40004010,\n      0x13000000: 0x40084000,\n      0x14000000: 0x40080000,\n      0x15000000: 0x10,\n      0x16000000: 0x84010,\n      0x17000000: 0x4000,\n      0x18000000: 0x4010,\n      0x19000000: 0x80000,\n      0x1a000000: 0x80010,\n      0x1b000000: 0x40000010,\n      0x1c000000: 0x84000,\n      0x1d000000: 0x40004000,\n      0x1e000000: 0x40000000,\n      0x1f000000: 0x40084010,\n      0x10800000: 0x84010,\n      0x11800000: 0x80000,\n      0x12800000: 0x40080000,\n      0x13800000: 0x4000,\n      0x14800000: 0x40004000,\n      0x15800000: 0x40084010,\n      0x16800000: 0x10,\n      0x17800000: 0x40000000,\n      0x18800000: 0x40084000,\n      0x19800000: 0x40000010,\n      0x1a800000: 0x40004010,\n      0x1b800000: 0x80010,\n      0x1c800000: 0x0,\n      0x1d800000: 0x4010,\n      0x1e800000: 0x40080010,\n      0x1f800000: 0x84000 },\n\n    {\n      0x0: 0x104,\n      0x100000: 0x0,\n      0x200000: 0x4000100,\n      0x300000: 0x10104,\n      0x400000: 0x10004,\n      0x500000: 0x4000004,\n      0x600000: 0x4010104,\n      0x700000: 0x4010000,\n      0x800000: 0x4000000,\n      0x900000: 0x4010100,\n      0xa00000: 0x10100,\n      0xb00000: 0x4010004,\n      0xc00000: 0x4000104,\n      0xd00000: 0x10000,\n      0xe00000: 0x4,\n      0xf00000: 0x100,\n      0x80000: 0x4010100,\n      0x180000: 0x4010004,\n      0x280000: 0x0,\n      0x380000: 0x4000100,\n      0x480000: 0x4000004,\n      0x580000: 0x10000,\n      0x680000: 0x10004,\n      0x780000: 0x104,\n      0x880000: 0x4,\n      0x980000: 0x100,\n      0xa80000: 0x4010000,\n      0xb80000: 0x10104,\n      0xc80000: 0x10100,\n      0xd80000: 0x4000104,\n      0xe80000: 0x4010104,\n      0xf80000: 0x4000000,\n      0x1000000: 0x4010100,\n      0x1100000: 0x10004,\n      0x1200000: 0x10000,\n      0x1300000: 0x4000100,\n      0x1400000: 0x100,\n      0x1500000: 0x4010104,\n      0x1600000: 0x4000004,\n      0x1700000: 0x0,\n      0x1800000: 0x4000104,\n      0x1900000: 0x4000000,\n      0x1a00000: 0x4,\n      0x1b00000: 0x10100,\n      0x1c00000: 0x4010000,\n      0x1d00000: 0x104,\n      0x1e00000: 0x10104,\n      0x1f00000: 0x4010004,\n      0x1080000: 0x4000000,\n      0x1180000: 0x104,\n      0x1280000: 0x4010100,\n      0x1380000: 0x0,\n      0x1480000: 0x10004,\n      0x1580000: 0x4000100,\n      0x1680000: 0x100,\n      0x1780000: 0x4010004,\n      0x1880000: 0x10000,\n      0x1980000: 0x4010104,\n      0x1a80000: 0x10104,\n      0x1b80000: 0x4000004,\n      0x1c80000: 0x4000104,\n      0x1d80000: 0x4010000,\n      0x1e80000: 0x4,\n      0x1f80000: 0x10100 },\n\n    {\n      0x0: 0x80401000,\n      0x10000: 0x80001040,\n      0x20000: 0x401040,\n      0x30000: 0x80400000,\n      0x40000: 0x0,\n      0x50000: 0x401000,\n      0x60000: 0x80000040,\n      0x70000: 0x400040,\n      0x80000: 0x80000000,\n      0x90000: 0x400000,\n      0xa0000: 0x40,\n      0xb0000: 0x80001000,\n      0xc0000: 0x80400040,\n      0xd0000: 0x1040,\n      0xe0000: 0x1000,\n      0xf0000: 0x80401040,\n      0x8000: 0x80001040,\n      0x18000: 0x40,\n      0x28000: 0x80400040,\n      0x38000: 0x80001000,\n      0x48000: 0x401000,\n      0x58000: 0x80401040,\n      0x68000: 0x0,\n      0x78000: 0x80400000,\n      0x88000: 0x1000,\n      0x98000: 0x80401000,\n      0xa8000: 0x400000,\n      0xb8000: 0x1040,\n      0xc8000: 0x80000000,\n      0xd8000: 0x400040,\n      0xe8000: 0x401040,\n      0xf8000: 0x80000040,\n      0x100000: 0x400040,\n      0x110000: 0x401000,\n      0x120000: 0x80000040,\n      0x130000: 0x0,\n      0x140000: 0x1040,\n      0x150000: 0x80400040,\n      0x160000: 0x80401000,\n      0x170000: 0x80001040,\n      0x180000: 0x80401040,\n      0x190000: 0x80000000,\n      0x1a0000: 0x80400000,\n      0x1b0000: 0x401040,\n      0x1c0000: 0x80001000,\n      0x1d0000: 0x400000,\n      0x1e0000: 0x40,\n      0x1f0000: 0x1000,\n      0x108000: 0x80400000,\n      0x118000: 0x80401040,\n      0x128000: 0x0,\n      0x138000: 0x401000,\n      0x148000: 0x400040,\n      0x158000: 0x80000000,\n      0x168000: 0x80001040,\n      0x178000: 0x40,\n      0x188000: 0x80000040,\n      0x198000: 0x1000,\n      0x1a8000: 0x80001000,\n      0x1b8000: 0x80400040,\n      0x1c8000: 0x1040,\n      0x1d8000: 0x80401000,\n      0x1e8000: 0x400000,\n      0x1f8000: 0x401040 },\n\n    {\n      0x0: 0x80,\n      0x1000: 0x1040000,\n      0x2000: 0x40000,\n      0x3000: 0x20000000,\n      0x4000: 0x20040080,\n      0x5000: 0x1000080,\n      0x6000: 0x21000080,\n      0x7000: 0x40080,\n      0x8000: 0x1000000,\n      0x9000: 0x20040000,\n      0xa000: 0x20000080,\n      0xb000: 0x21040080,\n      0xc000: 0x21040000,\n      0xd000: 0x0,\n      0xe000: 0x1040080,\n      0xf000: 0x21000000,\n      0x800: 0x1040080,\n      0x1800: 0x21000080,\n      0x2800: 0x80,\n      0x3800: 0x1040000,\n      0x4800: 0x40000,\n      0x5800: 0x20040080,\n      0x6800: 0x21040000,\n      0x7800: 0x20000000,\n      0x8800: 0x20040000,\n      0x9800: 0x0,\n      0xa800: 0x21040080,\n      0xb800: 0x1000080,\n      0xc800: 0x20000080,\n      0xd800: 0x21000000,\n      0xe800: 0x1000000,\n      0xf800: 0x40080,\n      0x10000: 0x40000,\n      0x11000: 0x80,\n      0x12000: 0x20000000,\n      0x13000: 0x21000080,\n      0x14000: 0x1000080,\n      0x15000: 0x21040000,\n      0x16000: 0x20040080,\n      0x17000: 0x1000000,\n      0x18000: 0x21040080,\n      0x19000: 0x21000000,\n      0x1a000: 0x1040000,\n      0x1b000: 0x20040000,\n      0x1c000: 0x40080,\n      0x1d000: 0x20000080,\n      0x1e000: 0x0,\n      0x1f000: 0x1040080,\n      0x10800: 0x21000080,\n      0x11800: 0x1000000,\n      0x12800: 0x1040000,\n      0x13800: 0x20040080,\n      0x14800: 0x20000000,\n      0x15800: 0x1040080,\n      0x16800: 0x80,\n      0x17800: 0x21040000,\n      0x18800: 0x40080,\n      0x19800: 0x21040080,\n      0x1a800: 0x0,\n      0x1b800: 0x21000000,\n      0x1c800: 0x1000080,\n      0x1d800: 0x40000,\n      0x1e800: 0x20040000,\n      0x1f800: 0x20000080 },\n\n    {\n      0x0: 0x10000008,\n      0x100: 0x2000,\n      0x200: 0x10200000,\n      0x300: 0x10202008,\n      0x400: 0x10002000,\n      0x500: 0x200000,\n      0x600: 0x200008,\n      0x700: 0x10000000,\n      0x800: 0x0,\n      0x900: 0x10002008,\n      0xa00: 0x202000,\n      0xb00: 0x8,\n      0xc00: 0x10200008,\n      0xd00: 0x202008,\n      0xe00: 0x2008,\n      0xf00: 0x10202000,\n      0x80: 0x10200000,\n      0x180: 0x10202008,\n      0x280: 0x8,\n      0x380: 0x200000,\n      0x480: 0x202008,\n      0x580: 0x10000008,\n      0x680: 0x10002000,\n      0x780: 0x2008,\n      0x880: 0x200008,\n      0x980: 0x2000,\n      0xa80: 0x10002008,\n      0xb80: 0x10200008,\n      0xc80: 0x0,\n      0xd80: 0x10202000,\n      0xe80: 0x202000,\n      0xf80: 0x10000000,\n      0x1000: 0x10002000,\n      0x1100: 0x10200008,\n      0x1200: 0x10202008,\n      0x1300: 0x2008,\n      0x1400: 0x200000,\n      0x1500: 0x10000000,\n      0x1600: 0x10000008,\n      0x1700: 0x202000,\n      0x1800: 0x202008,\n      0x1900: 0x0,\n      0x1a00: 0x8,\n      0x1b00: 0x10200000,\n      0x1c00: 0x2000,\n      0x1d00: 0x10002008,\n      0x1e00: 0x10202000,\n      0x1f00: 0x200008,\n      0x1080: 0x8,\n      0x1180: 0x202000,\n      0x1280: 0x200000,\n      0x1380: 0x10000008,\n      0x1480: 0x10002000,\n      0x1580: 0x2008,\n      0x1680: 0x10202008,\n      0x1780: 0x10200000,\n      0x1880: 0x10202000,\n      0x1980: 0x10200008,\n      0x1a80: 0x2000,\n      0x1b80: 0x202008,\n      0x1c80: 0x200008,\n      0x1d80: 0x0,\n      0x1e80: 0x10000000,\n      0x1f80: 0x10002008 },\n\n    {\n      0x0: 0x100000,\n      0x10: 0x2000401,\n      0x20: 0x400,\n      0x30: 0x100401,\n      0x40: 0x2100401,\n      0x50: 0x0,\n      0x60: 0x1,\n      0x70: 0x2100001,\n      0x80: 0x2000400,\n      0x90: 0x100001,\n      0xa0: 0x2000001,\n      0xb0: 0x2100400,\n      0xc0: 0x2100000,\n      0xd0: 0x401,\n      0xe0: 0x100400,\n      0xf0: 0x2000000,\n      0x8: 0x2100001,\n      0x18: 0x0,\n      0x28: 0x2000401,\n      0x38: 0x2100400,\n      0x48: 0x100000,\n      0x58: 0x2000001,\n      0x68: 0x2000000,\n      0x78: 0x401,\n      0x88: 0x100401,\n      0x98: 0x2000400,\n      0xa8: 0x2100000,\n      0xb8: 0x100001,\n      0xc8: 0x400,\n      0xd8: 0x2100401,\n      0xe8: 0x1,\n      0xf8: 0x100400,\n      0x100: 0x2000000,\n      0x110: 0x100000,\n      0x120: 0x2000401,\n      0x130: 0x2100001,\n      0x140: 0x100001,\n      0x150: 0x2000400,\n      0x160: 0x2100400,\n      0x170: 0x100401,\n      0x180: 0x401,\n      0x190: 0x2100401,\n      0x1a0: 0x100400,\n      0x1b0: 0x1,\n      0x1c0: 0x0,\n      0x1d0: 0x2100000,\n      0x1e0: 0x2000001,\n      0x1f0: 0x400,\n      0x108: 0x100400,\n      0x118: 0x2000401,\n      0x128: 0x2100001,\n      0x138: 0x1,\n      0x148: 0x2000000,\n      0x158: 0x100000,\n      0x168: 0x401,\n      0x178: 0x2100400,\n      0x188: 0x2000001,\n      0x198: 0x2100000,\n      0x1a8: 0x0,\n      0x1b8: 0x2100401,\n      0x1c8: 0x100401,\n      0x1d8: 0x400,\n      0x1e8: 0x2000400,\n      0x1f8: 0x100001 },\n\n    {\n      0x0: 0x8000820,\n      0x1: 0x20000,\n      0x2: 0x8000000,\n      0x3: 0x20,\n      0x4: 0x20020,\n      0x5: 0x8020820,\n      0x6: 0x8020800,\n      0x7: 0x800,\n      0x8: 0x8020000,\n      0x9: 0x8000800,\n      0xa: 0x20800,\n      0xb: 0x8020020,\n      0xc: 0x820,\n      0xd: 0x0,\n      0xe: 0x8000020,\n      0xf: 0x20820,\n      0x80000000: 0x800,\n      0x80000001: 0x8020820,\n      0x80000002: 0x8000820,\n      0x80000003: 0x8000000,\n      0x80000004: 0x8020000,\n      0x80000005: 0x20800,\n      0x80000006: 0x20820,\n      0x80000007: 0x20,\n      0x80000008: 0x8000020,\n      0x80000009: 0x820,\n      0x8000000a: 0x20020,\n      0x8000000b: 0x8020800,\n      0x8000000c: 0x0,\n      0x8000000d: 0x8020020,\n      0x8000000e: 0x8000800,\n      0x8000000f: 0x20000,\n      0x10: 0x20820,\n      0x11: 0x8020800,\n      0x12: 0x20,\n      0x13: 0x800,\n      0x14: 0x8000800,\n      0x15: 0x8000020,\n      0x16: 0x8020020,\n      0x17: 0x20000,\n      0x18: 0x0,\n      0x19: 0x20020,\n      0x1a: 0x8020000,\n      0x1b: 0x8000820,\n      0x1c: 0x8020820,\n      0x1d: 0x20800,\n      0x1e: 0x820,\n      0x1f: 0x8000000,\n      0x80000010: 0x20000,\n      0x80000011: 0x800,\n      0x80000012: 0x8020020,\n      0x80000013: 0x20820,\n      0x80000014: 0x20,\n      0x80000015: 0x8020000,\n      0x80000016: 0x8000000,\n      0x80000017: 0x8000820,\n      0x80000018: 0x8020820,\n      0x80000019: 0x8000020,\n      0x8000001a: 0x8000800,\n      0x8000001b: 0x0,\n      0x8000001c: 0x20800,\n      0x8000001d: 0x820,\n      0x8000001e: 0x20020,\n      0x8000001f: 0x8020800 }];\n\n\n\n    // Masks that select the SBOX input\n    var SBOX_MASK = [\n    0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n    0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];\n\n\n    /**\n                                                      * DES block cipher algorithm.\n                                                      */\n    var DES = C_algo.DES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n\n        // Select 56 bits according to PC1\n        var keyBits = [];\n        for (var i = 0; i < 56; i++) {\n          var keyBitPos = PC1[i] - 1;\n          keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;\n        }\n\n        // Assemble 16 subkeys\n        var subKeys = this._subKeys = [];\n        for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n          // Create subkey\n          var subKey = subKeys[nSubKey] = [];\n\n          // Shortcut\n          var bitShift = BIT_SHIFTS[nSubKey];\n\n          // Select 48 bits according to PC2\n          for (var i = 0; i < 24; i++) {\n            // Select from the left 28 key bits\n            subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;\n\n            // Select from the right 28 key bits\n            subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;\n          }\n\n          // Since each subkey is applied to an expanded 32-bit input,\n          // the subkey can be broken into 8 values scaled to 32-bits,\n          // which allows the key to be used without expansion\n          subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;\n          for (var i = 1; i < 7; i++) {\n            subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;\n          }\n          subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;\n        }\n\n        // Compute inverse subkeys\n        var invSubKeys = this._invSubKeys = [];\n        for (var i = 0; i < 16; i++) {\n          invSubKeys[i] = subKeys[15 - i];\n        }\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._subKeys);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._invSubKeys);\n      },\n\n      _doCryptBlock: function _doCryptBlock(M, offset, subKeys) {\n        // Get input\n        this._lBlock = M[offset];\n        this._rBlock = M[offset + 1];\n\n        // Initial permutation\n        exchangeLR.call(this, 4, 0x0f0f0f0f);\n        exchangeLR.call(this, 16, 0x0000ffff);\n        exchangeRL.call(this, 2, 0x33333333);\n        exchangeRL.call(this, 8, 0x00ff00ff);\n        exchangeLR.call(this, 1, 0x55555555);\n\n        // Rounds\n        for (var round = 0; round < 16; round++) {\n          // Shortcuts\n          var subKey = subKeys[round];\n          var lBlock = this._lBlock;\n          var rBlock = this._rBlock;\n\n          // Feistel function\n          var f = 0;\n          for (var i = 0; i < 8; i++) {\n            f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n          }\n          this._lBlock = rBlock;\n          this._rBlock = lBlock ^ f;\n        }\n\n        // Undo swap from last round\n        var t = this._lBlock;\n        this._lBlock = this._rBlock;\n        this._rBlock = t;\n\n        // Final permutation\n        exchangeLR.call(this, 1, 0x55555555);\n        exchangeRL.call(this, 8, 0x00ff00ff);\n        exchangeRL.call(this, 2, 0x33333333);\n        exchangeLR.call(this, 16, 0x0000ffff);\n        exchangeLR.call(this, 4, 0x0f0f0f0f);\n\n        // Set output\n        M[offset] = this._lBlock;\n        M[offset + 1] = this._rBlock;\n      },\n\n      keySize: 64 / 32,\n\n      ivSize: 64 / 32,\n\n      blockSize: 64 / 32 });\n\n\n    // Swap bits across the left and right words\n    function exchangeLR(offset, mask) {\n      var t = (this._lBlock >>> offset ^ this._rBlock) & mask;\n      this._rBlock ^= t;\n      this._lBlock ^= t << offset;\n    }\n\n    function exchangeRL(offset, mask) {\n      var t = (this._rBlock >>> offset ^ this._lBlock) & mask;\n      this._lBlock ^= t;\n      this._rBlock ^= t << offset;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n       */\n    C.DES = BlockCipher._createHelper(DES);\n\n    /**\n                                             * Triple-DES block cipher algorithm.\n                                             */\n    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n        // Make sure the key length is valid (64, 128 or >= 192 bit)\n        if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {\n          throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');\n        }\n\n        // Extend the key according to the keying options defined in 3DES standard\n        var key1 = keyWords.slice(0, 2);\n        var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);\n        var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);\n\n        // Create DES instances\n        this._des1 = DES.createEncryptor(WordArray.create(key1));\n        this._des2 = DES.createEncryptor(WordArray.create(key2));\n        this._des3 = DES.createEncryptor(WordArray.create(key3));\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._des1.encryptBlock(M, offset);\n        this._des2.decryptBlock(M, offset);\n        this._des3.encryptBlock(M, offset);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        this._des3.decryptBlock(M, offset);\n        this._des2.encryptBlock(M, offset);\n        this._des1.decryptBlock(M, offset);\n      },\n\n      keySize: 192 / 32,\n\n      ivSize: 64 / 32,\n\n      blockSize: 64 / 32 });\n\n\n    /**\n                              * Shortcut functions to the cipher's object interface.\n                              *\n                              * @example\n                              *\n                              *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n                              *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n                              */\n    C.TripleDES = BlockCipher._createHelper(TripleDES);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    /**\n                          * RC4 stream cipher algorithm.\n                          */\n    var RC4 = C_algo.RC4 = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n        var keySigBytes = key.sigBytes;\n\n        // Init sbox\n        var S = this._S = [];\n        for (var i = 0; i < 256; i++) {\n          S[i] = i;\n        }\n\n        // Key setup\n        for (var i = 0, j = 0; i < 256; i++) {\n          var keyByteIndex = i % keySigBytes;\n          var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;\n\n          j = (j + S[i] + keyByte) % 256;\n\n          // Swap\n          var t = S[i];\n          S[i] = S[j];\n          S[j] = t;\n        }\n\n        // Counters\n        this._i = this._j = 0;\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        M[offset] ^= generateKeystreamWord.call(this);\n      },\n\n      keySize: 256 / 32,\n\n      ivSize: 0 });\n\n\n    function generateKeystreamWord() {\n      // Shortcuts\n      var S = this._S;\n      var i = this._i;\n      var j = this._j;\n\n      // Generate keystream word\n      var keystreamWord = 0;\n      for (var n = 0; n < 4; n++) {\n        i = (i + 1) % 256;\n        j = (j + S[i]) % 256;\n\n        // Swap\n        var t = S[i];\n        S[i] = S[j];\n        S[j] = t;\n\n        keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;\n      }\n\n      // Update counters\n      this._i = i;\n      this._j = j;\n\n      return keystreamWord;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n       */\n    C.RC4 = StreamCipher._createHelper(RC4);\n\n    /**\n                                              * Modified RC4 stream cipher algorithm.\n                                              */\n    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n      /**\n                                                 * Configuration options.\n                                                 *\n                                                 * @property {number} drop The number of keystream words to drop. Default 192\n                                                 */\n      cfg: RC4.cfg.extend({\n        drop: 192 }),\n\n\n      _doReset: function _doReset() {\n        RC4._doReset.call(this);\n\n        // Drop\n        for (var i = this.cfg.drop; i > 0; i--) {\n          generateKeystreamWord.call(this);\n        }\n      } });\n\n\n    /**\n             * Shortcut functions to the cipher's object interface.\n             *\n             * @example\n             *\n             *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n             *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n             */\n    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    // Reusable objects\n    var S = [];\n    var C_ = [];\n    var G = [];\n\n    /**\n                 * Rabbit stream cipher algorithm\n                 */\n    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var K = this._key.words;\n        var iv = this.cfg.iv;\n\n        // Swap endian\n        for (var i = 0; i < 4; i++) {\n          K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff |\n          (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;\n        }\n\n        // Generate initial state values\n        var X = this._X = [\n        K[0], K[3] << 16 | K[2] >>> 16,\n        K[1], K[0] << 16 | K[3] >>> 16,\n        K[2], K[1] << 16 | K[0] >>> 16,\n        K[3], K[2] << 16 | K[1] >>> 16];\n\n\n        // Generate initial counter values\n        var C = this._C = [\n        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,\n        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,\n        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,\n        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n\n\n        // Carry bit\n        this._b = 0;\n\n        // Iterate the system four times\n        for (var i = 0; i < 4; i++) {\n          nextState.call(this);\n        }\n\n        // Modify the counters\n        for (var i = 0; i < 8; i++) {\n          C[i] ^= X[i + 4 & 7];\n        }\n\n        // IV setup\n        if (iv) {\n          // Shortcuts\n          var IV = iv.words;\n          var IV_0 = IV[0];\n          var IV_1 = IV[1];\n\n          // Generate four subvectors\n          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n          var i1 = i0 >>> 16 | i2 & 0xffff0000;\n          var i3 = i2 << 16 | i0 & 0x0000ffff;\n\n          // Modify counter values\n          C[0] ^= i0;\n          C[1] ^= i1;\n          C[2] ^= i2;\n          C[3] ^= i3;\n          C[4] ^= i0;\n          C[5] ^= i1;\n          C[6] ^= i2;\n          C[7] ^= i3;\n\n          // Iterate the system four times\n          for (var i = 0; i < 4; i++) {\n            nextState.call(this);\n          }\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var X = this._X;\n\n        // Iterate the system\n        nextState.call(this);\n\n        // Generate four keystream words\n        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n        for (var i = 0; i < 4; i++) {\n          // Swap endian\n          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |\n          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;\n\n          // Encrypt\n          M[offset + i] ^= S[i];\n        }\n      },\n\n      blockSize: 128 / 32,\n\n      ivSize: 64 / 32 });\n\n\n    function nextState() {\n      // Shortcuts\n      var X = this._X;\n      var C = this._C;\n\n      // Save old counter values\n      for (var i = 0; i < 8; i++) {\n        C_[i] = C[i];\n      }\n\n      // Calculate new counter values\n      C[0] = C[0] + 0x4d34d34d + this._b | 0;\n      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;\n\n      // Calculate the g-values\n      for (var i = 0; i < 8; i++) {\n        var gx = X[i] + C[i];\n\n        // Construct high and low argument for squaring\n        var ga = gx & 0xffff;\n        var gb = gx >>> 16;\n\n        // Calculate high and low result of squaring\n        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);\n\n        // High XOR low\n        G[i] = gh ^ gl;\n      }\n\n      // Calculate new state values\n      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n       */\n    C.Rabbit = StreamCipher._createHelper(Rabbit);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    // Reusable objects\n    var S = [];\n    var C_ = [];\n    var G = [];\n\n    /**\n                 * Rabbit stream cipher algorithm.\n                 *\n                 * This is a legacy version that neglected to convert the key to little-endian.\n                 * This error doesn't affect the cipher's security,\n                 * but it does affect its compatibility with other implementations.\n                 */\n    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var K = this._key.words;\n        var iv = this.cfg.iv;\n\n        // Generate initial state values\n        var X = this._X = [\n        K[0], K[3] << 16 | K[2] >>> 16,\n        K[1], K[0] << 16 | K[3] >>> 16,\n        K[2], K[1] << 16 | K[0] >>> 16,\n        K[3], K[2] << 16 | K[1] >>> 16];\n\n\n        // Generate initial counter values\n        var C = this._C = [\n        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,\n        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,\n        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,\n        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n\n\n        // Carry bit\n        this._b = 0;\n\n        // Iterate the system four times\n        for (var i = 0; i < 4; i++) {\n          nextState.call(this);\n        }\n\n        // Modify the counters\n        for (var i = 0; i < 8; i++) {\n          C[i] ^= X[i + 4 & 7];\n        }\n\n        // IV setup\n        if (iv) {\n          // Shortcuts\n          var IV = iv.words;\n          var IV_0 = IV[0];\n          var IV_1 = IV[1];\n\n          // Generate four subvectors\n          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n          var i1 = i0 >>> 16 | i2 & 0xffff0000;\n          var i3 = i2 << 16 | i0 & 0x0000ffff;\n\n          // Modify counter values\n          C[0] ^= i0;\n          C[1] ^= i1;\n          C[2] ^= i2;\n          C[3] ^= i3;\n          C[4] ^= i0;\n          C[5] ^= i1;\n          C[6] ^= i2;\n          C[7] ^= i3;\n\n          // Iterate the system four times\n          for (var i = 0; i < 4; i++) {\n            nextState.call(this);\n          }\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var X = this._X;\n\n        // Iterate the system\n        nextState.call(this);\n\n        // Generate four keystream words\n        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n        for (var i = 0; i < 4; i++) {\n          // Swap endian\n          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |\n          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;\n\n          // Encrypt\n          M[offset + i] ^= S[i];\n        }\n      },\n\n      blockSize: 128 / 32,\n\n      ivSize: 64 / 32 });\n\n\n    function nextState() {\n      // Shortcuts\n      var X = this._X;\n      var C = this._C;\n\n      // Save old counter values\n      for (var i = 0; i < 8; i++) {\n        C_[i] = C[i];\n      }\n\n      // Calculate new counter values\n      C[0] = C[0] + 0x4d34d34d + this._b | 0;\n      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;\n\n      // Calculate the g-values\n      for (var i = 0; i < 8; i++) {\n        var gx = X[i] + C[i];\n\n        // Construct high and low argument for squaring\n        var ga = gx & 0xffff;\n        var gb = gx >>> 16;\n\n        // Calculate high and low result of squaring\n        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);\n\n        // High XOR low\n        G[i] = gh ^ gl;\n      }\n\n      // Calculate new state values\n      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n       */\n    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n  })();\n\n\n  return CryptoJS;\n\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/crypto.js */ 52)[\"default\"], __webpack_require__(/*! (webpack)/buildin/global.js */ 19), __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/crypto.js */ 52)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2NyeXB0by1qcy9jcnlwdG8tanMuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ3J5cHRvSlMiLCJNYXRoIiwidW5kZWZpbmVkIiwiY3J5cHRvIiwid2luZG93Iiwic2VsZiIsImdsb2JhbFRoaXMiLCJtc0NyeXB0byIsImdsb2JhbCIsInJlcXVpcmUiLCJlcnIiLCJjcnlwdG9TZWN1cmVSYW5kb21JbnQiLCJnZXRSYW5kb21WYWx1ZXMiLCJVaW50MzJBcnJheSIsInJhbmRvbUJ5dGVzIiwicmVhZEludDMyTEUiLCJFcnJvciIsImNyZWF0ZSIsIk9iamVjdCIsIkYiLCJvYmoiLCJzdWJ0eXBlIiwicHJvdG90eXBlIiwiQyIsIkNfbGliIiwibGliIiwiQmFzZSIsImV4dGVuZCIsIm92ZXJyaWRlcyIsIm1peEluIiwiaGFzT3duUHJvcGVydHkiLCJpbml0IiwiJHN1cGVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpbnN0YW5jZSIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eU5hbWUiLCJ0b1N0cmluZyIsImNsb25lIiwiV29yZEFycmF5Iiwid29yZHMiLCJzaWdCeXRlcyIsImxlbmd0aCIsImVuY29kZXIiLCJIZXgiLCJzdHJpbmdpZnkiLCJjb25jYXQiLCJ3b3JkQXJyYXkiLCJ0aGlzV29yZHMiLCJ0aGF0V29yZHMiLCJ0aGlzU2lnQnl0ZXMiLCJ0aGF0U2lnQnl0ZXMiLCJjbGFtcCIsImkiLCJ0aGF0Qnl0ZSIsImoiLCJjZWlsIiwiY2FsbCIsInNsaWNlIiwicmFuZG9tIiwibkJ5dGVzIiwicHVzaCIsIkNfZW5jIiwiZW5jIiwiaGV4Q2hhcnMiLCJiaXRlIiwiam9pbiIsInBhcnNlIiwiaGV4U3RyIiwiaGV4U3RyTGVuZ3RoIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJMYXRpbjEiLCJsYXRpbjFDaGFycyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImxhdGluMVN0ciIsImxhdGluMVN0ckxlbmd0aCIsImNoYXJDb2RlQXQiLCJVdGY4IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwiZSIsInV0ZjhTdHIiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0iLCJyZXNldCIsIl9kYXRhIiwiX25EYXRhQnl0ZXMiLCJfYXBwZW5kIiwiZGF0YSIsIl9wcm9jZXNzIiwiZG9GbHVzaCIsInByb2Nlc3NlZFdvcmRzIiwiZGF0YVdvcmRzIiwiZGF0YVNpZ0J5dGVzIiwiYmxvY2tTaXplIiwiYmxvY2tTaXplQnl0ZXMiLCJuQmxvY2tzUmVhZHkiLCJtYXgiLCJfbWluQnVmZmVyU2l6ZSIsIm5Xb3Jkc1JlYWR5IiwibkJ5dGVzUmVhZHkiLCJtaW4iLCJvZmZzZXQiLCJfZG9Qcm9jZXNzQmxvY2siLCJzcGxpY2UiLCJIYXNoZXIiLCJjZmciLCJfZG9SZXNldCIsInVwZGF0ZSIsIm1lc3NhZ2VVcGRhdGUiLCJmaW5hbGl6ZSIsImhhc2giLCJfZG9GaW5hbGl6ZSIsIl9jcmVhdGVIZWxwZXIiLCJoYXNoZXIiLCJtZXNzYWdlIiwiX2NyZWF0ZUhtYWNIZWxwZXIiLCJrZXkiLCJDX2FsZ28iLCJITUFDIiwiYWxnbyIsIlgzMldvcmRBcnJheSIsIkNfeDY0IiwieDY0IiwiWDY0V29yZCIsIldvcmQiLCJoaWdoIiwibG93IiwiWDY0V29yZEFycmF5IiwidG9YMzIiLCJ4NjRXb3JkcyIsIng2NFdvcmRzTGVuZ3RoIiwieDMyV29yZHMiLCJ4NjRXb3JkIiwid29yZHNMZW5ndGgiLCJBcnJheUJ1ZmZlciIsInN1cGVySW5pdCIsInN1YkluaXQiLCJ0eXBlZEFycmF5IiwiVWludDhBcnJheSIsIkludDhBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwidHlwZWRBcnJheUJ5dGVMZW5ndGgiLCJVdGYxNkJFIiwiVXRmMTYiLCJ1dGYxNkNoYXJzIiwiY29kZVBvaW50IiwidXRmMTZTdHIiLCJ1dGYxNlN0ckxlbmd0aCIsIlV0ZjE2TEUiLCJzd2FwRW5kaWFuIiwid29yZCIsIkJhc2U2NCIsIm1hcCIsIl9tYXAiLCJiYXNlNjRDaGFycyIsImJ5dGUxIiwiYnl0ZTIiLCJieXRlMyIsInRyaXBsZXQiLCJjaGFyQXQiLCJwYWRkaW5nQ2hhciIsImJhc2U2NFN0ciIsImJhc2U2NFN0ckxlbmd0aCIsInJldmVyc2VNYXAiLCJfcmV2ZXJzZU1hcCIsInBhZGRpbmdJbmRleCIsImluZGV4T2YiLCJwYXJzZUxvb3AiLCJiaXRzMSIsImJpdHMyIiwiYml0c0NvbWJpbmVkIiwiQmFzZTY0dXJsIiwidXJsU2FmZSIsIl9zYWZlX21hcCIsIlQiLCJhYnMiLCJzaW4iLCJNRDUiLCJfaGFzaCIsIk0iLCJvZmZzZXRfaSIsIk1fb2Zmc2V0X2kiLCJIIiwiTV9vZmZzZXRfMCIsIk1fb2Zmc2V0XzEiLCJNX29mZnNldF8yIiwiTV9vZmZzZXRfMyIsIk1fb2Zmc2V0XzQiLCJNX29mZnNldF81IiwiTV9vZmZzZXRfNiIsIk1fb2Zmc2V0XzciLCJNX29mZnNldF84IiwiTV9vZmZzZXRfOSIsIk1fb2Zmc2V0XzEwIiwiTV9vZmZzZXRfMTEiLCJNX29mZnNldF8xMiIsIk1fb2Zmc2V0XzEzIiwiTV9vZmZzZXRfMTQiLCJNX29mZnNldF8xNSIsImEiLCJiIiwiYyIsImQiLCJGRiIsIkdHIiwiSEgiLCJJSSIsIm5CaXRzVG90YWwiLCJuQml0c0xlZnQiLCJuQml0c1RvdGFsSCIsImZsb29yIiwibkJpdHNUb3RhbEwiLCJIX2kiLCJ4IiwicyIsInQiLCJuIiwiSG1hY01ENSIsIlciLCJTSEExIiwiSG1hY1NIQTEiLCJLIiwiaXNQcmltZSIsInNxcnROIiwic3FydCIsImZhY3RvciIsImdldEZyYWN0aW9uYWxCaXRzIiwiblByaW1lIiwicG93IiwiU0hBMjU2IiwiZiIsImciLCJoIiwiZ2FtbWEweCIsImdhbW1hMCIsImdhbW1hMXgiLCJnYW1tYTEiLCJjaCIsIm1haiIsInNpZ21hMCIsInNpZ21hMSIsInQxIiwidDIiLCJIbWFjU0hBMjU2IiwiU0hBMjI0IiwiSG1hY1NIQTIyNCIsIlg2NFdvcmRfY3JlYXRlIiwiU0hBNTEyIiwiSDAiLCJIMSIsIkgyIiwiSDMiLCJINCIsIkg1IiwiSDYiLCJINyIsIkgwaCIsIkgwbCIsIkgxaCIsIkgxbCIsIkgyaCIsIkgybCIsIkgzaCIsIkgzbCIsIkg0aCIsIkg0bCIsIkg1aCIsIkg1bCIsIkg2aCIsIkg2bCIsIkg3aCIsIkg3bCIsImFoIiwiYWwiLCJiaCIsImJsIiwiY2wiLCJkaCIsImRsIiwiZWgiLCJlbCIsImZoIiwiZmwiLCJnaCIsImdsIiwiaGgiLCJobCIsIldpbCIsIldpaCIsIldpIiwiZ2FtbWEweGgiLCJnYW1tYTB4bCIsImdhbW1hMGgiLCJnYW1tYTBsIiwiZ2FtbWExeGgiLCJnYW1tYTF4bCIsImdhbW1hMWgiLCJnYW1tYTFsIiwiV2k3IiwiV2k3aCIsIldpN2wiLCJXaTE2IiwiV2kxNmgiLCJXaTE2bCIsImNoaCIsImNobCIsIm1hamgiLCJtYWpsIiwic2lnbWEwaCIsInNpZ21hMGwiLCJzaWdtYTFoIiwic2lnbWExbCIsIktpIiwiS2loIiwiS2lsIiwidDFsIiwidDFoIiwidDJsIiwidDJoIiwiSG1hY1NIQTUxMiIsIlNIQTM4NCIsIkhtYWNTSEEzODQiLCJSSE9fT0ZGU0VUUyIsIlBJX0lOREVYRVMiLCJST1VORF9DT05TVEFOVFMiLCJ5IiwibmV3WCIsIm5ld1kiLCJMRlNSIiwicm91bmRDb25zdGFudE1zdyIsInJvdW5kQ29uc3RhbnRMc3ciLCJiaXRQb3NpdGlvbiIsIlNIQTMiLCJvdXRwdXRMZW5ndGgiLCJzdGF0ZSIsIl9zdGF0ZSIsIm5CbG9ja1NpemVMYW5lcyIsIk0yaSIsIk0yaTEiLCJsYW5lIiwicm91bmQiLCJ0TXN3IiwidExzdyIsIlR4IiwiVHg0IiwiVHgxIiwiVHgxTXN3IiwiVHgxTHN3IiwibGFuZUluZGV4IiwibGFuZU1zdyIsImxhbmVMc3ciLCJyaG9PZmZzZXQiLCJUUGlMYW5lIiwiVDAiLCJzdGF0ZTAiLCJUTGFuZSIsIlR4MUxhbmUiLCJUeDJMYW5lIiwicm91bmRDb25zdGFudCIsImJsb2NrU2l6ZUJpdHMiLCJvdXRwdXRMZW5ndGhCeXRlcyIsIm91dHB1dExlbmd0aExhbmVzIiwiaGFzaFdvcmRzIiwiSG1hY1NIQTMiLCJfemwiLCJfenIiLCJfc2wiLCJfc3IiLCJfaGwiLCJfaHIiLCJSSVBFTUQxNjAiLCJociIsInpsIiwienIiLCJzbCIsInNyIiwiYXIiLCJiciIsImNyIiwiZHIiLCJlciIsImYxIiwiZjIiLCJmMyIsImY0IiwiZjUiLCJyb3RsIiwieiIsIkhtYWNSSVBFTUQxNjAiLCJfaGFzaGVyIiwiaGFzaGVyQmxvY2tTaXplIiwiaGFzaGVyQmxvY2tTaXplQnl0ZXMiLCJvS2V5IiwiX29LZXkiLCJpS2V5IiwiX2lLZXkiLCJvS2V5V29yZHMiLCJpS2V5V29yZHMiLCJpbm5lckhhc2giLCJobWFjIiwiUEJLREYyIiwia2V5U2l6ZSIsIml0ZXJhdGlvbnMiLCJjb21wdXRlIiwicGFzc3dvcmQiLCJzYWx0IiwiZGVyaXZlZEtleSIsImJsb2NrSW5kZXgiLCJkZXJpdmVkS2V5V29yZHMiLCJibG9ja0luZGV4V29yZHMiLCJibG9jayIsImJsb2NrV29yZHMiLCJibG9ja1dvcmRzTGVuZ3RoIiwiaW50ZXJtZWRpYXRlIiwiaW50ZXJtZWRpYXRlV29yZHMiLCJFdnBLREYiLCJDaXBoZXIiLCJjcmVhdGVFbmNyeXB0b3IiLCJfRU5DX1hGT1JNX01PREUiLCJjcmVhdGVEZWNyeXB0b3IiLCJfREVDX1hGT1JNX01PREUiLCJ4Zm9ybU1vZGUiLCJfeGZvcm1Nb2RlIiwiX2tleSIsInByb2Nlc3MiLCJkYXRhVXBkYXRlIiwiZmluYWxQcm9jZXNzZWREYXRhIiwiaXZTaXplIiwic2VsZWN0Q2lwaGVyU3RyYXRlZ3kiLCJQYXNzd29yZEJhc2VkQ2lwaGVyIiwiU2VyaWFsaXphYmxlQ2lwaGVyIiwiY2lwaGVyIiwiZW5jcnlwdCIsImRlY3J5cHQiLCJjaXBoZXJ0ZXh0IiwiU3RyZWFtQ2lwaGVyIiwiZmluYWxQcm9jZXNzZWRCbG9ja3MiLCJDX21vZGUiLCJtb2RlIiwiQmxvY2tDaXBoZXJNb2RlIiwiaXYiLCJFbmNyeXB0b3IiLCJEZWNyeXB0b3IiLCJfY2lwaGVyIiwiX2l2IiwiQ0JDIiwicHJvY2Vzc0Jsb2NrIiwieG9yQmxvY2siLCJlbmNyeXB0QmxvY2siLCJfcHJldkJsb2NrIiwidGhpc0Jsb2NrIiwiZGVjcnlwdEJsb2NrIiwiQ19wYWQiLCJwYWQiLCJQa2NzNyIsIm5QYWRkaW5nQnl0ZXMiLCJwYWRkaW5nV29yZCIsInBhZGRpbmdXb3JkcyIsInBhZGRpbmciLCJ1bnBhZCIsIkJsb2NrQ2lwaGVyIiwibW9kZUNyZWF0b3IiLCJfbW9kZSIsIl9fY3JlYXRvciIsIkNpcGhlclBhcmFtcyIsImNpcGhlclBhcmFtcyIsImZvcm1hdHRlciIsIkNfZm9ybWF0IiwiZm9ybWF0IiwiT3BlblNTTEZvcm1hdHRlciIsIk9wZW5TU0wiLCJvcGVuU1NMU3RyIiwiY2lwaGVydGV4dFdvcmRzIiwiZW5jcnlwdG9yIiwiY2lwaGVyQ2ZnIiwiYWxnb3JpdGhtIiwiX3BhcnNlIiwicGxhaW50ZXh0IiwiQ19rZGYiLCJrZGYiLCJPcGVuU1NMS2RmIiwiZXhlY3V0ZSIsImRlcml2ZWRQYXJhbXMiLCJDRkIiLCJnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQiLCJrZXlzdHJlYW0iLCJDVFIiLCJjb3VudGVyIiwiX2NvdW50ZXIiLCJDVFJHbGFkbWFuIiwiaW5jV29yZCIsImIxIiwiYjIiLCJiMyIsImluY0NvdW50ZXIiLCJPRkIiLCJfa2V5c3RyZWFtIiwiRUNCIiwiQW5zaVg5MjMiLCJsYXN0Qnl0ZVBvcyIsIklzbzEwMTI2IiwiSXNvOTc5NzEiLCJaZXJvUGFkZGluZyIsIk5vUGFkZGluZyIsIkhleEZvcm1hdHRlciIsImlucHV0IiwiU0JPWCIsIklOVl9TQk9YIiwiU1VCX01JWF8wIiwiU1VCX01JWF8xIiwiU1VCX01JWF8yIiwiU1VCX01JWF8zIiwiSU5WX1NVQl9NSVhfMCIsIklOVl9TVUJfTUlYXzEiLCJJTlZfU1VCX01JWF8yIiwiSU5WX1NVQl9NSVhfMyIsInhpIiwic3giLCJ4MiIsIng0IiwieDgiLCJSQ09OIiwiQUVTIiwiX25Sb3VuZHMiLCJfa2V5UHJpb3JSZXNldCIsImtleVdvcmRzIiwiblJvdW5kcyIsImtzUm93cyIsImtleVNjaGVkdWxlIiwiX2tleVNjaGVkdWxlIiwia3NSb3ciLCJpbnZLZXlTY2hlZHVsZSIsIl9pbnZLZXlTY2hlZHVsZSIsImludktzUm93IiwiX2RvQ3J5cHRCbG9jayIsInMwIiwiczEiLCJzMiIsInMzIiwidDAiLCJ0MyIsIlBDMSIsIlBDMiIsIkJJVF9TSElGVFMiLCJTQk9YX1AiLCJTQk9YX01BU0siLCJERVMiLCJrZXlCaXRzIiwia2V5Qml0UG9zIiwic3ViS2V5cyIsIl9zdWJLZXlzIiwiblN1YktleSIsInN1YktleSIsImJpdFNoaWZ0IiwiaW52U3ViS2V5cyIsIl9pbnZTdWJLZXlzIiwiX2xCbG9jayIsIl9yQmxvY2siLCJleGNoYW5nZUxSIiwiZXhjaGFuZ2VSTCIsImxCbG9jayIsInJCbG9jayIsIm1hc2siLCJUcmlwbGVERVMiLCJrZXkxIiwia2V5MiIsImtleTMiLCJfZGVzMSIsIl9kZXMyIiwiX2RlczMiLCJSQzQiLCJrZXlTaWdCeXRlcyIsIlMiLCJfUyIsImtleUJ5dGVJbmRleCIsImtleUJ5dGUiLCJfaSIsIl9qIiwiZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkIiwia2V5c3RyZWFtV29yZCIsIlJDNERyb3AiLCJkcm9wIiwiQ18iLCJHIiwiUmFiYml0IiwiWCIsIl9YIiwiX0MiLCJfYiIsIm5leHRTdGF0ZSIsIklWIiwiSVZfMCIsIklWXzEiLCJpMCIsImkyIiwiaTEiLCJpMyIsImd4IiwiZ2EiLCJnYiIsIlJhYmJpdExlZ2FjeSJdLCJtYXBwaW5ncyI6IkFBQUEsMkhBQUUsV0FBVUEsSUFBVixFQUFnQkMsT0FBaEIsRUFBeUI7QUFDMUIsTUFBSSxJQUFKLEVBQWlDO0FBQ2hDO0FBQ0FD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QUQsSUFBUSxFQUFULEdBQWdCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVMsRUFBakMsS0FBMENBLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxFQUFULEdBQWdCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVMsRUFBbEUsQ0FBRCxHQUEyRSxDQUFsRjtBQUNBRSxPQUFDLENBQUMsQ0FBRCxDQUFELEdBQVFGLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBU0EsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRLENBQVQsR0FBZ0JBLENBQUMsQ0FBQyxDQUFELENBQUQsS0FBUyxFQUFqQyxJQUF3Q0EsQ0FBQyxDQUFDLENBQUQsQ0FBMUMsR0FBaUQsQ0FBeEQ7QUFDQUUsT0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFRRixDQUFDLENBQUMsQ0FBRCxDQUFELElBQVNBLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxFQUFULEdBQWdCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVMsRUFBakMsS0FBMENBLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxFQUFULEdBQWdCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVMsRUFBbEUsQ0FBRCxHQUEyRSxDQUFsRjtBQUNBRSxPQUFDLENBQUMsQ0FBRCxDQUFELEdBQVFGLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBU0EsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFRLENBQVQsR0FBZ0JBLENBQUMsQ0FBQyxDQUFELENBQUQsS0FBUyxFQUFqQyxJQUF3Q0EsQ0FBQyxDQUFDLENBQUQsQ0FBMUMsR0FBaUQsQ0FBeEQ7QUFDQUUsT0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFRRixDQUFDLENBQUMsQ0FBRCxDQUFELElBQVNBLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxFQUFULEdBQWdCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVMsRUFBakMsS0FBMENBLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxFQUFULEdBQWdCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVMsRUFBbEUsQ0FBRCxH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Q0FBRCxDQUFELElBQVEsRUFBVCxHQUFnQkEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxLQUFTLEVBQWxFLENBQUQsR0FBMkUsQ0FBbEY7QUFDQUUsT0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFRRixDQUFDLENBQUMsQ0FBRCxDQUFELElBQVNBLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxDQUFULEdBQWdCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVMsRUFBakMsSUFBd0NBLENBQUMsQ0FBQyxDQUFELENBQTFDLEdBQWlELENBQXhEO0FBQ0FFLE9BQUMsQ0FBQyxDQUFELENBQUQsR0FBUUYsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFTQSxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsRUFBVCxHQUFnQkEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxLQUFTLEVBQWpDLEtBQTBDQSxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsRUFBVCxHQUFnQkEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxLQUFTLEVBQWxFLENBQUQsR0FBMkUsQ0FBbEY7QUFDQUUsT0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFRRixDQUFDLENBQUMsQ0FBRCxDQUFELElBQVNBLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxDQUFULEdBQWdCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVMsRUFBakMsSUFBd0NBLENBQUMsQ0FBQyxDQUFELENBQTFDLEdBQWlELENBQXhEO0FBQ0FFLE9BQUMsQ0FBQyxDQUFELENBQUQsR0FBUUYsQ0FBQyxDQUFDLENBQUQsQ0FBRCxJQUFTQSxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsRUFBVCxHQUFnQkEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxLQUFTLEVBQWpDLEtBQTBDQSxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsRUFBVCxHQUFnQkEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxLQUFTLEVBQWxFLENBQUQsR0FBMkUsQ0FBbEY7QUFDQUUsT0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFRRixDQUFDLENBQUMsQ0FBRCxDQUFELElBQVNBLENBQUMsQ0FBQyxDQUFELENBQUQsSUFBUSxDQUFULEdBQWdCQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVMsRUFBakMsSUFBd0NBLENBQUMsQ0FBQyxDQUFELENBQTFDLEdBQWlELENBQXhEO0FBQ0g7O0FBRUQ7Ozs7Ozs7O0FBUUE3akIsS0FBQyxDQUFDOGtCLFlBQUYsR0FBaUJySyxZQUFZLENBQUMzVSxhQUFiLENBQTJCZ2YsWUFBM0IsQ0FBakI7QUFDSCxHQXpLQSxHQUFEOzs7QUE0S0EsU0FBT3JtQixRQUFQOztBQUVBLENBOWlNQyxDQUFELEMiLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0cm9vdC5DcnlwdG9KUyA9IGZhY3RvcnkoKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cblx0LypnbG9iYWxzIHdpbmRvdywgZ2xvYmFsLCByZXF1aXJlKi9cblxuXHQvKipcblx0ICogQ3J5cHRvSlMgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0dmFyIENyeXB0b0pTID0gQ3J5cHRvSlMgfHwgKGZ1bmN0aW9uIChNYXRoLCB1bmRlZmluZWQpIHtcblxuXHQgICAgdmFyIGNyeXB0bztcblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBmcm9tIHdpbmRvdyAoQnJvd3Nlcilcblx0ICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gd2luZG93LmNyeXB0bztcblx0ICAgIH1cblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBpbiB3ZWIgd29ya2VyIChCcm93c2VyKVxuXHQgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLmNyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IHNlbGYuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGZyb20gd29ya2VyXG5cdCAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMuY3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gZ2xvYmFsVGhpcy5jcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSAoZXhwZXJpbWVudGFsIElFIDExKSBjcnlwdG8gZnJvbSB3aW5kb3cgKEJyb3dzZXIpXG5cdCAgICBpZiAoIWNyeXB0byAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubXNDcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSB3aW5kb3cubXNDcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gZnJvbSBnbG9iYWwgKE5vZGVKUylcblx0ICAgIGlmICghY3J5cHRvICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5jcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGltcG9ydCB2aWEgcmVxdWlyZSAoTm9kZUpTKVxuXHQgICAgaWYgKCFjcnlwdG8gJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblx0ICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICB9XG5cblx0ICAgIC8qXG5cdCAgICAgKiBDcnlwdG9ncmFwaGljYWxseSBzZWN1cmUgcHNldWRvcmFuZG9tIG51bWJlciBnZW5lcmF0b3Jcblx0ICAgICAqXG5cdCAgICAgKiBBcyBNYXRoLnJhbmRvbSgpIGlzIGNyeXB0b2dyYXBoaWNhbGx5IG5vdCBzYWZlIHRvIHVzZVxuXHQgICAgICovXG5cdCAgICB2YXIgY3J5cHRvU2VjdXJlUmFuZG9tSW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChjcnlwdG8pIHtcblx0ICAgICAgICAgICAgLy8gVXNlIGdldFJhbmRvbVZhbHVlcyBtZXRob2QgKEJyb3dzZXIpXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMSkpWzBdO1xuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gVXNlIHJhbmRvbUJ5dGVzIG1ldGhvZCAoTm9kZUpTKVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKDQpLnJlYWRJbnQzMkxFKCk7XG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05hdGl2ZSBjcnlwdG8gbW9kdWxlIGNvdWxkIG5vdCBiZSB1c2VkIHRvIGdldCBzZWN1cmUgcmFuZG9tIG51bWJlci4nKTtcblx0ICAgIH07XG5cblx0ICAgIC8qXG5cdCAgICAgKiBMb2NhbCBwb2x5ZmlsbCBvZiBPYmplY3QuY3JlYXRlXG5cblx0ICAgICAqL1xuXHQgICAgdmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmdW5jdGlvbiBGKCkge31cblxuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgICAgICAgIHZhciBzdWJ0eXBlO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gb2JqO1xuXG5cdCAgICAgICAgICAgIHN1YnR5cGUgPSBuZXcgRigpO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gbnVsbDtcblxuXHQgICAgICAgICAgICByZXR1cm4gc3VidHlwZTtcblx0ICAgICAgICB9O1xuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDcnlwdG9KUyBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogTGlicmFyeSBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2xpYiA9IEMubGliID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQmFzZSBvYmplY3QgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZSA9IChmdW5jdGlvbiAoKSB7XG5cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZXMgUHJvcGVydGllcyB0byBjb3B5IGludG8gdGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnLFxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIH1cblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTcGF3blxuXHQgICAgICAgICAgICAgICAgdmFyIHN1YnR5cGUgPSBjcmVhdGUodGhpcyk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEF1Z21lbnRcblx0ICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLm1peEluKG92ZXJyaWRlcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBkZWZhdWx0IGluaXRpYWxpemVyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXN1YnR5cGUuaGFzT3duUHJvcGVydHkoJ2luaXQnKSB8fCB0aGlzLmluaXQgPT09IHN1YnR5cGUuaW5pdCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemVyJ3MgcHJvdG90eXBlIGlzIHRoZSBzdWJ0eXBlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0LnByb3RvdHlwZSA9IHN1YnR5cGU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlZmVyZW5jZSBzdXBlcnR5cGVcblx0ICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyID0gdGhpcztcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnR5cGU7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEV4dGVuZHMgdGhpcyBvYmplY3QgYW5kIHJ1bnMgdGhlIGluaXQgbWV0aG9kLlxuXHQgICAgICAgICAgICAgKiBBcmd1bWVudHMgdG8gY3JlYXRlKCkgd2lsbCBiZSBwYXNzZWQgdG8gaW5pdCgpLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgaW5zdGFuY2UgPSBNeVR5cGUuY3JlYXRlKCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZXh0ZW5kKCk7XG5cdCAgICAgICAgICAgICAgICBpbnN0YW5jZS5pbml0LmFwcGx5KGluc3RhbmNlLCBhcmd1bWVudHMpO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBvYmplY3QuXG5cdCAgICAgICAgICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGFkZCBzb21lIGxvZ2ljIHdoZW4geW91ciBvYmplY3RzIGFyZSBjcmVhdGVkLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgICAgICAvLyAuLi5cblx0ICAgICAgICAgICAgICogICAgICAgICB9XG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ29waWVzIHByb3BlcnRpZXMgaW50byB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gbWl4IGluLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgTXlUeXBlLm1peEluKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJ1xuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBtaXhJbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBJRSB3b24ndCBjb3B5IHRvU3RyaW5nIHVzaW5nIHRoZSBsb29wIGFib3ZlXG5cdCAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJpbmcgPSBwcm9wZXJ0aWVzLnRvU3RyaW5nO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSBpbnN0YW5jZS5jbG9uZSgpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNpZ0J5dGVzIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICovXG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSwgNik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xuXHQgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogNDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIHdvcmQgYXJyYXkgdG8gYSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXIgKE9wdGlvbmFsKSBUaGUgZW5jb2Rpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBDcnlwdG9KUy5lbmMuSGV4XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5ICsgJyc7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoZW5jb2RlciB8fCBIZXgpLnN0cmluZ2lmeSh0aGlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uY2F0ZW5hdGVzIGEgd29yZCBhcnJheSB0byB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5IHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkxLmNvbmNhdCh3b3JkQXJyYXkyKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb25jYXQ6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB0aGlzV29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhhdFdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhpc1NpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIHRoYXRTaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0c1xuXHQgICAgICAgICAgICB0aGlzLmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29uY2F0XG5cdCAgICAgICAgICAgIGlmICh0aGlzU2lnQnl0ZXMgJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSBieXRlIGF0IGEgdGltZVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0Qnl0ZSA9ICh0aGF0V29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdIHw9IHRoYXRCeXRlIDw8ICgyNCAtICgodGhpc1NpZ0J5dGVzICsgaSkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gQ29weSBvbmUgd29yZCBhdCBhIHRpbWVcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhhdFNpZ0J5dGVzOyBqICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzV29yZHNbKHRoaXNTaWdCeXRlcyArIGopID4+PiAyXSA9IHRoYXRXb3Jkc1tqID4+PiAyXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzICs9IHRoYXRTaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlbW92ZXMgaW5zaWduaWZpY2FudCBiaXRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkuY2xhbXAoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbGFtcDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcFxuXHQgICAgICAgICAgICB3b3Jkc1tzaWdCeXRlcyA+Pj4gMl0gJj0gMHhmZmZmZmZmZiA8PCAoMzIgLSAoc2lnQnl0ZXMgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB3b3Jkcy5sZW5ndGggPSBNYXRoLmNlaWwoc2lnQnl0ZXMgLyA0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IHdvcmRBcnJheS5jbG9uZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHdvcmQgYXJyYXkgZmlsbGVkIHdpdGggcmFuZG9tIGJ5dGVzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG5CeXRlcyBUaGUgbnVtYmVyIG9mIHJhbmRvbSBieXRlcyB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHJhbmRvbSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oMTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJhbmRvbTogZnVuY3Rpb24gKG5CeXRlcykge1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5CeXRlczsgaSArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKGNyeXB0b1NlY3VyZVJhbmRvbUludCgpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIG5CeXRlcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRW5jb2RlciBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogSGV4IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgSGV4ID0gQ19lbmMuSGV4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhleFN0cmluZyA9IENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBoZXhDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgPj4+IDQpLnRvU3RyaW5nKDE2KSk7XG5cdCAgICAgICAgICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlICYgMHgwZikudG9TdHJpbmcoMTYpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBoZXhDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBoZXggc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZXhTdHIgVGhlIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShoZXhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaGV4U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoZXhTdHJMZW5ndGggPSBoZXhTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGV4U3RyTGVuZ3RoOyBpICs9IDIpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDNdIHw9IHBhcnNlSW50KGhleFN0ci5zdWJzdHIoaSwgMiksIDE2KSA8PCAoMjQgLSAoaSAlIDgpICogNCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBoZXhTdHJMZW5ndGggLyAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIExhdGluMSBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIExhdGluMSA9IENfZW5jLkxhdGluMSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBsYXRpbjFTdHJpbmcgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgbGF0aW4xQ2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICBsYXRpbjFDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYml0ZSkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGxhdGluMUNoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIExhdGluMSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxhdGluMVN0ciBUaGUgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnBhcnNlKGxhdGluMVN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChsYXRpbjFTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGxhdGluMVN0ckxlbmd0aCA9IGxhdGluMVN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRpbjFTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gKGxhdGluMVN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZikgPDwgKDI0IC0gKGkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbGF0aW4xU3RyTGVuZ3RoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFVURi04IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0ZjggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHV0ZjhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmOC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKExhdGluMS5zdHJpbmdpZnkod29yZEFycmF5KSkpO1xuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbGZvcm1lZCBVVEYtOCBkYXRhJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtOCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHV0ZjhTdHIgVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh1dGY4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjhTdHIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIExhdGluMS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodXRmOFN0cikpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJ1ZmZlcmVkIGJsb2NrIGFsZ29yaXRobSB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBUaGUgcHJvcGVydHkgYmxvY2tTaXplIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gYSBjb25jcmV0ZSBzdWJ0eXBlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfbWluQnVmZmVyU2l6ZSBUaGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IHNob3VsZCBiZSBrZXB0IHVucHJvY2Vzc2VkIGluIHRoZSBidWZmZXIuIERlZmF1bHQ6IDBcblx0ICAgICAqL1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGRhdGEgYnVmZmVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBXb3JkQXJyYXkuaW5pdCgpO1xuXHQgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzID0gMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBuZXcgZGF0YSB0byB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGJ1ZmZlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBhcHBlbmQuIFN0cmluZ3MgYXJlIGNvbnZlcnRlZCB0byBhIFdvcmRBcnJheSB1c2luZyBVVEYtOC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9hcHBlbmQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBkYXRhID0gVXRmOC5wYXJzZShkYXRhKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9kYXRhLmNvbmNhdChkYXRhKTtcblx0ICAgICAgICAgICAgdGhpcy5fbkRhdGFCeXRlcyArPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBQcm9jZXNzZXMgYXZhaWxhYmxlIGRhdGEgYmxvY2tzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBfZG9Qcm9jZXNzQmxvY2sob2Zmc2V0KSwgd2hpY2ggbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBhIGNvbmNyZXRlIHN1YnR5cGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvRmx1c2ggV2hldGhlciBhbGwgYmxvY2tzIGFuZCBwYXJ0aWFsIGJsb2NrcyBzaG91bGQgYmUgcHJvY2Vzc2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcHJvY2Vzc2VkIGRhdGEuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcygpO1xuXHQgICAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoISEnZmx1c2gnKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcHJvY2VzczogZnVuY3Rpb24gKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFdvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVNpZ0J5dGVzID0gZGF0YS5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IGJsb2NrcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbkJsb2Nrc1JlYWR5ID0gZGF0YVNpZ0J5dGVzIC8gYmxvY2tTaXplQnl0ZXM7XG5cdCAgICAgICAgICAgIGlmIChkb0ZsdXNoKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBSb3VuZCB1cCB0byBpbmNsdWRlIHBhcnRpYWwgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICBuQmxvY2tzUmVhZHkgPSBNYXRoLmNlaWwobkJsb2Nrc1JlYWR5KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIFJvdW5kIGRvd24gdG8gaW5jbHVkZSBvbmx5IGZ1bGwgYmxvY2tzLFxuXHQgICAgICAgICAgICAgICAgLy8gbGVzcyB0aGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IG11c3QgcmVtYWluIGluIHRoZSBidWZmZXJcblx0ICAgICAgICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGgubWF4KChuQmxvY2tzUmVhZHkgfCAwKSAtIHRoaXMuX21pbkJ1ZmZlclNpemUsIDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgd29yZHMgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5Xb3Jkc1JlYWR5ID0gbkJsb2Nrc1JlYWR5ICogYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IGJ5dGVzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuQnl0ZXNSZWFkeSA9IE1hdGgubWluKG5Xb3Jkc1JlYWR5ICogNCwgZGF0YVNpZ0J5dGVzKTtcblxuXHQgICAgICAgICAgICAvLyBQcm9jZXNzIGJsb2Nrc1xuXHQgICAgICAgICAgICBpZiAobldvcmRzUmVhZHkpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IG5Xb3Jkc1JlYWR5OyBvZmZzZXQgKz0gYmxvY2tTaXplKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1hbGdvcml0aG0gbG9naWNcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb1Byb2Nlc3NCbG9jayhkYXRhV29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBwcm9jZXNzZWQgd29yZHNcblx0ICAgICAgICAgICAgICAgIHByb2Nlc3NlZFdvcmRzID0gZGF0YVdvcmRzLnNwbGljZSgwLCBuV29yZHNSZWFkeSk7XG5cdCAgICAgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5CeXRlc1JlYWR5O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHByb2Nlc3NlZFdvcmRzLCBuQnl0ZXNSZWFkeSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9kYXRhID0gdGhpcy5fZGF0YS5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX21pbkJ1ZmZlclNpemU6IDBcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGhhc2hlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgaGFzaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxNiAoNTEyIGJpdHMpXG5cdCAgICAgKi9cblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXIgPSBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoKSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgaGFzaCBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2hlciA9IENyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgaGFzaGVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBSZXNldCBkYXRhIGJ1ZmZlclxuXHQgICAgICAgICAgICBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWNcblx0ICAgICAgICAgICAgdGhpcy5fZG9SZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVcGRhdGVzIHRoaXMgaGFzaGVyIHdpdGggYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0hhc2hlcn0gVGhpcyBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGhhc2hcblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBoYXNoIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgbWVzc2FnZSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5fZG9GaW5hbGl6ZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDUxMi8zMixcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byBhIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaGFzaGVyLmluaXQoY2ZnKS5maW5hbGl6ZShtZXNzYWdlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UgaW4gdGhpcyBITUFDIGhlbHBlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBIbWFjU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhtYWNIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBrZXkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ19hbGdvLkhNQUMuaW5pdChoYXNoZXIsIGtleSkuZmluYWxpemUobWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWxnb3JpdGhtIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbyA9IHt9O1xuXG5cdCAgICByZXR1cm4gQztcblx0fShNYXRoKSk7XG5cblxuXHQoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgWDMyV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXG5cdCAgICAvKipcblx0ICAgICAqIHg2NCBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX3g2NCA9IEMueDY0ID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQSA2NC1iaXQgd29yZC5cblx0ICAgICAqL1xuXHQgICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCA2NC1iaXQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIDMyIGJpdHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IDMyIGJpdHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB4NjRXb3JkID0gQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChoaWdoLCBsb3cpIHtcblx0ICAgICAgICAgICAgdGhpcy5oaWdoID0gaGlnaDtcblx0ICAgICAgICAgICAgdGhpcy5sb3cgPSBsb3c7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBOT1RzIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBuZWdhdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG5lZ2F0ZWQgPSB4NjRXb3JkLm5vdCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIG5vdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IH50aGlzLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB+dGhpcy5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJpdHdpc2UgQU5EcyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIEFORCB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBBTkRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBhbmRlZCA9IHg2NFdvcmQuYW5kKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBhbmQ6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoICYgd29yZC5oaWdoO1xuXHQgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgJiB3b3JkLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBPUnMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBPUiB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBPUmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG9yZWQgPSB4NjRXb3JkLm9yKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBvcjogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggfCB3b3JkLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyB8IHdvcmQubG93O1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIFhPUnMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBYT1Igd2l0aCB0aGlzIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgWE9SaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgeG9yZWQgPSB4NjRXb3JkLnhvcihhbm90aGVyWDY0V29yZCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8geG9yOiBmdW5jdGlvbiAod29yZCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCBeIHdvcmQuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IF4gd29yZC5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFNoaWZ0cyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSBsZWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHNoaWZ0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc2hpZnRlZCA9IHg2NFdvcmQuc2hpZnRMKDI1KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBzaGlmdEw6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIGlmIChuIDwgMzIpIHtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gKHRoaXMuaGlnaCA8PCBuKSB8ICh0aGlzLmxvdyA+Pj4gKDMyIC0gbikpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IDw8IG47XG5cdCAgICAgICAgICAgIC8vIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMubG93IDw8IChuIC0gMzIpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IDA7XG5cdCAgICAgICAgICAgIC8vIH1cblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIHJpZ2h0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHNoaWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHNoaWZ0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc2hpZnRlZCA9IHg2NFdvcmQuc2hpZnRSKDcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHNoaWZ0UjogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gaWYgKG4gPCAzMikge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyA+Pj4gbikgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG4pKTtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoID4+PiBuO1xuXHQgICAgICAgICAgICAvLyB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMuaGlnaCA+Pj4gKG4gLSAzMik7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IDA7XG5cdCAgICAgICAgICAgIC8vIH1cblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUm90YXRlcyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSBsZWZ0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHJvdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHJvdGF0ZWQgPSB4NjRXb3JkLnJvdEwoMjUpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHJvdEw6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIHJldHVybiB0aGlzLnNoaWZ0TChuKS5vcih0aGlzLnNoaWZ0Uig2NCAtIG4pKTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUm90YXRlcyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSByaWdodC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byByb3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgcm90YXRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciByb3RhdGVkID0geDY0V29yZC5yb3RSKDcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHJvdFI6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIHJldHVybiB0aGlzLnNoaWZ0UihuKS5vcih0aGlzLnNoaWZ0TCg2NCAtIG4pKTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIGFkZCB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBhZGRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBhZGRlZCA9IHg2NFdvcmQuYWRkKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBhZGQ6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSAodGhpcy5sb3cgKyB3b3JkLmxvdykgfCAwO1xuXHQgICAgICAgICAgICAvLyB2YXIgY2FycnkgPSAobG93ID4+PiAwKSA8ICh0aGlzLmxvdyA+Pj4gMCkgPyAxIDogMDtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoICsgd29yZC5oaWdoICsgY2FycnkpIHwgMDtcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBbiBhcnJheSBvZiA2NC1iaXQgd29yZHMuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtBcnJheX0gd29yZHMgVGhlIGFycmF5IG9mIENyeXB0b0pTLng2NC5Xb3JkIG9iamVjdHMuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lnQnl0ZXMgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgKi9cblx0ICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXkgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyAoT3B0aW9uYWwpIEFuIGFycmF5IG9mIENyeXB0b0pTLng2NC5Xb3JkIG9iamVjdHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyksXG5cdCAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgxODE5MWExYiwgMHgxYzFkMWUxZilcblx0ICAgICAgICAgKiAgICAgXSk7XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDAwMDEwMjAzLCAweDA0MDUwNjA3KSxcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDE4MTkxYTFiLCAweDFjMWQxZTFmKVxuXHQgICAgICAgICAqICAgICBdLCAxMCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xuXHQgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogODtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIDY0LWJpdCB3b3JkIGFycmF5IHRvIGEgMzItYml0IHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDcnlwdG9KUy5saWIuV29yZEFycmF5fSBUaGlzIHdvcmQgYXJyYXkncyBkYXRhIGFzIGEgMzItYml0IHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB4MzJXb3JkQXJyYXkgPSB4NjRXb3JkQXJyYXkudG9YMzIoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1gzMjogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHg2NFdvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHg2NFdvcmRzTGVuZ3RoID0geDY0V29yZHMubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHgzMldvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeDY0V29yZHNMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHg2NFdvcmQgPSB4NjRXb3Jkc1tpXTtcblx0ICAgICAgICAgICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5oaWdoKTtcblx0ICAgICAgICAgICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5sb3cpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIFgzMldvcmRBcnJheS5jcmVhdGUoeDMyV29yZHMsIHRoaXMuc2lnQnl0ZXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkQXJyYXl9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNsb25lID0geDY0V29yZEFycmF5LmNsb25lKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIENsb25lIFwid29yZHNcIiBhcnJheVxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBjbG9uZS53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgLy8gQ2xvbmUgZWFjaCBYNjRXb3JkIG9iamVjdFxuXHQgICAgICAgICAgICB2YXIgd29yZHNMZW5ndGggPSB3b3Jkcy5sZW5ndGg7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHNMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaV0gPSB3b3Jkc1tpXS5jbG9uZSgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIENoZWNrIGlmIHR5cGVkIGFycmF5cyBhcmUgc3VwcG9ydGVkXG5cdCAgICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICB9XG5cblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblxuXHQgICAgLy8gUmVmZXJlbmNlIG9yaWdpbmFsIGluaXRcblx0ICAgIHZhciBzdXBlckluaXQgPSBXb3JkQXJyYXkuaW5pdDtcblxuXHQgICAgLy8gQXVnbWVudCBXb3JkQXJyYXkuaW5pdCB0byBoYW5kbGUgdHlwZWQgYXJyYXlzXG5cdCAgICB2YXIgc3ViSW5pdCA9IFdvcmRBcnJheS5pbml0ID0gZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcblx0ICAgICAgICAvLyBDb252ZXJ0IGJ1ZmZlcnMgdG8gdWludDhcblx0ICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgPSBuZXcgVWludDhBcnJheSh0eXBlZEFycmF5KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDb252ZXJ0IG90aGVyIGFycmF5IHZpZXdzIHRvIHVpbnQ4XG5cdCAgICAgICAgaWYgKFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5IHx8XG5cdCAgICAgICAgICAgICh0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5KSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDMyQXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheVxuXHQgICAgICAgICkge1xuXHQgICAgICAgICAgICB0eXBlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodHlwZWRBcnJheS5idWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5ieXRlTGVuZ3RoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBIYW5kbGUgVWludDhBcnJheVxuXHQgICAgICAgIGlmICh0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgdHlwZWRBcnJheUJ5dGVMZW5ndGggPSB0eXBlZEFycmF5LmJ5dGVMZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gRXh0cmFjdCBieXRlc1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZEFycmF5Qnl0ZUxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAyXSB8PSB0eXBlZEFycmF5W2ldIDw8ICgyNCAtIChpICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhpcyB3b3JkIGFycmF5XG5cdCAgICAgICAgICAgIHN1cGVySW5pdC5jYWxsKHRoaXMsIHdvcmRzLCB0eXBlZEFycmF5Qnl0ZUxlbmd0aCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgLy8gRWxzZSBjYWxsIG5vcm1hbCBpbml0XG5cdCAgICAgICAgICAgIHN1cGVySW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIHN1YkluaXQucHJvdG90eXBlID0gV29yZEFycmF5O1xuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFVURi0xNiBCRSBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFV0ZjE2QkUgPSBDX2VuYy5VdGYxNiA9IENfZW5jLlV0ZjE2QkUgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTE2IEJFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtMTYgQkUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgdXRmMTZTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmMTYuc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB1dGYxNkNoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvZGVQb2ludCA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDE2IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmZmZjtcblx0ICAgICAgICAgICAgICAgIHV0ZjE2Q2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHV0ZjE2Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTE2IEJFIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmMTZTdHIgVGhlIFVURi0xNiBCRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjE2LnBhcnNlKHV0ZjE2U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjE2U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciB1dGYxNlN0ckxlbmd0aCA9IHV0ZjE2U3RyLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHV0ZjE2U3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDFdIHw9IHV0ZjE2U3RyLmNoYXJDb2RlQXQoaSkgPDwgKDE2IC0gKGkgJSAyKSAqIDE2KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBXb3JkQXJyYXkuY3JlYXRlKHdvcmRzLCB1dGYxNlN0ckxlbmd0aCAqIDIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogVVRGLTE2IExFIGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICBDX2VuYy5VdGYxNkxFID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIFVURi0xNiBMRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHV0ZjE2U3RyID0gQ3J5cHRvSlMuZW5jLlV0ZjE2TEUuc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB1dGYxNkNoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvZGVQb2ludCA9IHN3YXBFbmRpYW4oKHdvcmRzW2kgPj4+IDJdID4+PiAoMTYgLSAoaSAlIDQpICogOCkpICYgMHhmZmZmKTtcblx0ICAgICAgICAgICAgICAgIHV0ZjE2Q2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHV0ZjE2Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTE2IExFIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmMTZTdHIgVGhlIFVURi0xNiBMRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjE2TEUucGFyc2UodXRmMTZTdHIpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmMTZTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2U3RyTGVuZ3RoID0gdXRmMTZTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXRmMTZTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMV0gfD0gc3dhcEVuZGlhbih1dGYxNlN0ci5jaGFyQ29kZUF0KGkpIDw8ICgxNiAtIChpICUgMikgKiAxNikpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIHV0ZjE2U3RyTGVuZ3RoICogMik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgZnVuY3Rpb24gc3dhcEVuZGlhbih3b3JkKSB7XG5cdCAgICAgICAgcmV0dXJuICgod29yZCA8PCA4KSAmIDB4ZmYwMGZmMDApIHwgKCh3b3JkID4+PiA4KSAmIDB4MDBmZjAwZmYpO1xuXHQgICAgfVxuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEJhc2U2NCBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJhc2U2NCA9IENfZW5jLkJhc2U2NCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEJhc2U2NCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBiYXNlNjRTdHJpbmcgPSBDcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIHZhciBtYXAgPSB0aGlzLl9tYXA7XG5cblx0ICAgICAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHNcblx0ICAgICAgICAgICAgd29yZEFycmF5LmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgYmFzZTY0Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAzKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnl0ZTEgPSAod29yZHNbaSA+Pj4gMl0gICAgICAgPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgICAgICAgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJ5dGUyID0gKHdvcmRzWyhpICsgMSkgPj4+IDJdID4+PiAoMjQgLSAoKGkgKyAxKSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIHZhciBieXRlMyA9ICh3b3Jkc1soaSArIDIpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMikgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0cmlwbGV0ID0gKGJ5dGUxIDw8IDE2KSB8IChieXRlMiA8PCA4KSB8IGJ5dGUzO1xuXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgKGogPCA0KSAmJiAoaSArIGogKiAwLjc1IDwgc2lnQnl0ZXMpOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBiYXNlNjRDaGFycy5wdXNoKG1hcC5jaGFyQXQoKHRyaXBsZXQgPj4+ICg2ICogKDMgLSBqKSkpICYgMHgzZikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmdDaGFyID0gbWFwLmNoYXJBdCg2NCk7XG5cdCAgICAgICAgICAgIGlmIChwYWRkaW5nQ2hhcikge1xuXHQgICAgICAgICAgICAgICAgd2hpbGUgKGJhc2U2NENoYXJzLmxlbmd0aCAlIDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBiYXNlNjRDaGFycy5wdXNoKHBhZGRpbmdDaGFyKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBiYXNlNjRDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBCYXNlNjQgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlNjRTdHIgVGhlIEJhc2U2NCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkJhc2U2NC5wYXJzZShiYXNlNjRTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoYmFzZTY0U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgYmFzZTY0U3RyTGVuZ3RoID0gYmFzZTY0U3RyLmxlbmd0aDtcblx0ICAgICAgICAgICAgdmFyIG1hcCA9IHRoaXMuX21hcDtcblx0ICAgICAgICAgICAgdmFyIHJldmVyc2VNYXAgPSB0aGlzLl9yZXZlcnNlTWFwO1xuXG5cdCAgICAgICAgICAgIGlmICghcmV2ZXJzZU1hcCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldmVyc2VNYXAgPSB0aGlzLl9yZXZlcnNlTWFwID0gW107XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXAubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZU1hcFttYXAuY2hhckNvZGVBdChqKV0gPSBqO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIElnbm9yZSBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpO1xuXHQgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBwYWRkaW5nSW5kZXggPSBiYXNlNjRTdHIuaW5kZXhPZihwYWRkaW5nQ2hhcik7XG5cdCAgICAgICAgICAgICAgICBpZiAocGFkZGluZ0luZGV4ICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGJhc2U2NFN0ckxlbmd0aCA9IHBhZGRpbmdJbmRleDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgcmV0dXJuIHBhcnNlTG9vcChiYXNlNjRTdHIsIGJhc2U2NFN0ckxlbmd0aCwgcmV2ZXJzZU1hcCk7XG5cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX21hcDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89J1xuXHQgICAgfTtcblxuXHQgICAgZnVuY3Rpb24gcGFyc2VMb29wKGJhc2U2NFN0ciwgYmFzZTY0U3RyTGVuZ3RoLCByZXZlcnNlTWFwKSB7XG5cdCAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICB2YXIgbkJ5dGVzID0gMDtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYXNlNjRTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgaWYgKGkgJSA0KSB7XG5cdCAgICAgICAgICAgICAgdmFyIGJpdHMxID0gcmV2ZXJzZU1hcFtiYXNlNjRTdHIuY2hhckNvZGVBdChpIC0gMSldIDw8ICgoaSAlIDQpICogMik7XG5cdCAgICAgICAgICAgICAgdmFyIGJpdHMyID0gcmV2ZXJzZU1hcFtiYXNlNjRTdHIuY2hhckNvZGVBdChpKV0gPj4+ICg2IC0gKGkgJSA0KSAqIDIpO1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzQ29tYmluZWQgPSBiaXRzMSB8IGJpdHMyO1xuXHQgICAgICAgICAgICAgIHdvcmRzW25CeXRlcyA+Pj4gMl0gfD0gYml0c0NvbWJpbmVkIDw8ICgyNCAtIChuQnl0ZXMgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICAgIG5CeXRlcysrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBXb3JkQXJyYXkuY3JlYXRlKHdvcmRzLCBuQnl0ZXMpO1xuXHQgICAgfVxuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEJhc2U2NHVybCBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJhc2U2NHVybCA9IENfZW5jLkJhc2U2NHVybCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBCYXNlNjR1cmwgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdXJsU2FmZSBXaGV0aGVyIHRvIHVzZSB1cmwgc2FmZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgQmFzZTY0dXJsIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGJhc2U2NFN0cmluZyA9IENyeXB0b0pTLmVuYy5CYXNlNjR1cmwuc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5LCB1cmxTYWZlPXRydWUpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgbWFwID0gdXJsU2FmZSA/IHRoaXMuX3NhZmVfbWFwIDogdGhpcy5fbWFwO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIHdvcmRBcnJheS5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NENoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJ5dGUxID0gKHdvcmRzW2kgPj4+IDJdICAgICAgID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICAgICAgICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIHZhciBieXRlMiA9ICh3b3Jkc1soaSArIDEpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMSkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnl0ZTMgPSAod29yZHNbKGkgKyAyKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDIpICUgNCkgKiA4KSkgJiAweGZmO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgdHJpcGxldCA9IChieXRlMSA8PCAxNikgfCAoYnl0ZTIgPDwgOCkgfCBieXRlMztcblxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IChqIDwgNCkgJiYgKGkgKyBqICogMC43NSA8IHNpZ0J5dGVzKTsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiAoNiAqICgzIC0gaikpKSAmIDB4M2YpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpO1xuXHQgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHtcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChiYXNlNjRDaGFycy5sZW5ndGggJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChwYWRkaW5nQ2hhcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gYmFzZTY0Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgQmFzZTY0dXJsIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0U3RyIFRoZSBCYXNlNjR1cmwgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtib29sZWFufSB1cmxTYWZlIFdoZXRoZXIgdG8gdXNlIHVybCBzYWZlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkJhc2U2NHVybC5wYXJzZShiYXNlNjRTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoYmFzZTY0U3RyLCB1cmxTYWZlPXRydWUpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBiYXNlNjRTdHJMZW5ndGggPSBiYXNlNjRTdHIubGVuZ3RoO1xuXHQgICAgICAgICAgICB2YXIgbWFwID0gdXJsU2FmZSA/IHRoaXMuX3NhZmVfbWFwIDogdGhpcy5fbWFwO1xuXHQgICAgICAgICAgICB2YXIgcmV2ZXJzZU1hcCA9IHRoaXMuX3JldmVyc2VNYXA7XG5cblx0ICAgICAgICAgICAgaWYgKCFyZXZlcnNlTWFwKSB7XG5cdCAgICAgICAgICAgICAgICByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXAubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXZlcnNlTWFwW21hcC5jaGFyQ29kZUF0KGopXSA9IGo7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJZ25vcmUgcGFkZGluZ1xuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ0NoYXIgPSBtYXAuY2hhckF0KDY0KTtcblx0ICAgICAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ0luZGV4ID0gYmFzZTY0U3RyLmluZGV4T2YocGFkZGluZ0NoYXIpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHBhZGRpbmdJbmRleCAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBiYXNlNjRTdHJMZW5ndGggPSBwYWRkaW5nSW5kZXg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHJldHVybiBwYXJzZUxvb3AoYmFzZTY0U3RyLCBiYXNlNjRTdHJMZW5ndGgsIHJldmVyc2VNYXApO1xuXG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9tYXA6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPScsXG5cdCAgICAgICAgX3NhZmVfbWFwOiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktXycsXG5cdCAgICB9O1xuXG5cdCAgICBmdW5jdGlvbiBwYXJzZUxvb3AoYmFzZTY0U3RyLCBiYXNlNjRTdHJMZW5ndGgsIHJldmVyc2VNYXApIHtcblx0ICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICB2YXIgbkJ5dGVzID0gMDtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhc2U2NFN0ckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGlmIChpICUgNCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJpdHMxID0gcmV2ZXJzZU1hcFtiYXNlNjRTdHIuY2hhckNvZGVBdChpIC0gMSldIDw8ICgoaSAlIDQpICogMik7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0czIgPSByZXZlcnNlTWFwW2Jhc2U2NFN0ci5jaGFyQ29kZUF0KGkpXSA+Pj4gKDYgLSAoaSAlIDQpICogMik7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0c0NvbWJpbmVkID0gYml0czEgfCBiaXRzMjtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW25CeXRlcyA+Pj4gMl0gfD0gYml0c0NvbWJpbmVkIDw8ICgyNCAtIChuQnl0ZXMgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICAgICAgbkJ5dGVzKys7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIG5CeXRlcyk7XG5cdCAgICB9XG5cdH0oKSk7XG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gQ29uc3RhbnRzIHRhYmxlXG5cdCAgICB2YXIgVCA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIGNvbnN0YW50c1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcblx0ICAgICAgICAgICAgVFtpXSA9IChNYXRoLmFicyhNYXRoLnNpbihpICsgMSkpICogMHgxMDAwMDAwMDApIHwgMDtcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1ENSBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIE1ENSA9IENfYWxnby5NRDUgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksXG5cdCAgICAgICAgICAgICAgICAweDk4YmFkY2ZlLCAweDEwMzI1NDc2XG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7XG5cdCAgICAgICAgICAgICAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldO1xuXG5cdCAgICAgICAgICAgICAgICBNW29mZnNldF9pXSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDgpICB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzAgID0gTVtvZmZzZXQgKyAwXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEgID0gTVtvZmZzZXQgKyAxXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzIgID0gTVtvZmZzZXQgKyAyXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzMgID0gTVtvZmZzZXQgKyAzXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzQgID0gTVtvZmZzZXQgKyA0XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzUgID0gTVtvZmZzZXQgKyA1XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzYgID0gTVtvZmZzZXQgKyA2XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzcgID0gTVtvZmZzZXQgKyA3XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzggID0gTVtvZmZzZXQgKyA4XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzkgID0gTVtvZmZzZXQgKyA5XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEwID0gTVtvZmZzZXQgKyAxMF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMSA9IE1bb2Zmc2V0ICsgMTFdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTIgPSBNW29mZnNldCArIDEyXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEzID0gTVtvZmZzZXQgKyAxM107XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xNCA9IE1bb2Zmc2V0ICsgMTRdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTUgPSBNW29mZnNldCArIDE1XTtcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhbGJlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0YXRpb25cblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzAsICA3LCAgVFswXSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF8xLCAgMTIsIFRbMV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgIDE3LCBUWzJdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzMsICAyMiwgVFszXSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF80LCAgNywgIFRbNF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfNSwgIDEyLCBUWzVdKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzYsICAxNywgVFs2XSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF83LCAgMjIsIFRbN10pO1xuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfOCwgIDcsICBUWzhdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzksICAxMiwgVFs5XSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8xMCwgMTcsIFRbMTBdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzExLCAyMiwgVFsxMV0pO1xuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTIsIDcsICBUWzEyXSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF8xMywgMTIsIFRbMTNdKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE0LCAxNywgVFsxNF0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTUsIDIyLCBUWzE1XSk7XG5cblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA1LCAgVFsxNl0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfNiwgIDksICBUWzE3XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTQsIFRbMThdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzAsICAyMCwgVFsxOV0pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfNSwgIDUsICBUWzIwXSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8xMCwgOSwgIFRbMjFdKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE1LCAxNCwgVFsyMl0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfNCwgIDIwLCBUWzIzXSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF85LCAgNSwgIFRbMjRdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE0LCA5LCAgVFsyNV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE0LCBUWzI2XSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF84LCAgMjAsIFRbMjddKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEzLCA1LCAgVFsyOF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMiwgIDksICBUWzI5XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF83LCAgMTQsIFRbMzBdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEyLCAyMCwgVFszMV0pO1xuXG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF81LCAgNCwgIFRbMzJdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzgsICAxMSwgVFszM10pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTEsIDE2LCBUWzM0XSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF8xNCwgMjMsIFRbMzVdKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA0LCAgVFszNl0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfNCwgIDExLCBUWzM3XSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF83LCAgMTYsIFRbMzhdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEwLCAyMywgVFszOV0pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTMsIDQsICBUWzQwXSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF8wLCAgMTEsIFRbNDFdKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzMsICAxNiwgVFs0Ml0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfNiwgIDIzLCBUWzQzXSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF85LCAgNCwgIFRbNDRdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEyLCAxMSwgVFs0NV0pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTUsIDE2LCBUWzQ2XSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF8yLCAgMjMsIFRbNDddKTtcblxuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgIDYsICBUWzQ4XSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF83LCAgMTAsIFRbNDldKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE0LCAxNSwgVFs1MF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfNSwgIDIxLCBUWzUxXSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNiwgIFRbNTJdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzMsICAxMCwgVFs1M10pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE1LCBUWzU0XSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF8xLCAgMjEsIFRbNTVdKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzgsICA2LCAgVFs1Nl0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTUsIDEwLCBUWzU3XSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF82LCAgMTUsIFRbNThdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEzLCAyMSwgVFs1OV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfNCwgIDYsICBUWzYwXSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8xMSwgMTAsIFRbNjFdKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzIsICAxNSwgVFs2Ml0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfOSwgIDIxLCBUWzYzXSk7XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwO1xuXHQgICAgICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWxIID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbEwgPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9IChcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxIIDw8IDgpICB8IChuQml0c1RvdGFsSCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxIIDw8IDI0KSB8IChuQml0c1RvdGFsSCA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEwgPDwgOCkgIHwgKG5CaXRzVG90YWxMID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEwgPDwgMjQpIHwgKG5CaXRzVG90YWxMID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2g7XG5cdCAgICAgICAgICAgIHZhciBIID0gaGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgIHZhciBIX2kgPSBIW2ldO1xuXG5cdCAgICAgICAgICAgICAgICBIW2ldID0gKCgoSF9pIDw8IDgpICB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBGRihhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKChiICYgYykgfCAofmIgJiBkKSkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBHRyhhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKChiICYgZCkgfCAoYyAmIH5kKSkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBISChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKGIgXiBjIF4gZCkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBJSShhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKGMgXiAoYiB8IH5kKSkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuTUQ1KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5NRDUgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihNRDUpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY01ENShtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNNRDUgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoTUQ1KTtcblx0fShNYXRoKSk7XG5cblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIFJldXNhYmxlIG9iamVjdFxuXHQgICAgdmFyIFcgPSBbXTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtMSBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTEgPSBDX2FsZ28uU0hBMSA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSxcblx0ICAgICAgICAgICAgICAgIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsXG5cdCAgICAgICAgICAgICAgICAweGMzZDJlMWYwXG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgYyA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBkID0gSFszXTtcblx0ICAgICAgICAgICAgdmFyIGUgPSBIWzRdO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKGkgPCAxNikge1xuXHQgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBNW29mZnNldCArIGldIHwgMDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdO1xuXHQgICAgICAgICAgICAgICAgICAgIFdbaV0gPSAobiA8PCAxKSB8IChuID4+PiAzMSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0ID0gKChhIDw8IDUpIHwgKGEgPj4+IDI3KSkgKyBlICsgV1tpXTtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMjApIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ICs9ICgoYiAmIGMpIHwgKH5iICYgZCkpICsgMHg1YTgyNzk5OTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IDQwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoYiBeIGMgXiBkKSArIDB4NmVkOWViYTE7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA2MCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgKz0gKChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKSkgLSAweDcwZTQ0MzI0O1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChpIDwgODApICovIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ICs9IChiIF4gYyBeIGQpIC0gMHgzNTlkM2UyYTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgZSA9IGQ7XG5cdCAgICAgICAgICAgICAgICBkID0gYztcblx0ICAgICAgICAgICAgICAgIGMgPSAoYiA8PCAzMCkgfCAoYiA+Pj4gMik7XG5cdCAgICAgICAgICAgICAgICBiID0gYTtcblx0ICAgICAgICAgICAgICAgIGEgPSB0O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwO1xuXHQgICAgICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwO1xuXHQgICAgICAgICAgICBIWzRdID0gKEhbNF0gKyBlKSB8IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gbkJpdHNUb3RhbDtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTEoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTEod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEExID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMShtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEExID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTEpO1xuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gSW5pdGlhbGl6YXRpb24gYW5kIHJvdW5kIGNvbnN0YW50cyB0YWJsZXNcblx0ICAgIHZhciBIID0gW107XG5cdCAgICB2YXIgSyA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIGNvbnN0YW50c1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmdW5jdGlvbiBpc1ByaW1lKG4pIHtcblx0ICAgICAgICAgICAgdmFyIHNxcnROID0gTWF0aC5zcXJ0KG4pO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBmYWN0b3IgPSAyOyBmYWN0b3IgPD0gc3FydE47IGZhY3RvcisrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIShuICUgZmFjdG9yKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZ1bmN0aW9uIGdldEZyYWN0aW9uYWxCaXRzKG4pIHtcblx0ICAgICAgICAgICAgcmV0dXJuICgobiAtIChuIHwgMCkpICogMHgxMDAwMDAwMDApIHwgMDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgbiA9IDI7XG5cdCAgICAgICAgdmFyIG5QcmltZSA9IDA7XG5cdCAgICAgICAgd2hpbGUgKG5QcmltZSA8IDY0KSB7XG5cdCAgICAgICAgICAgIGlmIChpc1ByaW1lKG4pKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoblByaW1lIDwgOCkge1xuXHQgICAgICAgICAgICAgICAgICAgIEhbblByaW1lXSA9IGdldEZyYWN0aW9uYWxCaXRzKE1hdGgucG93KG4sIDEgLyAyKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBLW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMykpO1xuXG5cdCAgICAgICAgICAgICAgICBuUHJpbWUrKztcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIG4rKztcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3Rcblx0ICAgIHZhciBXID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTI1NiBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTI1NiA9IENfYWxnby5TSEEyNTYgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KEguc2xpY2UoMCkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgYyA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBkID0gSFszXTtcblx0ICAgICAgICAgICAgdmFyIGUgPSBIWzRdO1xuXHQgICAgICAgICAgICB2YXIgZiA9IEhbNV07XG5cdCAgICAgICAgICAgIHZhciBnID0gSFs2XTtcblx0ICAgICAgICAgICAgdmFyIGggPSBIWzddO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKGkgPCAxNikge1xuXHQgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBNW29mZnNldCArIGldIHwgMDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHggPSBXW2kgLSAxNV07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMCAgPSAoKGdhbW1hMHggPDwgMjUpIHwgKGdhbW1hMHggPj4+IDcpKSAgXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChnYW1tYTB4IDw8IDE0KSB8IChnYW1tYTB4ID4+PiAxOCkpIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZ2FtbWEweCA+Pj4gMyk7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExeCA9IFdbaSAtIDJdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTEgID0gKChnYW1tYTF4IDw8IDE1KSB8IChnYW1tYTF4ID4+PiAxNykpIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZ2FtbWExeCA8PCAxMykgfCAoZ2FtbWExeCA+Pj4gMTkpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdhbW1hMXggPj4+IDEwKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgdmFyIGNoICA9IChlICYgZikgXiAofmUgJiBnKTtcblx0ICAgICAgICAgICAgICAgIHZhciBtYWogPSAoYSAmIGIpIF4gKGEgJiBjKSBeIChiICYgYyk7XG5cblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTAgPSAoKGEgPDwgMzApIHwgKGEgPj4+IDIpKSBeICgoYSA8PCAxOSkgfCAoYSA+Pj4gMTMpKSBeICgoYSA8PCAxMCkgfCAoYSA+Pj4gMjIpKTtcblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTEgPSAoKGUgPDwgMjYpIHwgKGUgPj4+IDYpKSBeICgoZSA8PCAyMSkgfCAoZSA+Pj4gMTEpKSBeICgoZSA8PCA3KSAgfCAoZSA+Pj4gMjUpKTtcblxuXHQgICAgICAgICAgICAgICAgdmFyIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tpXSArIFdbaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgdDIgPSBzaWdtYTAgKyBtYWo7XG5cblx0ICAgICAgICAgICAgICAgIGggPSBnO1xuXHQgICAgICAgICAgICAgICAgZyA9IGY7XG5cdCAgICAgICAgICAgICAgICBmID0gZTtcblx0ICAgICAgICAgICAgICAgIGUgPSAoZCArIHQxKSB8IDA7XG5cdCAgICAgICAgICAgICAgICBkID0gYztcblx0ICAgICAgICAgICAgICAgIGMgPSBiO1xuXHQgICAgICAgICAgICAgICAgYiA9IGE7XG5cdCAgICAgICAgICAgICAgICBhID0gKHQxICsgdDIpIHwgMDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG5cdCAgICAgICAgICAgIEhbMF0gPSAoSFswXSArIGEpIHwgMDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwO1xuXHQgICAgICAgICAgICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7XG5cdCAgICAgICAgICAgIEhbM10gPSAoSFszXSArIGQpIHwgMDtcblx0ICAgICAgICAgICAgSFs0XSA9IChIWzRdICsgZSkgfCAwO1xuXHQgICAgICAgICAgICBIWzVdID0gKEhbNV0gKyBmKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNl0gPSAoSFs2XSArIGcpIHwgMDtcblx0ICAgICAgICAgICAgSFs3XSA9IChIWzddICsgaCkgfCAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTI1Nih3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlNIQTI1NiA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTI1Nik7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMjU2KG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1NIQTI1NiA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEEyNTYpO1xuXHR9KE1hdGgpKTtcblxuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIFNIQTI1NiA9IENfYWxnby5TSEEyNTY7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTIyNCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTIyNCA9IENfYWxnby5TSEEyMjQgPSBTSEEyNTYuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG5cdCAgICAgICAgICAgICAgICAweGZmYzAwYjMxLCAweDY4NTgxNTExLCAweDY0Zjk4ZmE3LCAweGJlZmE0ZmE0XG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IFNIQTI1Ni5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gNDtcblxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTIyNCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjI0KHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIZWxwZXIoU0hBMjI0KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEyMjQobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIbWFjSGVscGVyKFNIQTIyNCk7XG5cdH0oKSk7XG5cblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQ7XG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7XG5cdCAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgZnVuY3Rpb24gWDY0V29yZF9jcmVhdGUoKSB7XG5cdCAgICAgICAgcmV0dXJuIFg2NFdvcmQuY3JlYXRlLmFwcGx5KFg2NFdvcmQsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cblx0ICAgIC8vIENvbnN0YW50c1xuXHQgICAgdmFyIEsgPSBbXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiksIFg2NFdvcmRfY3JlYXRlKDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYpLCBYNjRXb3JkX2NyZWF0ZSgweGU5YjVkYmE1LCAweDgxODlkYmJjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDM5NTZjMjViLCAweGYzNDhiNTM4KSwgWDY0V29yZF9jcmVhdGUoMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5MjNmODJhNCwgMHhhZjE5NGY5YiksIFg2NFdvcmRfY3JlYXRlKDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIpLCBYNjRXb3JkX2NyZWF0ZSgweDEyODM1YjAxLCAweDQ1NzA2ZmJlKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDI0MzE4NWJlLCAweDRlZTRiMjhjKSwgWDY0V29yZF9jcmVhdGUoMHg1NTBjN2RjMywgMHhkNWZmYjRlMiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiksIFg2NFdvcmRfY3JlYXRlKDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUpLCBYNjRXb3JkX2NyZWF0ZSgweGMxOWJmMTc0LCAweGNmNjkyNjk0KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGU0OWI2OWMxLCAweDllZjE0YWQyKSwgWDY0V29yZF9jcmVhdGUoMHhlZmJlNDc4NiwgMHgzODRmMjVlMyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwZmMxOWRjNiwgMHg4YjhjZDViNSksIFg2NFdvcmRfY3JlYXRlKDB4MjQwY2ExY2MsIDB4NzdhYzljNjUpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUpLCBYNjRXb3JkX2NyZWF0ZSgweDRhNzQ4NGFhLCAweDZlYTZlNDgzKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDVjYjBhOWRjLCAweGJkNDFmYmQ0KSwgWDY0V29yZF9jcmVhdGUoMHg3NmY5ODhkYSwgMHg4MzExNTNiNSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiksIFg2NFdvcmRfY3JlYXRlKDB4YTgzMWM2NmQsIDB4MmRiNDMyMTApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjAwMzI3YzgsIDB4OThmYjIxM2YpLCBYNjRXb3JkX2NyZWF0ZSgweGJmNTk3ZmM3LCAweGJlZWYwZWU0KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGM2ZTAwYmYzLCAweDNkYTg4ZmMyKSwgWDY0V29yZF9jcmVhdGUoMHhkNWE3OTE0NywgMHg5MzBhYTcyNSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiksIFg2NFdvcmRfY3JlYXRlKDB4MTQyOTI5NjcsIDB4MGEwZTZlNzApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjdiNzBhODUsIDB4NDZkMjJmZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDJlMWIyMTM4LCAweDVjMjZjOTI2KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDRkMmM2ZGZjLCAweDVhYzQyYWVkKSwgWDY0V29yZF9jcmVhdGUoMHg1MzM4MGQxMywgMHg5ZDk1YjNkZiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSksIFg2NFdvcmRfY3JlYXRlKDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYpLCBYNjRXb3JkX2NyZWF0ZSgweDkyNzIyYzg1LCAweDE0ODIzNTNiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGEyYmZlOGExLCAweDRjZjEwMzY0KSwgWDY0V29yZF9jcmVhdGUoMHhhODFhNjY0YiwgMHhiYzQyMzAwMSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSksIFg2NFdvcmRfY3JlYXRlKDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgpLCBYNjRXb3JkX2NyZWF0ZSgweGQ2OTkwNjI0LCAweDU1NjVhOTEwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGY0MGUzNTg1LCAweDU3NzEyMDJhKSwgWDY0V29yZF9jcmVhdGUoMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgxOWE0YzExNiwgMHhiOGQyZDBjOCksIFg2NFdvcmRfY3JlYXRlKDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTkpLCBYNjRXb3JkX2NyZWF0ZSgweDM0YjBiY2I1LCAweGUxOWI0OGE4KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDM5MWMwY2IzLCAweGM1Yzk1YTYzKSwgWDY0V29yZF9jcmVhdGUoMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg1YjljY2E0ZiwgMHg3NzYzZTM3MyksIFg2NFdvcmRfY3JlYXRlKDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDc4YTU2MzZmLCAweDQzMTcyZjYwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDg0Yzg3ODE0LCAweGExZjBhYjcyKSwgWDY0V29yZF9jcmVhdGUoMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCksIFg2NFdvcmRfY3JlYXRlKDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTkpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUpLCBYNjRXb3JkX2NyZWF0ZSgweGM2NzE3OGYyLCAweGUzNzI1MzJiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGNhMjczZWNlLCAweGVhMjY2MTljKSwgWDY0V29yZF9jcmVhdGUoMHhkMTg2YjhjNywgMHgyMWMwYzIwNyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSksIFg2NFdvcmRfY3JlYXRlKDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEpLCBYNjRXb3JkX2NyZWF0ZSgweDBhNjM3ZGM1LCAweGEyYzg5OGE2KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDExM2Y5ODA0LCAweGJlZjkwZGFlKSwgWDY0V29yZF9jcmVhdGUoMHgxYjcxMGIzNSwgMHgxMzFjNDcxYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCksIFg2NFdvcmRfY3JlYXRlKDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMpLCBYNjRXb3JkX2NyZWF0ZSgweDQzMWQ2N2M0LCAweDljMTAwZDRjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDRjYzVkNGJlLCAweGNiM2U0MmI2KSwgWDY0V29yZF9jcmVhdGUoMHg1OTdmMjk5YywgMHhmYzY1N2UyYSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYyksIFg2NFdvcmRfY3JlYXRlKDB4NmM0NDE5OGMsIDB4NGE0NzU4MTcpXG5cdCAgICBdO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgVyA9IFtdO1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgV1tpXSA9IFg2NFdvcmRfY3JlYXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtNTEyIGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBNTEyID0gQ19hbGdvLlNIQTUxMiA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDZhMDllNjY3LCAweGYzYmNjOTA4KSwgbmV3IFg2NFdvcmQuaW5pdCgweGJiNjdhZTg1LCAweDg0Y2FhNzNiKSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYiksIG5ldyBYNjRXb3JkLmluaXQoMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEpLCBuZXcgWDY0V29yZC5pbml0KDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDFmODNkOWFiLCAweGZiNDFiZDZiKSwgbmV3IFg2NFdvcmQuaW5pdCgweDViZTBjZDE5LCAweDEzN2UyMTc5KVxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIEgwID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIEgxID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIEgyID0gSFsyXTtcblx0ICAgICAgICAgICAgdmFyIEgzID0gSFszXTtcblx0ICAgICAgICAgICAgdmFyIEg0ID0gSFs0XTtcblx0ICAgICAgICAgICAgdmFyIEg1ID0gSFs1XTtcblx0ICAgICAgICAgICAgdmFyIEg2ID0gSFs2XTtcblx0ICAgICAgICAgICAgdmFyIEg3ID0gSFs3XTtcblxuXHQgICAgICAgICAgICB2YXIgSDBoID0gSDAuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgwbCA9IEgwLmxvdztcblx0ICAgICAgICAgICAgdmFyIEgxaCA9IEgxLmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIMWwgPSBIMS5sb3c7XG5cdCAgICAgICAgICAgIHZhciBIMmggPSBIMi5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDJsID0gSDIubG93O1xuXHQgICAgICAgICAgICB2YXIgSDNoID0gSDMuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgzbCA9IEgzLmxvdztcblx0ICAgICAgICAgICAgdmFyIEg0aCA9IEg0LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBINGwgPSBINC5sb3c7XG5cdCAgICAgICAgICAgIHZhciBINWggPSBINS5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDVsID0gSDUubG93O1xuXHQgICAgICAgICAgICB2YXIgSDZoID0gSDYuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEg2bCA9IEg2Lmxvdztcblx0ICAgICAgICAgICAgdmFyIEg3aCA9IEg3LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIN2wgPSBINy5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgdmFyIGFoID0gSDBoO1xuXHQgICAgICAgICAgICB2YXIgYWwgPSBIMGw7XG5cdCAgICAgICAgICAgIHZhciBiaCA9IEgxaDtcblx0ICAgICAgICAgICAgdmFyIGJsID0gSDFsO1xuXHQgICAgICAgICAgICB2YXIgY2ggPSBIMmg7XG5cdCAgICAgICAgICAgIHZhciBjbCA9IEgybDtcblx0ICAgICAgICAgICAgdmFyIGRoID0gSDNoO1xuXHQgICAgICAgICAgICB2YXIgZGwgPSBIM2w7XG5cdCAgICAgICAgICAgIHZhciBlaCA9IEg0aDtcblx0ICAgICAgICAgICAgdmFyIGVsID0gSDRsO1xuXHQgICAgICAgICAgICB2YXIgZmggPSBINWg7XG5cdCAgICAgICAgICAgIHZhciBmbCA9IEg1bDtcblx0ICAgICAgICAgICAgdmFyIGdoID0gSDZoO1xuXHQgICAgICAgICAgICB2YXIgZ2wgPSBINmw7XG5cdCAgICAgICAgICAgIHZhciBoaCA9IEg3aDtcblx0ICAgICAgICAgICAgdmFyIGhsID0gSDdsO1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBXaWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgV2loO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIFdpID0gV1tpXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRXh0ZW5kIG1lc3NhZ2Vcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXaWggPSBXaS5oaWdoID0gTVtvZmZzZXQgKyBpICogMl0gICAgIHwgMDtcblx0ICAgICAgICAgICAgICAgICAgICBXaWwgPSBXaS5sb3cgID0gTVtvZmZzZXQgKyBpICogMiArIDFdIHwgMDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWEwXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHggID0gV1tpIC0gMTVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4aCA9IGdhbW1hMHguaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweGwgPSBnYW1tYTB4Lmxvdztcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwaCAgPSAoKGdhbW1hMHhoID4+PiAxKSB8IChnYW1tYTB4bCA8PCAzMSkpIF4gKChnYW1tYTB4aCA+Pj4gOCkgfCAoZ2FtbWEweGwgPDwgMjQpKSBeIChnYW1tYTB4aCA+Pj4gNyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMGwgID0gKChnYW1tYTB4bCA+Pj4gMSkgfCAoZ2FtbWEweGggPDwgMzEpKSBeICgoZ2FtbWEweGwgPj4+IDgpIHwgKGdhbW1hMHhoIDw8IDI0KSkgXiAoKGdhbW1hMHhsID4+PiA3KSB8IChnYW1tYTB4aCA8PCAyNSkpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWExXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggID0gV1tpIC0gMl07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXhoID0gZ2FtbWExeC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4bCA9IGdhbW1hMXgubG93O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTFoICA9ICgoZ2FtbWExeGggPj4+IDE5KSB8IChnYW1tYTF4bCA8PCAxMykpIF4gKChnYW1tYTF4aCA8PCAzKSB8IChnYW1tYTF4bCA+Pj4gMjkpKSBeIChnYW1tYTF4aCA+Pj4gNik7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMWwgID0gKChnYW1tYTF4bCA+Pj4gMTkpIHwgKGdhbW1hMXhoIDw8IDEzKSkgXiAoKGdhbW1hMXhsIDw8IDMpIHwgKGdhbW1hMXhoID4+PiAyOSkpIF4gKChnYW1tYTF4bCA+Pj4gNikgfCAoZ2FtbWExeGggPDwgMjYpKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTcgID0gV1tpIC0gN107XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpN2ggPSBXaTcuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2k3bCA9IFdpNy5sb3c7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNiAgPSBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpMTZoID0gV2kxNi5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTE2bCA9IFdpMTYubG93O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgV2lsID0gZ2FtbWEwbCArIFdpN2w7XG5cdCAgICAgICAgICAgICAgICAgICAgV2loID0gZ2FtbWEwaCArIFdpN2ggKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWEwbCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICAgICAgV2lsID0gV2lsICsgZ2FtbWExbDtcblx0ICAgICAgICAgICAgICAgICAgICBXaWggPSBXaWggKyBnYW1tYTFoICsgKChXaWwgPj4+IDApIDwgKGdhbW1hMWwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgICAgIFdpbCA9IFdpbCArIFdpMTZsO1xuXHQgICAgICAgICAgICAgICAgICAgIFdpaCA9IFdpaCArIFdpMTZoICsgKChXaWwgPj4+IDApIDwgKFdpMTZsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIFdpLmhpZ2ggPSBXaWg7XG5cdCAgICAgICAgICAgICAgICAgICAgV2kubG93ICA9IFdpbDtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgdmFyIGNoaCAgPSAoZWggJiBmaCkgXiAofmVoICYgZ2gpO1xuXHQgICAgICAgICAgICAgICAgdmFyIGNobCAgPSAoZWwgJiBmbCkgXiAofmVsICYgZ2wpO1xuXHQgICAgICAgICAgICAgICAgdmFyIG1hamggPSAoYWggJiBiaCkgXiAoYWggJiBjaCkgXiAoYmggJiBjaCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqbCA9IChhbCAmIGJsKSBeIChhbCAmIGNsKSBeIChibCAmIGNsKTtcblxuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMGggPSAoKGFoID4+PiAyOCkgfCAoYWwgPDwgNCkpICBeICgoYWggPDwgMzApICB8IChhbCA+Pj4gMikpIF4gKChhaCA8PCAyNSkgfCAoYWwgPj4+IDcpKTtcblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTBsID0gKChhbCA+Pj4gMjgpIHwgKGFoIDw8IDQpKSAgXiAoKGFsIDw8IDMwKSAgfCAoYWggPj4+IDIpKSBeICgoYWwgPDwgMjUpIHwgKGFoID4+PiA3KSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExaCA9ICgoZWggPj4+IDE0KSB8IChlbCA8PCAxOCkpIF4gKChlaCA+Pj4gMTgpIHwgKGVsIDw8IDE0KSkgXiAoKGVoIDw8IDIzKSB8IChlbCA+Pj4gOSkpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMWwgPSAoKGVsID4+PiAxNCkgfCAoZWggPDwgMTgpKSBeICgoZWwgPj4+IDE4KSB8IChlaCA8PCAxNCkpIF4gKChlbCA8PCAyMykgfCAoZWggPj4+IDkpKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2ldICsgV1tpXVxuXHQgICAgICAgICAgICAgICAgdmFyIEtpICA9IEtbaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgS2loID0gS2kuaGlnaDtcblx0ICAgICAgICAgICAgICAgIHZhciBLaWwgPSBLaS5sb3c7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSBobCArIHNpZ21hMWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gaGggKyBzaWdtYTFoICsgKCh0MWwgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBjaGw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gdDFoICsgY2hoICsgKCh0MWwgPj4+IDApIDwgKGNobCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFsID0gdDFsICsgS2lsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxaCA9IHQxaCArIEtpaCArICgodDFsID4+PiAwKSA8IChLaWwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxbCA9IHQxbCArIFdpbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWggPSB0MWggKyBXaWggKyAoKHQxbCA+Pj4gMCkgPCAoV2lsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gdDIgPSBzaWdtYTAgKyBtYWpcblx0ICAgICAgICAgICAgICAgIHZhciB0MmwgPSBzaWdtYTBsICsgbWFqbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MmggPSBzaWdtYTBoICsgbWFqaCArICgodDJsID4+PiAwKSA8IChzaWdtYTBsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgICAgICBoaCA9IGdoO1xuXHQgICAgICAgICAgICAgICAgaGwgPSBnbDtcblx0ICAgICAgICAgICAgICAgIGdoID0gZmg7XG5cdCAgICAgICAgICAgICAgICBnbCA9IGZsO1xuXHQgICAgICAgICAgICAgICAgZmggPSBlaDtcblx0ICAgICAgICAgICAgICAgIGZsID0gZWw7XG5cdCAgICAgICAgICAgICAgICBlbCA9IChkbCArIHQxbCkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZWggPSAoZGggKyB0MWggKyAoKGVsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICAgICAgICAgIGRoID0gY2g7XG5cdCAgICAgICAgICAgICAgICBkbCA9IGNsO1xuXHQgICAgICAgICAgICAgICAgY2ggPSBiaDtcblx0ICAgICAgICAgICAgICAgIGNsID0gYmw7XG5cdCAgICAgICAgICAgICAgICBiaCA9IGFoO1xuXHQgICAgICAgICAgICAgICAgYmwgPSBhbDtcblx0ICAgICAgICAgICAgICAgIGFsID0gKHQxbCArIHQybCkgfCAwO1xuXHQgICAgICAgICAgICAgICAgYWggPSAodDFoICsgdDJoICsgKChhbCA+Pj4gMCkgPCAodDFsID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSDBsID0gSDAubG93ICA9IChIMGwgKyBhbCk7XG5cdCAgICAgICAgICAgIEgwLmhpZ2ggPSAoSDBoICsgYWggKyAoKEgwbCA+Pj4gMCkgPCAoYWwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDFsID0gSDEubG93ICA9IChIMWwgKyBibCk7XG5cdCAgICAgICAgICAgIEgxLmhpZ2ggPSAoSDFoICsgYmggKyAoKEgxbCA+Pj4gMCkgPCAoYmwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDJsID0gSDIubG93ICA9IChIMmwgKyBjbCk7XG5cdCAgICAgICAgICAgIEgyLmhpZ2ggPSAoSDJoICsgY2ggKyAoKEgybCA+Pj4gMCkgPCAoY2wgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDNsID0gSDMubG93ICA9IChIM2wgKyBkbCk7XG5cdCAgICAgICAgICAgIEgzLmhpZ2ggPSAoSDNoICsgZGggKyAoKEgzbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDRsID0gSDQubG93ICA9IChINGwgKyBlbCk7XG5cdCAgICAgICAgICAgIEg0LmhpZ2ggPSAoSDRoICsgZWggKyAoKEg0bCA+Pj4gMCkgPCAoZWwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDVsID0gSDUubG93ICA9IChINWwgKyBmbCk7XG5cdCAgICAgICAgICAgIEg1LmhpZ2ggPSAoSDVoICsgZmggKyAoKEg1bCA+Pj4gMCkgPCAoZmwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDZsID0gSDYubG93ICA9IChINmwgKyBnbCk7XG5cdCAgICAgICAgICAgIEg2LmhpZ2ggPSAoSDZoICsgZ2ggKyAoKEg2bCA+Pj4gMCkgPCAoZ2wgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDdsID0gSDcubG93ICA9IChIN2wgKyBobCk7XG5cdCAgICAgICAgICAgIEg3LmhpZ2ggPSAoSDdoICsgaGggKyAoKEg3bCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzBdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzFdID0gbkJpdHNUb3RhbDtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IGhhc2ggdG8gMzItYml0IHdvcmQgYXJyYXkgYmVmb3JlIHJldHVybmluZ1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2gudG9YMzIoKTtcblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxMDI0LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTUxMignbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBNTEyKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBNTEyKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEE1MTIobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTUxMik7XG5cdH0oKSk7XG5cblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQ7XG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7XG5cdCAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBTSEE1MTIgPSBDX2FsZ28uU0hBNTEyO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0zODQgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEzODQgPSBDX2FsZ28uU0hBMzg0ID0gU0hBNTEyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBYNjRXb3JkQXJyYXkuaW5pdChbXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4Y2JiYjlkNWQsIDB4YzEwNTllZDgpLCBuZXcgWDY0V29yZC5pbml0KDB4NjI5YTI5MmEsIDB4MzY3Y2Q1MDcpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDkxNTkwMTVhLCAweDMwNzBkZDE3KSwgbmV3IFg2NFdvcmQuaW5pdCgweDE1MmZlY2Q4LCAweGY3MGU1OTM5KSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHg2NzMzMjY2NywgMHhmZmMwMGIzMSksIG5ldyBYNjRXb3JkLmluaXQoMHg4ZWI0NGE4NywgMHg2ODU4MTUxMSksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4ZGIwYzJlMGQsIDB4NjRmOThmYTcpLCBuZXcgWDY0V29yZC5pbml0KDB4NDdiNTQ4MWQsIDB4YmVmYTRmYTQpXG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IFNIQTUxMi5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gMTY7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzODQoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTM4NCh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlNIQTM4NCA9IFNIQTUxMi5fY3JlYXRlSGVscGVyKFNIQTM4NCk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMzg0KG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1NIQTM4NCA9IFNIQTUxMi5fY3JlYXRlSG1hY0hlbHBlcihTSEEzODQpO1xuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQ7XG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBDb25zdGFudHMgdGFibGVzXG5cdCAgICB2YXIgUkhPX09GRlNFVFMgPSBbXTtcblx0ICAgIHZhciBQSV9JTkRFWEVTICA9IFtdO1xuXHQgICAgdmFyIFJPVU5EX0NPTlNUQU5UUyA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIENvbnN0YW50c1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBDb21wdXRlIHJobyBvZmZzZXQgY29uc3RhbnRzXG5cdCAgICAgICAgdmFyIHggPSAxLCB5ID0gMDtcblx0ICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDI0OyB0KyspIHtcblx0ICAgICAgICAgICAgUkhPX09GRlNFVFNbeCArIDUgKiB5XSA9ICgodCArIDEpICogKHQgKyAyKSAvIDIpICUgNjQ7XG5cblx0ICAgICAgICAgICAgdmFyIG5ld1ggPSB5ICUgNTtcblx0ICAgICAgICAgICAgdmFyIG5ld1kgPSAoMiAqIHggKyAzICogeSkgJSA1O1xuXHQgICAgICAgICAgICB4ID0gbmV3WDtcblx0ICAgICAgICAgICAgeSA9IG5ld1k7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ29tcHV0ZSBwaSBpbmRleCBjb25zdGFudHNcblx0ICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IDU7IHkrKykge1xuXHQgICAgICAgICAgICAgICAgUElfSU5ERVhFU1t4ICsgNSAqIHldID0geSArICgoMiAqIHggKyAzICogeSkgJSA1KSAqIDU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDb21wdXRlIHJvdW5kIGNvbnN0YW50c1xuXHQgICAgICAgIHZhciBMRlNSID0gMHgwMTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIHJvdW5kQ29uc3RhbnRNc3cgPSAwO1xuXHQgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudExzdyA9IDA7XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA3OyBqKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChMRlNSICYgMHgwMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBiaXRQb3NpdGlvbiA9ICgxIDw8IGopIC0gMTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoYml0UG9zaXRpb24gPCAzMikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3VuZENvbnN0YW50THN3IF49IDEgPDwgYml0UG9zaXRpb247XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChiaXRQb3NpdGlvbiA+PSAzMikgKi8ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3VuZENvbnN0YW50TXN3IF49IDEgPDwgKGJpdFBvc2l0aW9uIC0gMzIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IExGU1Jcblx0ICAgICAgICAgICAgICAgIGlmIChMRlNSICYgMHg4MCkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFByaW1pdGl2ZSBwb2x5bm9taWFsIG92ZXIgR0YoMik6IHheOCArIHheNiArIHheNSArIHheNCArIDFcblx0ICAgICAgICAgICAgICAgICAgICBMRlNSID0gKExGU1IgPDwgMSkgXiAweDcxO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBMRlNSIDw8PSAxO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgUk9VTkRfQ09OU1RBTlRTW2ldID0gWDY0V29yZC5jcmVhdGUocm91bmRDb25zdGFudE1zdywgcm91bmRDb25zdGFudExzdyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0cyBmb3IgdGVtcG9yYXJ5IHZhbHVlc1xuXHQgICAgdmFyIFQgPSBbXTtcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG5cdCAgICAgICAgICAgIFRbaV0gPSBYNjRXb3JkLmNyZWF0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTMgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEzID0gQ19hbGdvLlNIQTMgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gb3V0cHV0TGVuZ3RoXG5cdCAgICAgICAgICogICBUaGUgZGVzaXJlZCBudW1iZXIgb2YgYml0cyBpbiB0aGUgb3V0cHV0IGhhc2guXG5cdCAgICAgICAgICogICBPbmx5IHZhbHVlcyBwZXJtaXR0ZWQgYXJlOiAyMjQsIDI1NiwgMzg0LCA1MTIuXG5cdCAgICAgICAgICogICBEZWZhdWx0OiA1MTJcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEhhc2hlci5jZmcuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgb3V0cHV0TGVuZ3RoOiA1MTJcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlID0gW11cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBzdGF0ZVtpXSA9IG5ldyBYNjRXb3JkLmluaXQoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHRoaXMuYmxvY2tTaXplID0gKDE2MDAgLSAyICogdGhpcy5jZmcub3V0cHV0TGVuZ3RoKSAvIDMyO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXHQgICAgICAgICAgICB2YXIgbkJsb2NrU2l6ZUxhbmVzID0gdGhpcy5ibG9ja1NpemUgLyAyO1xuXG5cdCAgICAgICAgICAgIC8vIEFic29yYlxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5CbG9ja1NpemVMYW5lczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBNMmkgID0gTVtvZmZzZXQgKyAyICogaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgTTJpMSA9IE1bb2Zmc2V0ICsgMiAqIGkgKyAxXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIE0yaSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkgPDwgOCkgIHwgKE0yaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkgPDwgMjQpIHwgKE0yaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICAgICAgTTJpMSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkxIDw8IDgpICB8IChNMmkxID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE0yaTEgPDwgMjQpIHwgKE0yaTEgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gQWJzb3JiIG1lc3NhZ2UgaW50byBzdGF0ZVxuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtpXTtcblx0ICAgICAgICAgICAgICAgIGxhbmUuaGlnaCBePSBNMmkxO1xuXHQgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IE0yaTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDA7IHJvdW5kIDwgMjQ7IHJvdW5kKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFRoZXRhXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIE1peCBjb2x1bW4gbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IDAsIHRMc3cgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbeCArIDUgKiB5XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdE1zdyBePSBsYW5lLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRMc3cgXj0gbGFuZS5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gVGVtcG9yYXJ5IHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeCA9IFRbeF07XG5cdCAgICAgICAgICAgICAgICAgICAgVHguaGlnaCA9IHRNc3c7XG5cdCAgICAgICAgICAgICAgICAgICAgVHgubG93ICA9IHRMc3c7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeDQgPSBUWyh4ICsgNCkgJSA1XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVHgxID0gVFsoeCArIDEpICUgNV07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4MU1zdyA9IFR4MS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeDFMc3cgPSBUeDEubG93O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gTWl4IHN1cnJvdW5kaW5nIGNvbHVtbnNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IFR4NC5oaWdoIF4gKChUeDFNc3cgPDwgMSkgfCAoVHgxTHN3ID4+PiAzMSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0THN3ID0gVHg0LmxvdyAgXiAoKFR4MUxzdyA8PCAxKSB8IChUeDFNc3cgPj4+IDMxKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVt4ICsgNSAqIHldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gdE1zdztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IHRMc3c7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBSaG8gUGlcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGxhbmVJbmRleCA9IDE7IGxhbmVJbmRleCA8IDI1OyBsYW5lSW5kZXgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0THN3O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtsYW5lSW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTXN3ID0gbGFuZS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTHN3ID0gbGFuZS5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJob09mZnNldCA9IFJIT19PRkZTRVRTW2xhbmVJbmRleF07XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBSb3RhdGUgbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocmhvT2Zmc2V0IDwgMzIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdE1zdyA9IChsYW5lTXN3IDw8IHJob09mZnNldCkgfCAobGFuZUxzdyA+Pj4gKDMyIC0gcmhvT2Zmc2V0KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRMc3cgPSAobGFuZUxzdyA8PCByaG9PZmZzZXQpIHwgKGxhbmVNc3cgPj4+ICgzMiAtIHJob09mZnNldCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAocmhvT2Zmc2V0ID49IDMyKSAqLyB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRNc3cgPSAobGFuZUxzdyA8PCAocmhvT2Zmc2V0IC0gMzIpKSB8IChsYW5lTXN3ID4+PiAoNjQgLSByaG9PZmZzZXQpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdExzdyA9IChsYW5lTXN3IDw8IChyaG9PZmZzZXQgLSAzMikpIHwgKGxhbmVMc3cgPj4+ICg2NCAtIHJob09mZnNldCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFRyYW5zcG9zZSBsYW5lc1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUUGlMYW5lID0gVFtQSV9JTkRFWEVTW2xhbmVJbmRleF1dO1xuXHQgICAgICAgICAgICAgICAgICAgIFRQaUxhbmUuaGlnaCA9IHRNc3c7XG5cdCAgICAgICAgICAgICAgICAgICAgVFBpTGFuZS5sb3cgID0gdExzdztcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gUmhvIHBpIGF0IHggPSB5ID0gMFxuXHQgICAgICAgICAgICAgICAgdmFyIFQwID0gVFswXTtcblx0ICAgICAgICAgICAgICAgIHZhciBzdGF0ZTAgPSBzdGF0ZVswXTtcblx0ICAgICAgICAgICAgICAgIFQwLmhpZ2ggPSBzdGF0ZTAuaGlnaDtcblx0ICAgICAgICAgICAgICAgIFQwLmxvdyAgPSBzdGF0ZTAubG93O1xuXG5cdCAgICAgICAgICAgICAgICAvLyBDaGlcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lSW5kZXggPSB4ICsgNSAqIHk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbbGFuZUluZGV4XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFRMYW5lID0gVFtsYW5lSW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgVHgxTGFuZSA9IFRbKCh4ICsgMSkgJSA1KSArIDUgKiB5XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFR4MkxhbmUgPSBUWygoeCArIDIpICUgNSkgKyA1ICogeV07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWl4IHJvd3Ncblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5oaWdoID0gVExhbmUuaGlnaCBeICh+VHgxTGFuZS5oaWdoICYgVHgyTGFuZS5oaWdoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5sb3cgID0gVExhbmUubG93ICBeICh+VHgxTGFuZS5sb3cgICYgVHgyTGFuZS5sb3cpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gSW90YVxuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVswXTtcblx0ICAgICAgICAgICAgICAgIHZhciByb3VuZENvbnN0YW50ID0gUk9VTkRfQ09OU1RBTlRTW3JvdW5kXTtcblx0ICAgICAgICAgICAgICAgIGxhbmUuaGlnaCBePSByb3VuZENvbnN0YW50LmhpZ2g7XG5cdCAgICAgICAgICAgICAgICBsYW5lLmxvdyAgXj0gcm91bmRDb25zdGFudC5sb3c7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJpdHMgPSB0aGlzLmJsb2NrU2l6ZSAqIDMyO1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4MSA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKE1hdGguY2VpbCgobkJpdHNMZWZ0ICsgMSkgLyBibG9ja1NpemVCaXRzKSAqIGJsb2NrU2l6ZUJpdHMpID4+PiA1KSAtIDFdIHw9IDB4ODA7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXHQgICAgICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoQnl0ZXMgPSB0aGlzLmNmZy5vdXRwdXRMZW5ndGggLyA4O1xuXHQgICAgICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoTGFuZXMgPSBvdXRwdXRMZW5ndGhCeXRlcyAvIDg7XG5cblx0ICAgICAgICAgICAgLy8gU3F1ZWV6ZVxuXHQgICAgICAgICAgICB2YXIgaGFzaFdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0cHV0TGVuZ3RoTGFuZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmVNc3cgPSBsYW5lLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZUxzdyA9IGxhbmUubG93O1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICAgICAgbGFuZU1zdyA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChsYW5lTXN3IDw8IDgpICB8IChsYW5lTXN3ID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKGxhbmVNc3cgPDwgMjQpIHwgKGxhbmVNc3cgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgICAgIGxhbmVMc3cgPSAoXG5cdCAgICAgICAgICAgICAgICAgICAgKCgobGFuZUxzdyA8PCA4KSAgfCAobGFuZUxzdyA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChsYW5lTHN3IDw8IDI0KSB8IChsYW5lTHN3ID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNxdWVlemUgc3RhdGUgdG8gcmV0cmlldmUgaGFzaFxuXHQgICAgICAgICAgICAgICAgaGFzaFdvcmRzLnB1c2gobGFuZUxzdyk7XG5cdCAgICAgICAgICAgICAgICBoYXNoV29yZHMucHVzaChsYW5lTXN3KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQoaGFzaFdvcmRzLCBvdXRwdXRMZW5ndGhCeXRlcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IGNsb25lLl9zdGF0ZSA9IHRoaXMuX3N0YXRlLnNsaWNlKDApO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHN0YXRlW2ldID0gc3RhdGVbaV0uY2xvbmUoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEzID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMyk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMyhtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEzID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTMpO1xuXHR9KE1hdGgpKTtcblxuXG5cdC8qKiBAcHJlc2VydmVcblx0KGMpIDIwMTIgYnkgQ8OpZHJpYyBNZXNuaWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblx0UmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG5cdCAgICAtIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblx0ICAgIC0gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG5cdFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblx0Ki9cblxuXHQoZnVuY3Rpb24gKE1hdGgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBDb25zdGFudHMgdGFibGVcblx0ICAgIHZhciBfemwgPSBXb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAwLCAgMSwgIDIsICAzLCAgNCwgIDUsICA2LCAgNywgIDgsICA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuXHQgICAgICAgIDcsICA0LCAxMywgIDEsIDEwLCAgNiwgMTUsICAzLCAxMiwgIDAsICA5LCAgNSwgIDIsIDE0LCAxMSwgIDgsXG5cdCAgICAgICAgMywgMTAsIDE0LCAgNCwgIDksIDE1LCAgOCwgIDEsICAyLCAgNywgIDAsICA2LCAxMywgMTEsICA1LCAxMixcblx0ICAgICAgICAxLCAgOSwgMTEsIDEwLCAgMCwgIDgsIDEyLCAgNCwgMTMsICAzLCAgNywgMTUsIDE0LCAgNSwgIDYsICAyLFxuXHQgICAgICAgIDQsICAwLCAgNSwgIDksICA3LCAxMiwgIDIsIDEwLCAxNCwgIDEsICAzLCAgOCwgMTEsICA2LCAxNSwgMTNdKTtcblx0ICAgIHZhciBfenIgPSBXb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICA1LCAxNCwgIDcsICAwLCAgOSwgIDIsIDExLCAgNCwgMTMsICA2LCAxNSwgIDgsICAxLCAxMCwgIDMsIDEyLFxuXHQgICAgICAgIDYsIDExLCAgMywgIDcsICAwLCAxMywgIDUsIDEwLCAxNCwgMTUsICA4LCAxMiwgIDQsICA5LCAgMSwgIDIsXG5cdCAgICAgICAgMTUsICA1LCAgMSwgIDMsICA3LCAxNCwgIDYsICA5LCAxMSwgIDgsIDEyLCAgMiwgMTAsICAwLCAgNCwgMTMsXG5cdCAgICAgICAgOCwgIDYsICA0LCAgMSwgIDMsIDExLCAxNSwgIDAsICA1LCAxMiwgIDIsIDEzLCAgOSwgIDcsIDEwLCAxNCxcblx0ICAgICAgICAxMiwgMTUsIDEwLCAgNCwgIDEsICA1LCAgOCwgIDcsICA2LCAgMiwgMTMsIDE0LCAgMCwgIDMsICA5LCAxMV0pO1xuXHQgICAgdmFyIF9zbCA9IFdvcmRBcnJheS5jcmVhdGUoW1xuXHQgICAgICAgICAxMSwgMTQsIDE1LCAxMiwgIDUsICA4LCAgNywgIDksIDExLCAxMywgMTQsIDE1LCAgNiwgIDcsICA5LCAgOCxcblx0ICAgICAgICA3LCA2LCAgIDgsIDEzLCAxMSwgIDksICA3LCAxNSwgIDcsIDEyLCAxNSwgIDksIDExLCAgNywgMTMsIDEyLFxuXHQgICAgICAgIDExLCAxMywgIDYsICA3LCAxNCwgIDksIDEzLCAxNSwgMTQsICA4LCAxMywgIDYsICA1LCAxMiwgIDcsICA1LFxuXHQgICAgICAgICAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgIDksICA4LCAgOSwgMTQsICA1LCAgNiwgIDgsICA2LCAgNSwgMTIsXG5cdCAgICAgICAgOSwgMTUsICA1LCAxMSwgIDYsICA4LCAxMywgMTIsICA1LCAxMiwgMTMsIDE0LCAxMSwgIDgsICA1LCAgNiBdKTtcblx0ICAgIHZhciBfc3IgPSBXb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICA4LCAgOSwgIDksIDExLCAxMywgMTUsIDE1LCAgNSwgIDcsICA3LCAgOCwgMTEsIDE0LCAxNCwgMTIsICA2LFxuXHQgICAgICAgIDksIDEzLCAxNSwgIDcsIDEyLCAgOCwgIDksIDExLCAgNywgIDcsIDEyLCAgNywgIDYsIDE1LCAxMywgMTEsXG5cdCAgICAgICAgOSwgIDcsIDE1LCAxMSwgIDgsICA2LCAgNiwgMTQsIDEyLCAxMywgIDUsIDE0LCAxMywgMTMsICA3LCAgNSxcblx0ICAgICAgICAxNSwgIDUsICA4LCAxMSwgMTQsIDE0LCAgNiwgMTQsICA2LCAgOSwgMTIsICA5LCAxMiwgIDUsIDE1LCAgOCxcblx0ICAgICAgICA4LCAgNSwgMTIsICA5LCAxMiwgIDUsIDE0LCAgNiwgIDgsIDEzLCAgNiwgIDUsIDE1LCAxMywgMTEsIDExIF0pO1xuXG5cdCAgICB2YXIgX2hsID0gIFdvcmRBcnJheS5jcmVhdGUoWyAweDAwMDAwMDAwLCAweDVBODI3OTk5LCAweDZFRDlFQkExLCAweDhGMUJCQ0RDLCAweEE5NTNGRDRFXSk7XG5cdCAgICB2YXIgX2hyID0gIFdvcmRBcnJheS5jcmVhdGUoWyAweDUwQTI4QkU2LCAweDVDNEREMTI0LCAweDZENzAzRUYzLCAweDdBNkQ3NkU5LCAweDAwMDAwMDAwXSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogUklQRU1EMTYwIGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgUklQRU1EMTYwID0gQ19hbGdvLlJJUEVNRDE2MCA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggID0gV29yZEFycmF5LmNyZWF0ZShbMHg2NzQ1MjMwMSwgMHhFRkNEQUI4OSwgMHg5OEJBRENGRSwgMHgxMDMyNTQ3NiwgMHhDM0QyRTFGMF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaTtcblx0ICAgICAgICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV07XG5cblx0ICAgICAgICAgICAgICAgIC8vIFN3YXBcblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0X2ldID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgOCkgIHwgKE1fb2Zmc2V0X2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCAyNCkgfCAoTV9vZmZzZXRfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBIICA9IHRoaXMuX2hhc2gud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBobCA9IF9obC53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGhyID0gX2hyLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgemwgPSBfemwud29yZHM7XG5cdCAgICAgICAgICAgIHZhciB6ciA9IF96ci53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNsID0gX3NsLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc3IgPSBfc3Iud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgdmFyIGFsLCBibCwgY2wsIGRsLCBlbDtcblx0ICAgICAgICAgICAgdmFyIGFyLCBiciwgY3IsIGRyLCBlcjtcblxuXHQgICAgICAgICAgICBhciA9IGFsID0gSFswXTtcblx0ICAgICAgICAgICAgYnIgPSBibCA9IEhbMV07XG5cdCAgICAgICAgICAgIGNyID0gY2wgPSBIWzJdO1xuXHQgICAgICAgICAgICBkciA9IGRsID0gSFszXTtcblx0ICAgICAgICAgICAgZXIgPSBlbCA9IEhbNF07XG5cdCAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uXG5cdCAgICAgICAgICAgIHZhciB0O1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgICAgIHQgPSAoYWwgKyAgTVtvZmZzZXQremxbaV1dKXwwO1xuXHQgICAgICAgICAgICAgICAgaWYgKGk8MTYpe1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGYxKGJsLGNsLGRsKSArIGhsWzBdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDMyKSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjIoYmwsY2wsZGwpICsgaGxbMV07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NDgpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMyhibCxjbCxkbCkgKyBobFsyXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTw2NCkge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGY0KGJsLGNsLGRsKSArIGhsWzNdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHsvLyBpZiAoaTw4MCkge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGY1KGJsLGNsLGRsKSArIGhsWzRdO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdCA9IHR8MDtcblx0ICAgICAgICAgICAgICAgIHQgPSAgcm90bCh0LHNsW2ldKTtcblx0ICAgICAgICAgICAgICAgIHQgPSAodCtlbCl8MDtcblx0ICAgICAgICAgICAgICAgIGFsID0gZWw7XG5cdCAgICAgICAgICAgICAgICBlbCA9IGRsO1xuXHQgICAgICAgICAgICAgICAgZGwgPSByb3RsKGNsLCAxMCk7XG5cdCAgICAgICAgICAgICAgICBjbCA9IGJsO1xuXHQgICAgICAgICAgICAgICAgYmwgPSB0O1xuXG5cdCAgICAgICAgICAgICAgICB0ID0gKGFyICsgTVtvZmZzZXQrenJbaV1dKXwwO1xuXHQgICAgICAgICAgICAgICAgaWYgKGk8MTYpe1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGY1KGJyLGNyLGRyKSArIGhyWzBdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDMyKSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjQoYnIsY3IsZHIpICsgaHJbMV07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NDgpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMyhicixjcixkcikgKyBoclsyXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTw2NCkge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGYyKGJyLGNyLGRyKSArIGhyWzNdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHsvLyBpZiAoaTw4MCkge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGYxKGJyLGNyLGRyKSArIGhyWzRdO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdCA9IHR8MDtcblx0ICAgICAgICAgICAgICAgIHQgPSAgcm90bCh0LHNyW2ldKSA7XG5cdCAgICAgICAgICAgICAgICB0ID0gKHQrZXIpfDA7XG5cdCAgICAgICAgICAgICAgICBhciA9IGVyO1xuXHQgICAgICAgICAgICAgICAgZXIgPSBkcjtcblx0ICAgICAgICAgICAgICAgIGRyID0gcm90bChjciwgMTApO1xuXHQgICAgICAgICAgICAgICAgY3IgPSBicjtcblx0ICAgICAgICAgICAgICAgIGJyID0gdDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICB0ICAgID0gKEhbMV0gKyBjbCArIGRyKXwwO1xuXHQgICAgICAgICAgICBIWzFdID0gKEhbMl0gKyBkbCArIGVyKXwwO1xuXHQgICAgICAgICAgICBIWzJdID0gKEhbM10gKyBlbCArIGFyKXwwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbNF0gKyBhbCArIGJyKXwwO1xuXHQgICAgICAgICAgICBIWzRdID0gKEhbMF0gKyBibCArIGNyKXwwO1xuXHQgICAgICAgICAgICBIWzBdID0gIHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoXG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsIDw8IDgpICB8IChuQml0c1RvdGFsID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbCA8PCAyNCkgfCAobkJpdHNUb3RhbCA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSAoZGF0YVdvcmRzLmxlbmd0aCArIDEpICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaDtcblx0ICAgICAgICAgICAgdmFyIEggPSBoYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIEhfaSA9IEhbaV07XG5cblx0ICAgICAgICAgICAgICAgIC8vIFN3YXBcblx0ICAgICAgICAgICAgICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblxuXHQgICAgZnVuY3Rpb24gZjEoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKHgpIF4gKHkpIF4gKHopKTtcblxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBmMih4LCB5LCB6KSB7XG5cdCAgICAgICAgcmV0dXJuICgoKHgpJih5KSkgfCAoKH54KSYoeikpKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjMoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKCh4KSB8ICh+KHkpKSkgXiAoeikpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBmNCh4LCB5LCB6KSB7XG5cdCAgICAgICAgcmV0dXJuICgoKHgpICYgKHopKSB8ICgoeSkmKH4oeikpKSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGY1KHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCh4KSBeICgoeSkgfCh+KHopKSkpO1xuXG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHJvdGwoeCxuKSB7XG5cdCAgICAgICAgcmV0dXJuICh4PDxuKSB8ICh4Pj4+KDMyLW4pKTtcblx0ICAgIH1cblxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuUklQRU1EMTYwKCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5SSVBFTUQxNjAod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5SSVBFTUQxNjAgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihSSVBFTUQxNjApO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1JJUEVNRDE2MChtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNSSVBFTUQxNjAgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoUklQRU1EMTYwKTtcblx0fShNYXRoKSk7XG5cblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblx0ICAgIHZhciBVdGY4ID0gQ19lbmMuVXRmODtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8qKlxuXHQgICAgICogSE1BQyBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBITUFDID0gQ19hbGdvLkhNQUMgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIEhNQUMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBobWFjSGFzaGVyID0gQ3J5cHRvSlMuYWxnby5ITUFDLmNyZWF0ZShDcnlwdG9KUy5hbGdvLlNIQTI1Niwga2V5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoaGFzaGVyLCBrZXkpIHtcblx0ICAgICAgICAgICAgLy8gSW5pdCBoYXNoZXJcblx0ICAgICAgICAgICAgaGFzaGVyID0gdGhpcy5faGFzaGVyID0gbmV3IGhhc2hlci5pbml0KCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gV29yZEFycmF5LCBlbHNlIGFzc3VtZSBXb3JkQXJyYXkgYWxyZWFkeVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgICAga2V5ID0gVXRmOC5wYXJzZShrZXkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBoYXNoZXJCbG9ja1NpemUgPSBoYXNoZXIuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgaGFzaGVyQmxvY2tTaXplQnl0ZXMgPSBoYXNoZXJCbG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEFsbG93IGFyYml0cmFyeSBsZW5ndGgga2V5c1xuXHQgICAgICAgICAgICBpZiAoa2V5LnNpZ0J5dGVzID4gaGFzaGVyQmxvY2tTaXplQnl0ZXMpIHtcblx0ICAgICAgICAgICAgICAgIGtleSA9IGhhc2hlci5maW5hbGl6ZShrZXkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHNcblx0ICAgICAgICAgICAga2V5LmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ2xvbmUga2V5IGZvciBpbm5lciBhbmQgb3V0ZXIgcGFkc1xuXHQgICAgICAgICAgICB2YXIgb0tleSA9IHRoaXMuX29LZXkgPSBrZXkuY2xvbmUoKTtcblx0ICAgICAgICAgICAgdmFyIGlLZXkgPSB0aGlzLl9pS2V5ID0ga2V5LmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBvS2V5V29yZHMgPSBvS2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaUtleVdvcmRzID0gaUtleS53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBYT1Iga2V5cyB3aXRoIHBhZCBjb25zdGFudHNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYXNoZXJCbG9ja1NpemU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgb0tleVdvcmRzW2ldIF49IDB4NWM1YzVjNWM7XG5cdCAgICAgICAgICAgICAgICBpS2V5V29yZHNbaV0gXj0gMHgzNjM2MzYzNjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBvS2V5LnNpZ0J5dGVzID0gaUtleS5zaWdCeXRlcyA9IGhhc2hlckJsb2NrU2l6ZUJ5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIEhNQUMgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhtYWNIYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgaGFzaGVyID0gdGhpcy5faGFzaGVyO1xuXG5cdCAgICAgICAgICAgIC8vIFJlc2V0XG5cdCAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAgICBoYXNoZXIudXBkYXRlKHRoaXMuX2lLZXkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVcGRhdGVzIHRoaXMgSE1BQyB3aXRoIGEgbWVzc2FnZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSBUaGUgbWVzc2FnZSB0byBhcHBlbmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtITUFDfSBUaGlzIEhNQUMgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhtYWNIYXNoZXIudXBkYXRlKCdtZXNzYWdlJyk7XG5cdCAgICAgICAgICogICAgIGhtYWNIYXNoZXIudXBkYXRlKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoZXIudXBkYXRlKG1lc3NhZ2VVcGRhdGUpO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBITUFDIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhtYWMgPSBobWFjSGFzaGVyLmZpbmFsaXplKCk7XG5cdCAgICAgICAgICogICAgIHZhciBobWFjID0gaG1hY0hhc2hlci5maW5hbGl6ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGhhc2hlciA9IHRoaXMuX2hhc2hlcjtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIEhNQUNcblx0ICAgICAgICAgICAgdmFyIGlubmVySGFzaCA9IGhhc2hlci5maW5hbGl6ZShtZXNzYWdlVXBkYXRlKTtcblx0ICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICAgIHZhciBobWFjID0gaGFzaGVyLmZpbmFsaXplKHRoaXMuX29LZXkuY2xvbmUoKS5jb25jYXQoaW5uZXJIYXNoKSk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhtYWM7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBTSEExID0gQ19hbGdvLlNIQTE7XG5cdCAgICB2YXIgSE1BQyA9IENfYWxnby5ITUFDO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFBhc3N3b3JkLUJhc2VkIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uIDIgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgUEJLREYyID0gQ19hbGdvLlBCS0RGMiA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGUga2V5IHNpemUgaW4gd29yZHMgdG8gZ2VuZXJhdGUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UuIERlZmF1bHQ6IFNIQTFcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gaXRlcmF0aW9ucyBUaGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdG8gcGVyZm9ybS4gRGVmYXVsdDogMVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICBrZXlTaXplOiAxMjgvMzIsXG5cdCAgICAgICAgICAgIGhhc2hlcjogU0hBMSxcblx0ICAgICAgICAgICAgaXRlcmF0aW9uczogMVxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGUgZGVyaXZhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uUEJLREYyLmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKHsga2V5U2l6ZTogOCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uUEJLREYyLmNyZWF0ZSh7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xuXHQgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb21wdXRlcyB0aGUgUGFzc3dvcmQtQmFzZWQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24gMi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGtleSA9IGtkZi5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb21wdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGNmZyA9IHRoaXMuY2ZnO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXQgSE1BQ1xuXHQgICAgICAgICAgICB2YXIgaG1hYyA9IEhNQUMuY3JlYXRlKGNmZy5oYXNoZXIsIHBhc3N3b3JkKTtcblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZEtleSA9IFdvcmRBcnJheS5jcmVhdGUoKTtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrSW5kZXggPSBXb3JkQXJyYXkuY3JlYXRlKFsweDAwMDAwMDAxXSk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5V29yZHMgPSBkZXJpdmVkS2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tJbmRleFdvcmRzID0gYmxvY2tJbmRleC53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGtleVNpemUgPSBjZmcua2V5U2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBjZmcuaXRlcmF0aW9ucztcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXlcblx0ICAgICAgICAgICAgd2hpbGUgKGRlcml2ZWRLZXlXb3Jkcy5sZW5ndGggPCBrZXlTaXplKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBobWFjLnVwZGF0ZShzYWx0KS5maW5hbGl6ZShibG9ja0luZGV4KTtcblx0ICAgICAgICAgICAgICAgIGhtYWMucmVzZXQoKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgYmxvY2tXb3JkcyA9IGJsb2NrLndvcmRzO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrV29yZHNMZW5ndGggPSBibG9ja1dvcmRzLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAgICAgLy8gSXRlcmF0aW9uc1xuXHQgICAgICAgICAgICAgICAgdmFyIGludGVybWVkaWF0ZSA9IGJsb2NrO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBpbnRlcm1lZGlhdGUgPSBobWFjLmZpbmFsaXplKGludGVybWVkaWF0ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaG1hYy5yZXNldCgpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJtZWRpYXRlV29yZHMgPSBpbnRlcm1lZGlhdGUud29yZHM7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBYT1IgaW50ZXJtZWRpYXRlIHdpdGggYmxvY2tcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJsb2NrV29yZHNMZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBibG9ja1dvcmRzW2pdIF49IGludGVybWVkaWF0ZVdvcmRzW2pdO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgZGVyaXZlZEtleS5jb25jYXQoYmxvY2spO1xuXHQgICAgICAgICAgICAgICAgYmxvY2tJbmRleFdvcmRzWzBdKys7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZGVyaXZlZEtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBkZXJpdmVkS2V5O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIENvbXB1dGVzIHRoZSBQYXNzd29yZC1CYXNlZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbiAyLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC5cblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBjb21wdXRhdGlvbi5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzd29yZCwgc2FsdCk7XG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4IH0pO1xuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5QQktERjIocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcblx0ICAgICAqL1xuXHQgICAgQy5QQktERjIgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGNmZykge1xuXHQgICAgICAgIHJldHVybiBQQktERjIuY3JlYXRlKGNmZykuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cdCAgICB9O1xuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBUaGlzIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIGlzIG1lYW50IHRvIGNvbmZvcm0gd2l0aCBFVlBfQnl0ZXNUb0tleS5cblx0ICAgICAqIHd3dy5vcGVuc3NsLm9yZy9kb2NzL2NyeXB0by9FVlBfQnl0ZXNUb0tleS5odG1sXG5cdCAgICAgKi9cblx0ICAgIHZhciBFdnBLREYgPSBDX2FsZ28uRXZwS0RGID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoZSBrZXkgc2l6ZSBpbiB3b3JkcyB0byBnZW5lcmF0ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLiBEZWZhdWx0OiBNRDVcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gaXRlcmF0aW9ucyBUaGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdG8gcGVyZm9ybS4gRGVmYXVsdDogMVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICBrZXlTaXplOiAxMjgvMzIsXG5cdCAgICAgICAgICAgIGhhc2hlcjogTUQ1LFxuXHQgICAgICAgICAgICBpdGVyYXRpb25zOiAxXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoZSBkZXJpdmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5FdnBLREYuY3JlYXRlKCk7XG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLkV2cEtERi5jcmVhdGUoeyBrZXlTaXplOiA4IH0pO1xuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5FdnBLREYuY3JlYXRlKHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2ZnKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlcml2ZXMgYSBrZXkgZnJvbSBhIHBhc3N3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIga2V5ID0ga2RmLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNvbXB1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCkge1xuXHQgICAgICAgICAgICB2YXIgYmxvY2s7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGNmZyA9IHRoaXMuY2ZnO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXQgaGFzaGVyXG5cdCAgICAgICAgICAgIHZhciBoYXNoZXIgPSBjZmcuaGFzaGVyLmNyZWF0ZSgpO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5ID0gV29yZEFycmF5LmNyZWF0ZSgpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZEtleVdvcmRzID0gZGVyaXZlZEtleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGtleVNpemUgPSBjZmcua2V5U2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBjZmcuaXRlcmF0aW9ucztcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXlcblx0ICAgICAgICAgICAgd2hpbGUgKGRlcml2ZWRLZXlXb3Jkcy5sZW5ndGggPCBrZXlTaXplKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoYmxvY2spIHtcblx0ICAgICAgICAgICAgICAgICAgICBoYXNoZXIudXBkYXRlKGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGJsb2NrID0gaGFzaGVyLnVwZGF0ZShwYXNzd29yZCkuZmluYWxpemUoc2FsdCk7XG5cdCAgICAgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gSXRlcmF0aW9uc1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBibG9jayA9IGhhc2hlci5maW5hbGl6ZShibG9jayk7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGRlcml2ZWRLZXkuY29uY2F0KGJsb2NrKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBkZXJpdmVkS2V5LnNpZ0J5dGVzID0ga2V5U2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGRlcml2ZWRLZXk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRGVyaXZlcyBhIGtleSBmcm9tIGEgcGFzc3dvcmQuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGNvbXB1dGF0aW9uLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuRXZwS0RGKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuRXZwS0RGKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDggfSk7XG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xuXHQgICAgICovXG5cdCAgICBDLkV2cEtERiA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgY2ZnKSB7XG5cdCAgICAgICAgcmV0dXJuIEV2cEtERi5jcmVhdGUoY2ZnKS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgIH07XG5cdH0oKSk7XG5cblxuXHQvKipcblx0ICogQ2lwaGVyIGNvcmUgY29tcG9uZW50cy5cblx0ICovXG5cdENyeXB0b0pTLmxpYi5DaXBoZXIgfHwgKGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQ19saWIuQnVmZmVyZWRCbG9ja0FsZ29yaXRobTtcblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jO1xuXHQgICAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4O1xuXHQgICAgdmFyIEJhc2U2NCA9IENfZW5jLkJhc2U2NDtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERjtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBiYXNlIGNpcGhlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGlzIGNpcGhlcidzIGtleSBzaXplLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpdlNpemUgVGhpcyBjaXBoZXIncyBJViBzaXplLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfRU5DX1hGT1JNX01PREUgQSBjb25zdGFudCByZXByZXNlbnRpbmcgZW5jcnlwdGlvbiBtb2RlLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9ERUNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBkZWNyeXB0aW9uIG1vZGUuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDaXBoZXIgPSBDX2xpYi5DaXBoZXIgPSBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGl2IFRoZSBJViB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoKSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgdGhpcyBjaXBoZXIgaW4gZW5jcnlwdGlvbiBtb2RlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJ9IEEgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlRW5jcnlwdG9yKGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY3JlYXRlRW5jcnlwdG9yOiBmdW5jdGlvbiAoa2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0VOQ19YRk9STV9NT0RFLCBrZXksIGNmZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgdGhpcyBjaXBoZXIgaW4gZGVjcnlwdGlvbiBtb2RlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJ9IEEgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlRGVjcnlwdG9yKGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY3JlYXRlRGVjcnlwdG9yOiBmdW5jdGlvbiAoa2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0RFQ19YRk9STV9NT0RFLCBrZXksIGNmZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBjaXBoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0geGZvcm1Nb2RlIEVpdGhlciB0aGUgZW5jcnlwdGlvbiBvciBkZWNyeXB0aW9uIHRyYW5zb3JtYXRpb24gbW9kZSBjb25zdGFudC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlciA9IENyeXB0b0pTLmFsZ28uQUVTLmNyZWF0ZShDcnlwdG9KUy5hbGdvLkFFUy5fRU5DX1hGT1JNX01PREUsIGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHhmb3JtTW9kZSwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gU3RvcmUgdHJhbnNmb3JtIG1vZGUgYW5kIGtleVxuXHQgICAgICAgICAgICB0aGlzLl94Zm9ybU1vZGUgPSB4Zm9ybU1vZGU7XG5cdCAgICAgICAgICAgIHRoaXMuX2tleSA9IGtleTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBjaXBoZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGNpcGhlci5yZXNldCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGRhdGEgYnVmZmVyXG5cdCAgICAgICAgICAgIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWNpcGhlciBsb2dpY1xuXHQgICAgICAgICAgICB0aGlzLl9kb1Jlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEFkZHMgZGF0YSB0byBiZSBlbmNyeXB0ZWQgb3IgZGVjcnlwdGVkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhVXBkYXRlIFRoZSBkYXRhIHRvIGVuY3J5cHQgb3IgZGVjcnlwdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRhdGEgYWZ0ZXIgcHJvY2Vzc2luZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5wcm9jZXNzKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIucHJvY2Vzcyh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHByb2Nlc3M6IGZ1bmN0aW9uIChkYXRhVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9hcHBlbmQoZGF0YVVwZGF0ZSk7XG5cblx0ICAgICAgICAgICAgLy8gUHJvY2VzcyBhdmFpbGFibGUgYmxvY2tzXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzKCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEZpbmFsaXplcyB0aGUgZW5jcnlwdGlvbiBvciBkZWNyeXB0aW9uIHByb2Nlc3MuXG5cdCAgICAgICAgICogTm90ZSB0aGF0IHRoZSBmaW5hbGl6ZSBvcGVyYXRpb24gaXMgZWZmZWN0aXZlbHkgYSBkZXN0cnVjdGl2ZSwgcmVhZC1vbmNlIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YVVwZGF0ZSBUaGUgZmluYWwgZGF0YSB0byBlbmNyeXB0IG9yIGRlY3J5cHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkYXRhIGFmdGVyIGZpbmFsIHByb2Nlc3NpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSgnZGF0YScpO1xuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChkYXRhVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIEZpbmFsIGRhdGEgdXBkYXRlXG5cdCAgICAgICAgICAgIGlmIChkYXRhVXBkYXRlKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmQoZGF0YVVwZGF0ZSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWNpcGhlciBsb2dpY1xuXHQgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWREYXRhID0gdGhpcy5fZG9GaW5hbGl6ZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBmaW5hbFByb2Nlc3NlZERhdGE7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDEyOC8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgX0VOQ19YRk9STV9NT0RFOiAxLFxuXG5cdCAgICAgICAgX0RFQ19YRk9STV9NT0RFOiAyLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBzaG9ydGN1dCBmdW5jdGlvbnMgdG8gYSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIHRvIGNyZWF0ZSBhIGhlbHBlciBmb3IuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIGVuY3J5cHQgYW5kIGRlY3J5cHQgc2hvcnRjdXQgZnVuY3Rpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgQUVTID0gQ3J5cHRvSlMubGliLkNpcGhlci5fY3JlYXRlSGVscGVyKENyeXB0b0pTLmFsZ28uQUVTKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfY3JlYXRlSGVscGVyOiAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBzZWxlY3RDaXBoZXJTdHJhdGVneShrZXkpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBhc3N3b3JkQmFzZWRDaXBoZXI7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBTZXJpYWxpemFibGVDaXBoZXI7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNpcGhlcikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgICAgICBlbmNyeXB0OiBmdW5jdGlvbiAobWVzc2FnZSwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZW5jcnlwdChjaXBoZXIsIG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAgICAgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgICAgICAgICAgZGVjcnlwdDogZnVuY3Rpb24gKGNpcGhlcnRleHQsIGtleSwgY2ZnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RDaXBoZXJTdHJhdGVneShrZXkpLmRlY3J5cHQoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9KCkpXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBiYXNlIHN0cmVhbSBjaXBoZXIgdGVtcGxhdGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGNpcGhlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogMSAoMzIgYml0cylcblx0ICAgICAqL1xuXHQgICAgdmFyIFN0cmVhbUNpcGhlciA9IENfbGliLlN0cmVhbUNpcGhlciA9IENpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFByb2Nlc3MgcGFydGlhbCBibG9ja3Ncblx0ICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBmaW5hbFByb2Nlc3NlZEJsb2Nrcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBNb2RlIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfbW9kZSA9IEMubW9kZSA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2UgYmxvY2sgY2lwaGVyIG1vZGUgdGVtcGxhdGUuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCbG9ja0NpcGhlck1vZGUgPSBDX2xpYi5CbG9ja0NpcGhlck1vZGUgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIG1vZGUgZm9yIGVuY3J5cHRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5jcmVhdGVFbmNyeXB0b3IoY2lwaGVyLCBpdi53b3Jkcyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY3JlYXRlRW5jcnlwdG9yOiBmdW5jdGlvbiAoY2lwaGVyLCBpdikge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5FbmNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZGVjcnlwdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZURlY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVEZWNyeXB0b3I6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLkRlY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdik7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBtb2RlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuRW5jcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2LndvcmRzKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyLCBpdikge1xuXHQgICAgICAgICAgICB0aGlzLl9jaXBoZXIgPSBjaXBoZXI7XG5cdCAgICAgICAgICAgIHRoaXMuX2l2ID0gaXY7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQ2lwaGVyIEJsb2NrIENoYWluaW5nIG1vZGUuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDQkMgPSBDX21vZGUuQ0JDID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBYnN0cmFjdCBiYXNlIENCQyBtb2RlLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHZhciBDQkMgPSBCbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7XG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDQkMgZW5jcnlwdG9yLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIENCQy5FbmNyeXB0b3IgPSBDQkMuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIFByb2Nlc3NlcyB0aGUgZGF0YSBibG9jayBhdCBvZmZzZXQuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIFRoZSBkYXRhIHdvcmRzIHRvIG9wZXJhdGUgb24uXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCB3aGVyZSB0aGUgYmxvY2sgc3RhcnRzLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgbW9kZS5wcm9jZXNzQmxvY2soZGF0YS53b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjtcblx0ICAgICAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBYT1IgYW5kIGVuY3J5cHRcblx0ICAgICAgICAgICAgICAgIHhvckJsb2NrLmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplKTtcblx0ICAgICAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDQkMgZGVjcnlwdG9yLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIENCQy5EZWNyeXB0b3IgPSBDQkMuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIFByb2Nlc3NlcyB0aGUgZGF0YSBibG9jayBhdCBvZmZzZXQuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIFRoZSBkYXRhIHdvcmRzIHRvIG9wZXJhdGUgb24uXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCB3aGVyZSB0aGUgYmxvY2sgc3RhcnRzLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgbW9kZS5wcm9jZXNzQmxvY2soZGF0YS53b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjtcblx0ICAgICAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcblx0ICAgICAgICAgICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIERlY3J5cHQgYW5kIFhPUlxuXHQgICAgICAgICAgICAgICAgY2lwaGVyLmRlY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICAgIHhvckJsb2NrLmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVGhpcyBibG9jayBiZWNvbWVzIHRoZSBwcmV2aW91cyBibG9ja1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gdGhpc0Jsb2NrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICBmdW5jdGlvbiB4b3JCbG9jayh3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpIHtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXG5cdCAgICAgICAgICAgIC8vIENob29zZSBtaXhpbmcgYmxvY2tcblx0ICAgICAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgICAgICBibG9jayA9IGl2O1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrID0gdGhpcy5fcHJldkJsb2NrO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gWE9SIGJsb2Nrc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBibG9ja1tpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBDQkM7XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFBhZGRpbmcgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19wYWQgPSBDLnBhZCA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFBLQ1MgIzUvNyBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgUGtjczcgPSBDX3BhZC5Qa2NzNyA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBQYWRzIGRhdGEgdXNpbmcgdGhlIGFsZ29yaXRobSBkZWZpbmVkIGluIFBLQ1MgIzUvNy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBkYXRhIFRoZSBkYXRhIHRvIHBhZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gYmxvY2tTaXplIFRoZSBtdWx0aXBsZSB0aGF0IHRoZSBkYXRhIHNob3VsZCBiZSBwYWRkZWQgdG8uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIENyeXB0b0pTLnBhZC5Qa2NzNy5wYWQod29yZEFycmF5LCA0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBDb3VudCBwYWRkaW5nIGJ5dGVzXG5cdCAgICAgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gYmxvY2tTaXplQnl0ZXMgLSBkYXRhLnNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIHBhZGRpbmcgd29yZFxuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ1dvcmQgPSAoblBhZGRpbmdCeXRlcyA8PCAyNCkgfCAoblBhZGRpbmdCeXRlcyA8PCAxNikgfCAoblBhZGRpbmdCeXRlcyA8PCA4KSB8IG5QYWRkaW5nQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIHBhZGRpbmdcblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmdXb3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5QYWRkaW5nQnl0ZXM7IGkgKz0gNCkge1xuXHQgICAgICAgICAgICAgICAgcGFkZGluZ1dvcmRzLnB1c2gocGFkZGluZ1dvcmQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nID0gV29yZEFycmF5LmNyZWF0ZShwYWRkaW5nV29yZHMsIG5QYWRkaW5nQnl0ZXMpO1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGEuY29uY2F0KHBhZGRpbmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVbnBhZHMgZGF0YSB0aGF0IGhhZCBiZWVuIHBhZGRlZCB1c2luZyB0aGUgYWxnb3JpdGhtIGRlZmluZWQgaW4gUEtDUyAjNS83LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGRhdGEgVGhlIGRhdGEgdG8gdW5wYWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIENyeXB0b0pTLnBhZC5Qa2NzNy51bnBhZCh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcblx0ICAgICAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBkYXRhLndvcmRzWyhkYXRhLnNpZ0J5dGVzIC0gMSkgPj4+IDJdICYgMHhmZjtcblxuXHQgICAgICAgICAgICAvLyBSZW1vdmUgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBiYXNlIGJsb2NrIGNpcGhlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgY2lwaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAqL1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXIgPSBDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge01vZGV9IG1vZGUgVGhlIGJsb2NrIG1vZGUgdG8gdXNlLiBEZWZhdWx0OiBDQkNcblx0ICAgICAgICAgKiBAcHJvcGVydHkge1BhZGRpbmd9IHBhZGRpbmcgVGhlIHBhZGRpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBQa2NzN1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQ2lwaGVyLmNmZy5leHRlbmQoe1xuXHQgICAgICAgICAgICBtb2RlOiBDQkMsXG5cdCAgICAgICAgICAgIHBhZGRpbmc6IFBrY3M3XG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgbW9kZUNyZWF0b3I7XG5cblx0ICAgICAgICAgICAgLy8gUmVzZXQgY2lwaGVyXG5cdCAgICAgICAgICAgIENpcGhlci5yZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2ZnID0gdGhpcy5jZmc7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IGNmZy5pdjtcblx0ICAgICAgICAgICAgdmFyIG1vZGUgPSBjZmcubW9kZTtcblxuXHQgICAgICAgICAgICAvLyBSZXNldCBibG9jayBtb2RlXG5cdCAgICAgICAgICAgIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fRU5DX1hGT1JNX01PREUpIHtcblx0ICAgICAgICAgICAgICAgIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVFbmNyeXB0b3I7XG5cdCAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0RFQ19YRk9STV9NT0RFKSAqLyB7XG5cdCAgICAgICAgICAgICAgICBtb2RlQ3JlYXRvciA9IG1vZGUuY3JlYXRlRGVjcnlwdG9yO1xuXHQgICAgICAgICAgICAgICAgLy8gS2VlcCBhdCBsZWFzdCBvbmUgYmxvY2sgaW4gdGhlIGJ1ZmZlciBmb3IgdW5wYWRkaW5nXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9taW5CdWZmZXJTaXplID0gMTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9tb2RlICYmIHRoaXMuX21vZGUuX19jcmVhdG9yID09IG1vZGVDcmVhdG9yKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb2RlLmluaXQodGhpcywgaXYgJiYgaXYud29yZHMpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fbW9kZSA9IG1vZGVDcmVhdG9yLmNhbGwobW9kZSwgdGhpcywgaXYgJiYgaXYud29yZHMpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fbW9kZS5fX2NyZWF0b3IgPSBtb2RlQ3JlYXRvcjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX21vZGUucHJvY2Vzc0Jsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3M7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSB0aGlzLmNmZy5wYWRkaW5nO1xuXG5cdCAgICAgICAgICAgIC8vIEZpbmFsaXplXG5cdCAgICAgICAgICAgIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fRU5DX1hGT1JNX01PREUpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFBhZCBkYXRhXG5cdCAgICAgICAgICAgICAgICBwYWRkaW5nLnBhZCh0aGlzLl9kYXRhLCB0aGlzLmJsb2NrU2l6ZSk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICBmaW5hbFByb2Nlc3NlZEJsb2NrcyA9IHRoaXMuX3Byb2Nlc3MoISEnZmx1c2gnKTtcblx0ICAgICAgICAgICAgfSBlbHNlIC8qIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fREVDX1hGT1JNX01PREUpICovIHtcblx0ICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICBmaW5hbFByb2Nlc3NlZEJsb2NrcyA9IHRoaXMuX3Byb2Nlc3MoISEnZmx1c2gnKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVW5wYWQgZGF0YVxuXHQgICAgICAgICAgICAgICAgcGFkZGluZy51bnBhZChmaW5hbFByb2Nlc3NlZEJsb2Nrcyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWRCbG9ja3M7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIGNvbGxlY3Rpb24gb2YgY2lwaGVyIHBhcmFtZXRlcnMuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGNpcGhlcnRleHQgVGhlIHJhdyBjaXBoZXJ0ZXh0LlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGtleSBUaGUga2V5IHRvIHRoaXMgY2lwaGVydGV4dC5cblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBpdiBUaGUgSVYgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi5cblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBzYWx0IFRoZSBzYWx0IHVzZWQgd2l0aCBhIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtDaXBoZXJ9IGFsZ29yaXRobSBUaGUgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqIEBwcm9wZXJ0eSB7TW9kZX0gbW9kZSBUaGUgYmxvY2sgbW9kZSB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtQYWRkaW5nfSBwYWRkaW5nIFRoZSBwYWRkaW5nIHNjaGVtZSB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgYmxvY2sgc2l6ZSBvZiB0aGUgY2lwaGVyLlxuXHQgICAgICogQHByb3BlcnR5IHtGb3JtYXR9IGZvcm1hdHRlciBUaGUgZGVmYXVsdCBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIGNvbnZlcnQgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy5cblx0ICAgICAqL1xuXHQgICAgdmFyIENpcGhlclBhcmFtcyA9IENfbGliLkNpcGhlclBhcmFtcyA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2lwaGVyUGFyYW1zIEFuIG9iamVjdCB3aXRoIGFueSBvZiB0aGUgcG9zc2libGUgY2lwaGVyIHBhcmFtZXRlcnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XG5cdCAgICAgICAgICogICAgICAgICBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAga2V5OiBrZXlXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBpdjogaXZXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBzYWx0OiBzYWx0V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAgYWxnb3JpdGhtOiBDcnlwdG9KUy5hbGdvLkFFUyxcblx0ICAgICAgICAgKiAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxuXHQgICAgICAgICAqICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBLQ1M3LFxuXHQgICAgICAgICAqICAgICAgICAgYmxvY2tTaXplOiA0LFxuXHQgICAgICAgICAqICAgICAgICAgZm9ybWF0dGVyOiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTFxuXHQgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XG5cdCAgICAgICAgICAgIHRoaXMubWl4SW4oY2lwaGVyUGFyYW1zKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Rm9ybWF0fSBmb3JtYXR0ZXIgKE9wdGlvbmFsKSBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byB1c2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCBjaXBoZXIgcGFyYW1zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHRocm93cyBFcnJvciBJZiBuZWl0aGVyIHRoZSBmb3JtYXR0ZXIgbm9yIHRoZSBkZWZhdWx0IGZvcm1hdHRlciBpcyBzZXQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMgKyAnJztcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcy50b1N0cmluZygpO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKGZvcm1hdHRlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gKGZvcm1hdHRlciB8fCB0aGlzLmZvcm1hdHRlcikuc3RyaW5naWZ5KHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEZvcm1hdCBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2Zvcm1hdCA9IEMuZm9ybWF0ID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogT3BlblNTTCBmb3JtYXR0aW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgT3BlblNTTEZvcm1hdHRlciA9IENfZm9ybWF0Lk9wZW5TU0wgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhbiBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgb3BlblNTTFN0cmluZyA9IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMLnN0cmluZ2lmeShjaXBoZXJQYXJhbXMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykge1xuXHQgICAgICAgICAgICB2YXIgd29yZEFycmF5O1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGNpcGhlclBhcmFtcy5jaXBoZXJ0ZXh0O1xuXHQgICAgICAgICAgICB2YXIgc2FsdCA9IGNpcGhlclBhcmFtcy5zYWx0O1xuXG5cdCAgICAgICAgICAgIC8vIEZvcm1hdFxuXHQgICAgICAgICAgICBpZiAoc2FsdCkge1xuXHQgICAgICAgICAgICAgICAgd29yZEFycmF5ID0gV29yZEFycmF5LmNyZWF0ZShbMHg1MzYxNmM3NCwgMHg2NTY0NWY1Zl0pLmNvbmNhdChzYWx0KS5jb25jYXQoY2lwaGVydGV4dCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB3b3JkQXJyYXkgPSBjaXBoZXJ0ZXh0O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHdvcmRBcnJheS50b1N0cmluZyhCYXNlNjQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhbiBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nIHRvIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3BlblNTTFN0ciBUaGUgT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wucGFyc2Uob3BlblNTTFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChvcGVuU1NMU3RyKSB7XG5cdCAgICAgICAgICAgIHZhciBzYWx0O1xuXG5cdCAgICAgICAgICAgIC8vIFBhcnNlIGJhc2U2NFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IEJhc2U2NC5wYXJzZShvcGVuU1NMU3RyKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dFdvcmRzID0gY2lwaGVydGV4dC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBUZXN0IGZvciBzYWx0XG5cdCAgICAgICAgICAgIGlmIChjaXBoZXJ0ZXh0V29yZHNbMF0gPT0gMHg1MzYxNmM3NCAmJiBjaXBoZXJ0ZXh0V29yZHNbMV0gPT0gMHg2NTY0NWY1Zikge1xuXHQgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBzYWx0XG5cdCAgICAgICAgICAgICAgICBzYWx0ID0gV29yZEFycmF5LmNyZWF0ZShjaXBoZXJ0ZXh0V29yZHMuc2xpY2UoMiwgNCkpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgc2FsdCBmcm9tIGNpcGhlcnRleHRcblx0ICAgICAgICAgICAgICAgIGNpcGhlcnRleHRXb3Jkcy5zcGxpY2UoMCwgNCk7XG5cdCAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0LnNpZ0J5dGVzIC09IDE2O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0LCBzYWx0OiBzYWx0IH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQSBjaXBoZXIgd3JhcHBlciB0aGF0IHJldHVybnMgY2lwaGVydGV4dCBhcyBhIHNlcmlhbGl6YWJsZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNlcmlhbGl6YWJsZUNpcGhlciA9IENfbGliLlNlcmlhbGl6YWJsZUNpcGhlciA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge0Zvcm1hdHRlcn0gZm9ybWF0IFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIGNvbnZlcnQgY2lwaGVyIHBhcmFtIG9iamVjdHMgdG8gYW5kIGZyb20gYSBzdHJpbmcuIERlZmF1bHQ6IE9wZW5TU0xcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgZm9ybWF0OiBPcGVuU1NMRm9ybWF0dGVyXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZW5jcnlwdC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gQSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCBrZXksIHsgaXY6IGl2IH0pO1xuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBlbmNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBtZXNzYWdlLCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICB2YXIgZW5jcnlwdG9yID0gY2lwaGVyLmNyZWF0ZUVuY3J5cHRvcihrZXksIGNmZyk7XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gZW5jcnlwdG9yLmZpbmFsaXplKG1lc3NhZ2UpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJDZmcgPSBlbmNyeXB0b3IuY2ZnO1xuXG5cdCAgICAgICAgICAgIC8vIENyZWF0ZSBhbmQgcmV0dXJuIHNlcmlhbGl6YWJsZSBjaXBoZXIgcGFyYW1zXG5cdCAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHtcblx0ICAgICAgICAgICAgICAgIGNpcGhlcnRleHQ6IGNpcGhlcnRleHQsXG5cdCAgICAgICAgICAgICAgICBrZXk6IGtleSxcblx0ICAgICAgICAgICAgICAgIGl2OiBjaXBoZXJDZmcuaXYsXG5cdCAgICAgICAgICAgICAgICBhbGdvcml0aG06IGNpcGhlcixcblx0ICAgICAgICAgICAgICAgIG1vZGU6IGNpcGhlckNmZy5tb2RlLFxuXHQgICAgICAgICAgICAgICAgcGFkZGluZzogY2lwaGVyQ2ZnLnBhZGRpbmcsXG5cdCAgICAgICAgICAgICAgICBibG9ja1NpemU6IGNpcGhlci5ibG9ja1NpemUsXG5cdCAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGNmZy5mb3JtYXRcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlY3J5cHRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfHN0cmluZ30gY2lwaGVydGV4dCBUaGUgY2lwaGVydGV4dCB0byBkZWNyeXB0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcGxhaW50ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5kZWNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBmb3JtYXR0ZWRDaXBoZXJ0ZXh0LCBrZXksIHsgaXY6IGl2LCBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5kZWNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBjaXBoZXJ0ZXh0UGFyYW1zLCBrZXksIHsgaXY6IGl2LCBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIGNpcGhlcnRleHQsIGtleSwgY2ZnKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xuXHQgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBDaXBoZXJQYXJhbXNcblx0ICAgICAgICAgICAgY2lwaGVydGV4dCA9IHRoaXMuX3BhcnNlKGNpcGhlcnRleHQsIGNmZy5mb3JtYXQpO1xuXG5cdCAgICAgICAgICAgIC8vIERlY3J5cHRcblx0ICAgICAgICAgICAgdmFyIHBsYWludGV4dCA9IGNpcGhlci5jcmVhdGVEZWNyeXB0b3Ioa2V5LCBjZmcpLmZpbmFsaXplKGNpcGhlcnRleHQuY2lwaGVydGV4dCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHBsYWludGV4dDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0IHRvIENpcGhlclBhcmFtcyxcblx0ICAgICAgICAgKiBlbHNlIGFzc3VtZWQgQ2lwaGVyUGFyYW1zIGFscmVhZHkgYW5kIHJldHVybnMgY2lwaGVydGV4dCB1bmNoYW5nZWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtGb3JtYXR0ZXJ9IGZvcm1hdCBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byB1c2UgdG8gcGFyc2Ugc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBUaGUgdW5zZXJpYWxpemVkIGNpcGhlcnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5fcGFyc2UoY2lwaGVydGV4dFN0cmluZ09yUGFyYW1zLCBmb3JtYXQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9wYXJzZTogZnVuY3Rpb24gKGNpcGhlcnRleHQsIGZvcm1hdCkge1xuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGNpcGhlcnRleHQgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQucGFyc2UoY2lwaGVydGV4dCwgdGhpcyk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gY2lwaGVydGV4dDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfa2RmID0gQy5rZGYgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBPcGVuU1NMIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICovXG5cdCAgICB2YXIgT3BlblNTTEtkZiA9IENfa2RmLk9wZW5TU0wgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRGVyaXZlcyBhIGtleSBhbmQgSVYgZnJvbSBhIHBhc3N3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZCB0byBkZXJpdmUgZnJvbS5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0ga2V5U2l6ZSBUaGUgc2l6ZSBpbiB3b3JkcyBvZiB0aGUga2V5IHRvIGdlbmVyYXRlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpdlNpemUgVGhlIHNpemUgaW4gd29yZHMgb2YgdGhlIElWIHRvIGdlbmVyYXRlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCAoT3B0aW9uYWwpIEEgNjQtYml0IHNhbHQgdG8gdXNlLiBJZiBvbWl0dGVkLCBhIHNhbHQgd2lsbCBiZSBnZW5lcmF0ZWQgcmFuZG9tbHkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3Qgd2l0aCB0aGUga2V5LCBJViwgYW5kIHNhbHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBkZXJpdmVkUGFyYW1zID0gQ3J5cHRvSlMua2RmLk9wZW5TU0wuZXhlY3V0ZSgnUGFzc3dvcmQnLCAyNTYvMzIsIDEyOC8zMik7XG5cdCAgICAgICAgICogICAgIHZhciBkZXJpdmVkUGFyYW1zID0gQ3J5cHRvSlMua2RmLk9wZW5TU0wuZXhlY3V0ZSgnUGFzc3dvcmQnLCAyNTYvMzIsIDEyOC8zMiwgJ3NhbHRzYWx0Jyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZXhlY3V0ZTogZnVuY3Rpb24gKHBhc3N3b3JkLCBrZXlTaXplLCBpdlNpemUsIHNhbHQpIHtcblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgcmFuZG9tIHNhbHRcblx0ICAgICAgICAgICAgaWYgKCFzYWx0KSB7XG5cdCAgICAgICAgICAgICAgICBzYWx0ID0gV29yZEFycmF5LnJhbmRvbSg2NC84KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIERlcml2ZSBrZXkgYW5kIElWXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSBFdnBLREYuY3JlYXRlKHsga2V5U2l6ZToga2V5U2l6ZSArIGl2U2l6ZSB9KS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblxuXHQgICAgICAgICAgICAvLyBTZXBhcmF0ZSBrZXkgYW5kIElWXG5cdCAgICAgICAgICAgIHZhciBpdiA9IFdvcmRBcnJheS5jcmVhdGUoa2V5LndvcmRzLnNsaWNlKGtleVNpemUpLCBpdlNpemUgKiA0KTtcblx0ICAgICAgICAgICAga2V5LnNpZ0J5dGVzID0ga2V5U2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIHBhcmFtc1xuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7IGtleToga2V5LCBpdjogaXYsIHNhbHQ6IHNhbHQgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIHNlcmlhbGl6YWJsZSBjaXBoZXIgd3JhcHBlciB0aGF0IGRlcml2ZXMgdGhlIGtleSBmcm9tIGEgcGFzc3dvcmQsXG5cdCAgICAgKiBhbmQgcmV0dXJucyBjaXBoZXJ0ZXh0IGFzIGEgc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICovXG5cdCAgICB2YXIgUGFzc3dvcmRCYXNlZENpcGhlciA9IENfbGliLlBhc3N3b3JkQmFzZWRDaXBoZXIgPSBTZXJpYWxpemFibGVDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge0tERn0ga2RmIFRoZSBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiB0byB1c2UgdG8gZ2VuZXJhdGUgYSBrZXkgYW5kIElWIGZyb20gYSBwYXNzd29yZC4gRGVmYXVsdDogT3BlblNTTFxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogU2VyaWFsaXphYmxlQ2lwaGVyLmNmZy5leHRlbmQoe1xuXHQgICAgICAgICAgICBrZGY6IE9wZW5TU0xLZGZcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEVuY3J5cHRzIGEgbWVzc2FnZSB1c2luZyBhIHBhc3N3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGVuY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsICdwYXNzd29yZCcpO1xuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBlbmNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBtZXNzYWdlLCBwYXNzd29yZCwgY2ZnKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xuXHQgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBvdGhlciBwYXJhbXNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBjZmcua2RmLmV4ZWN1dGUocGFzc3dvcmQsIGNpcGhlci5rZXlTaXplLCBjaXBoZXIuaXZTaXplKTtcblxuXHQgICAgICAgICAgICAvLyBBZGQgSVYgdG8gY29uZmlnXG5cdCAgICAgICAgICAgIGNmZy5pdiA9IGRlcml2ZWRQYXJhbXMuaXY7XG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IFNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0LmNhbGwodGhpcywgY2lwaGVyLCBtZXNzYWdlLCBkZXJpdmVkUGFyYW1zLmtleSwgY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBNaXggaW4gZGVyaXZlZCBwYXJhbXNcblx0ICAgICAgICAgICAgY2lwaGVydGV4dC5taXhJbihkZXJpdmVkUGFyYW1zKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2lwaGVydGV4dDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRGVjcnlwdHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0IHVzaW5nIGEgcGFzc3dvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQgdG8gZGVjcnlwdC5cblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBwbGFpbnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBwbGFpbnRleHQgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5kZWNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBmb3JtYXR0ZWRDaXBoZXJ0ZXh0LCAncGFzc3dvcmQnLCB7IGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICogICAgIHZhciBwbGFpbnRleHQgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5kZWNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBjaXBoZXJ0ZXh0UGFyYW1zLCAncGFzc3dvcmQnLCB7IGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZGVjcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgY2lwaGVydGV4dCwgcGFzc3dvcmQsIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gQ2lwaGVyUGFyYW1zXG5cdCAgICAgICAgICAgIGNpcGhlcnRleHQgPSB0aGlzLl9wYXJzZShjaXBoZXJ0ZXh0LCBjZmcuZm9ybWF0KTtcblxuXHQgICAgICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBvdGhlciBwYXJhbXNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBjZmcua2RmLmV4ZWN1dGUocGFzc3dvcmQsIGNpcGhlci5rZXlTaXplLCBjaXBoZXIuaXZTaXplLCBjaXBoZXJ0ZXh0LnNhbHQpO1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBJViB0byBjb25maWdcblx0ICAgICAgICAgICAgY2ZnLml2ID0gZGVyaXZlZFBhcmFtcy5pdjtcblxuXHQgICAgICAgICAgICAvLyBEZWNyeXB0XG5cdCAgICAgICAgICAgIHZhciBwbGFpbnRleHQgPSBTZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdC5jYWxsKHRoaXMsIGNpcGhlciwgY2lwaGVydGV4dCwgZGVyaXZlZFBhcmFtcy5rZXksIGNmZyk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHBsYWludGV4dDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fSgpKTtcblxuXG5cdC8qKlxuXHQgKiBDaXBoZXIgRmVlZGJhY2sgYmxvY2sgbW9kZS5cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuQ0ZCID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBDRkIgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICBDRkIuRW5jcnlwdG9yID0gQ0ZCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1BbmRFbmNyeXB0LmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpO1xuXG5cdCAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xuXHQgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIENGQi5EZWNyeXB0b3IgPSBDRkIuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTtcblxuXHQgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcblx0ICAgICAgICAgICAgdmFyIHRoaXNCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICBnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQuY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUsIGNpcGhlcik7XG5cblx0ICAgICAgICAgICAgLy8gVGhpcyBibG9jayBiZWNvbWVzIHRoZSBwcmV2aW91cyBibG9ja1xuXHQgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB0aGlzQmxvY2s7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIGdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdCh3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUsIGNpcGhlcikge1xuXHQgICAgICAgIHZhciBrZXlzdHJlYW07XG5cblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXG5cdCAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgIGtleXN0cmVhbSA9IGl2LnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAga2V5c3RyZWFtID0gdGhpcy5fcHJldkJsb2NrO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7XG5cblx0ICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1NpemU7IGkrKykge1xuXHQgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gQ0ZCO1xuXHR9KCkpO1xuXG5cblx0LyoqXG5cdCAqIENvdW50ZXIgYmxvY2sgbW9kZS5cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuQ1RSID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBDVFIgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICB2YXIgRW5jcnlwdG9yID0gQ1RSLkVuY3J5cHRvciA9IENUUi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXHQgICAgICAgICAgICB2YXIgY291bnRlciA9IHRoaXMuX2NvdW50ZXI7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgY291bnRlciA9IHRoaXMuX2NvdW50ZXIgPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIGtleXN0cmVhbSA9IGNvdW50ZXIuc2xpY2UoMCk7XG5cdCAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgICAgICAvLyBJbmNyZW1lbnQgY291bnRlclxuXHQgICAgICAgICAgICBjb3VudGVyW2Jsb2NrU2l6ZSAtIDFdID0gKGNvdW50ZXJbYmxvY2tTaXplIC0gMV0gKyAxKSB8IDBcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBDVFIuRGVjcnlwdG9yID0gRW5jcnlwdG9yO1xuXG5cdCAgICByZXR1cm4gQ1RSO1xuXHR9KCkpO1xuXG5cblx0LyoqIEBwcmVzZXJ2ZVxuXHQgKiBDb3VudGVyIGJsb2NrIG1vZGUgY29tcGF0aWJsZSB3aXRoICBEciBCcmlhbiBHbGFkbWFuIGZpbGVlbmMuY1xuXHQgKiBkZXJpdmVkIGZyb20gQ3J5cHRvSlMubW9kZS5DVFJcblx0ICogSmFuIEhydWJ5IGpocnVieS53ZWJAZ21haWwuY29tXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkNUUkdsYWRtYW4gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIENUUkdsYWRtYW4gPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdFx0ZnVuY3Rpb24gaW5jV29yZCh3b3JkKVxuXHRcdHtcblx0XHRcdGlmICgoKHdvcmQgPj4gMjQpICYgMHhmZikgPT09IDB4ZmYpIHsgLy9vdmVyZmxvd1xuXHRcdFx0dmFyIGIxID0gKHdvcmQgPj4gMTYpJjB4ZmY7XG5cdFx0XHR2YXIgYjIgPSAod29yZCA+PiA4KSYweGZmO1xuXHRcdFx0dmFyIGIzID0gd29yZCAmIDB4ZmY7XG5cblx0XHRcdGlmIChiMSA9PT0gMHhmZikgLy8gb3ZlcmZsb3cgYjFcblx0XHRcdHtcblx0XHRcdGIxID0gMDtcblx0XHRcdGlmIChiMiA9PT0gMHhmZilcblx0XHRcdHtcblx0XHRcdFx0YjIgPSAwO1xuXHRcdFx0XHRpZiAoYjMgPT09IDB4ZmYpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRiMyA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0KytiMztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQrK2IyO1xuXHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0KytiMTtcblx0XHRcdH1cblxuXHRcdFx0d29yZCA9IDA7XG5cdFx0XHR3b3JkICs9IChiMSA8PCAxNik7XG5cdFx0XHR3b3JkICs9IChiMiA8PCA4KTtcblx0XHRcdHdvcmQgKz0gYjM7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHR3b3JkICs9ICgweDAxIDw8IDI0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB3b3JkO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGluY0NvdW50ZXIoY291bnRlcilcblx0XHR7XG5cdFx0XHRpZiAoKGNvdW50ZXJbMF0gPSBpbmNXb3JkKGNvdW50ZXJbMF0pKSA9PT0gMClcblx0XHRcdHtcblx0XHRcdFx0Ly8gZW5jcl9kYXRhIGluIGZpbGVlbmMuYyBmcm9tICBEciBCcmlhbiBHbGFkbWFuJ3MgY291bnRzIG9ubHkgd2l0aCBEV09SRCBqIDwgOFxuXHRcdFx0XHRjb3VudGVyWzFdID0gaW5jV29yZChjb3VudGVyWzFdKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjb3VudGVyO1xuXHRcdH1cblxuXHQgICAgdmFyIEVuY3J5cHRvciA9IENUUkdsYWRtYW4uRW5jcnlwdG9yID0gQ1RSR2xhZG1hbi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXHQgICAgICAgICAgICB2YXIgY291bnRlciA9IHRoaXMuX2NvdW50ZXI7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgY291bnRlciA9IHRoaXMuX2NvdW50ZXIgPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblxuXHRcdFx0XHRpbmNDb3VudGVyKGNvdW50ZXIpO1xuXG5cdFx0XHRcdHZhciBrZXlzdHJlYW0gPSBjb3VudGVyLnNsaWNlKDApO1xuXHQgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgQ1RSR2xhZG1hbi5EZWNyeXB0b3IgPSBFbmNyeXB0b3I7XG5cblx0ICAgIHJldHVybiBDVFJHbGFkbWFuO1xuXHR9KCkpO1xuXG5cblxuXG5cdC8qKlxuXHQgKiBPdXRwdXQgRmVlZGJhY2sgYmxvY2sgbW9kZS5cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuT0ZCID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBPRkIgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICB2YXIgRW5jcnlwdG9yID0gT0ZCLkVuY3J5cHRvciA9IE9GQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXHQgICAgICAgICAgICB2YXIga2V5c3RyZWFtID0gdGhpcy5fa2V5c3RyZWFtO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbVxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIGtleXN0cmVhbSA9IHRoaXMuX2tleXN0cmVhbSA9IGl2LnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgT0ZCLkRlY3J5cHRvciA9IEVuY3J5cHRvcjtcblxuXHQgICAgcmV0dXJuIE9GQjtcblx0fSgpKTtcblxuXG5cdC8qKlxuXHQgKiBFbGVjdHJvbmljIENvZGVib29rIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkVDQiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgRUNCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgRUNCLkVuY3J5cHRvciA9IEVDQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgRUNCLkRlY3J5cHRvciA9IEVDQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2lwaGVyLmRlY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgcmV0dXJuIEVDQjtcblx0fSgpKTtcblxuXG5cdC8qKlxuXHQgKiBBTlNJIFguOTIzIHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuQW5zaVg5MjMgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgZGF0YVNpZ0J5dGVzID0gZGF0YS5zaWdCeXRlcztcblx0ICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgLy8gQ291bnQgcGFkZGluZyBieXRlc1xuXHQgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gYmxvY2tTaXplQnl0ZXMgLSBkYXRhU2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgIC8vIENvbXB1dGUgbGFzdCBieXRlIHBvc2l0aW9uXG5cdCAgICAgICAgdmFyIGxhc3RCeXRlUG9zID0gZGF0YVNpZ0J5dGVzICsgblBhZGRpbmdCeXRlcyAtIDE7XG5cblx0ICAgICAgICAvLyBQYWRcblx0ICAgICAgICBkYXRhLmNsYW1wKCk7XG5cdCAgICAgICAgZGF0YS53b3Jkc1tsYXN0Qnl0ZVBvcyA+Pj4gMl0gfD0gblBhZGRpbmdCeXRlcyA8PCAoMjQgLSAobGFzdEJ5dGVQb3MgJSA0KSAqIDgpO1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgKz0gblBhZGRpbmdCeXRlcztcblx0ICAgIH0sXG5cblx0ICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxuXHQgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7XG5cblx0ICAgICAgICAvLyBSZW1vdmUgcGFkZGluZ1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlcztcblx0ICAgIH1cblx0fTtcblxuXG5cdC8qKlxuXHQgKiBJU08gMTAxMjYgcGFkZGluZyBzdHJhdGVneS5cblx0ICovXG5cdENyeXB0b0pTLnBhZC5Jc28xMDEyNiA9IHtcblx0ICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXNcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzO1xuXG5cdCAgICAgICAgLy8gUGFkXG5cdCAgICAgICAgZGF0YS5jb25jYXQoQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oblBhZGRpbmdCeXRlcyAtIDEpKS5cblx0ICAgICAgICAgICAgIGNvbmNhdChDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbblBhZGRpbmdCeXRlcyA8PCAyNF0sIDEpKTtcblx0ICAgIH0sXG5cblx0ICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxuXHQgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7XG5cblx0ICAgICAgICAvLyBSZW1vdmUgcGFkZGluZ1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlcztcblx0ICAgIH1cblx0fTtcblxuXG5cdC8qKlxuXHQgKiBJU08vSUVDIDk3OTctMSBQYWRkaW5nIE1ldGhvZCAyLlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLklzbzk3OTcxID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgLy8gQWRkIDB4ODAgYnl0ZVxuXHQgICAgICAgIGRhdGEuY29uY2F0KENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDgwMDAwMDAwXSwgMSkpO1xuXG5cdCAgICAgICAgLy8gWmVybyBwYWQgdGhlIHJlc3Rcblx0ICAgICAgICBDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmcucGFkKGRhdGEsIGJsb2NrU2l6ZSk7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBSZW1vdmUgemVybyBwYWRkaW5nXG5cdCAgICAgICAgQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nLnVucGFkKGRhdGEpO1xuXG5cdCAgICAgICAgLy8gUmVtb3ZlIG9uZSBtb3JlIGJ5dGUgLS0gdGhlIDB4ODAgYnl0ZVxuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMtLTtcblx0ICAgIH1cblx0fTtcblxuXG5cdC8qKlxuXHQgKiBaZXJvIHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmcgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAvLyBQYWRcblx0ICAgICAgICBkYXRhLmNsYW1wKCk7XG5cdCAgICAgICAgZGF0YS5zaWdCeXRlcyArPSBibG9ja1NpemVCeXRlcyAtICgoZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzKSB8fCBibG9ja1NpemVCeXRlcyk7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgLy8gVW5wYWRcblx0ICAgICAgICB2YXIgaSA9IGRhdGEuc2lnQnl0ZXMgLSAxO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSBkYXRhLnNpZ0J5dGVzIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICAgICAgaWYgKCgoZGF0YVdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZikpIHtcblx0ICAgICAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBpICsgMTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9O1xuXG5cblx0LyoqXG5cdCAqIEEgbm9vcCBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLk5vUGFkZGluZyA9IHtcblx0ICAgIHBhZDogZnVuY3Rpb24gKCkge1xuXHQgICAgfSxcblxuXHQgICAgdW5wYWQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgIH1cblx0fTtcblxuXG5cdChmdW5jdGlvbiAodW5kZWZpbmVkKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBDaXBoZXJQYXJhbXMgPSBDX2xpYi5DaXBoZXJQYXJhbXM7XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblx0ICAgIHZhciBIZXggPSBDX2VuYy5IZXg7XG5cdCAgICB2YXIgQ19mb3JtYXQgPSBDLmZvcm1hdDtcblxuXHQgICAgdmFyIEhleEZvcm1hdHRlciA9IENfZm9ybWF0LkhleCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGUgY2lwaGVydGV4dCBvZiBhIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGEgaGV4YWRlY2ltYWxseSBlbmNvZGVkIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfSBjaXBoZXJQYXJhbXMgVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGV4YWRlY2ltYWxseSBlbmNvZGVkIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhleFN0cmluZyA9IENyeXB0b0pTLmZvcm1hdC5IZXguc3RyaW5naWZ5KGNpcGhlclBhcmFtcyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dC50b1N0cmluZyhIZXgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBjaXBoZXJ0ZXh0IHN0cmluZyB0byBhIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IFRoZSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5mb3JtYXQuSGV4LnBhcnNlKGhleFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChpbnB1dCkge1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IEhleC5wYXJzZShpbnB1dCk7XG5cdCAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsgY2lwaGVydGV4dDogY2lwaGVydGV4dCB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBMb29rdXAgdGFibGVzXG5cdCAgICB2YXIgU0JPWCA9IFtdO1xuXHQgICAgdmFyIElOVl9TQk9YID0gW107XG5cdCAgICB2YXIgU1VCX01JWF8wID0gW107XG5cdCAgICB2YXIgU1VCX01JWF8xID0gW107XG5cdCAgICB2YXIgU1VCX01JWF8yID0gW107XG5cdCAgICB2YXIgU1VCX01JWF8zID0gW107XG5cdCAgICB2YXIgSU5WX1NVQl9NSVhfMCA9IFtdO1xuXHQgICAgdmFyIElOVl9TVUJfTUlYXzEgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8yID0gW107XG5cdCAgICB2YXIgSU5WX1NVQl9NSVhfMyA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIGxvb2t1cCB0YWJsZXNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGVcblx0ICAgICAgICB2YXIgZCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcblx0ICAgICAgICAgICAgaWYgKGkgPCAxMjgpIHtcblx0ICAgICAgICAgICAgICAgIGRbaV0gPSBpIDw8IDE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBkW2ldID0gKGkgPDwgMSkgXiAweDExYjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIFdhbGsgR0YoMl44KVxuXHQgICAgICAgIHZhciB4ID0gMDtcblx0ICAgICAgICB2YXIgeGkgPSAwO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBzYm94XG5cdCAgICAgICAgICAgIHZhciBzeCA9IHhpIF4gKHhpIDw8IDEpIF4gKHhpIDw8IDIpIF4gKHhpIDw8IDMpIF4gKHhpIDw8IDQpO1xuXHQgICAgICAgICAgICBzeCA9IChzeCA+Pj4gOCkgXiAoc3ggJiAweGZmKSBeIDB4NjM7XG5cdCAgICAgICAgICAgIFNCT1hbeF0gPSBzeDtcblx0ICAgICAgICAgICAgSU5WX1NCT1hbc3hdID0geDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG11bHRpcGxpY2F0aW9uXG5cdCAgICAgICAgICAgIHZhciB4MiA9IGRbeF07XG5cdCAgICAgICAgICAgIHZhciB4NCA9IGRbeDJdO1xuXHQgICAgICAgICAgICB2YXIgeDggPSBkW3g0XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIHN1YiBieXRlcywgbWl4IGNvbHVtbnMgdGFibGVzXG5cdCAgICAgICAgICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKTtcblx0ICAgICAgICAgICAgU1VCX01JWF8wW3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzFbeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzJbeF0gPSAodCA8PCA4KSAgfCAodCA+Pj4gMjQpO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzNbeF0gPSB0O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52IHN1YiBieXRlcywgaW52IG1peCBjb2x1bW5zIHRhYmxlc1xuXHQgICAgICAgICAgICB2YXIgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKTtcblx0ICAgICAgICAgICAgSU5WX1NVQl9NSVhfMFtzeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOCk7XG5cdCAgICAgICAgICAgIElOVl9TVUJfTUlYXzFbc3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KTtcblx0ICAgICAgICAgICAgSU5WX1NVQl9NSVhfMltzeF0gPSAodCA8PCA4KSAgfCAodCA+Pj4gMjQpO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8zW3N4XSA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IGNvdW50ZXJcblx0ICAgICAgICAgICAgaWYgKCF4KSB7XG5cdCAgICAgICAgICAgICAgICB4ID0geGkgPSAxO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgeCA9IHgyIF4gZFtkW2RbeDggXiB4Ml1dXTtcblx0ICAgICAgICAgICAgICAgIHhpIF49IGRbZFt4aV1dO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUHJlY29tcHV0ZWQgUmNvbiBsb29rdXBcblx0ICAgIHZhciBSQ09OID0gWzB4MDAsIDB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgQUVTID0gQ19hbGdvLkFFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIHQ7XG5cblx0ICAgICAgICAgICAgLy8gU2tpcCByZXNldCBvZiBuUm91bmRzIGhhcyBiZWVuIHNldCBiZWZvcmUgYW5kIGtleSBkaWQgbm90IGNoYW5nZVxuXHQgICAgICAgICAgICBpZiAodGhpcy5fblJvdW5kcyAmJiB0aGlzLl9rZXlQcmlvclJlc2V0ID09PSB0aGlzLl9rZXkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5UHJpb3JSZXNldCA9IHRoaXMuX2tleTtcblx0ICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2l6ZSA9IGtleS5zaWdCeXRlcyAvIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBudW1iZXIgb2Ygcm91bmRzXG5cdCAgICAgICAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kcyA9IGtleVNpemUgKyA2O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgbnVtYmVyIG9mIGtleSBzY2hlZHVsZSByb3dzXG5cdCAgICAgICAgICAgIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIGtleSBzY2hlZHVsZVxuXHQgICAgICAgICAgICB2YXIga2V5U2NoZWR1bGUgPSB0aGlzLl9rZXlTY2hlZHVsZSA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBrc1JvdyA9IDA7IGtzUm93IDwga3NSb3dzOyBrc1JvdysrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoa3NSb3cgPCBrZXlTaXplKSB7XG5cdCAgICAgICAgICAgICAgICAgICAga2V5U2NoZWR1bGVba3NSb3ddID0ga2V5V29yZHNba3NSb3ddO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ID0ga2V5U2NoZWR1bGVba3NSb3cgLSAxXTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghKGtzUm93ICUga2V5U2l6ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm90IHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWIgd29yZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0ID0gKFNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbdCAmIDB4ZmZdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1peCBSY29uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHQgXj0gUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0O1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYga3NSb3cgJSBrZXlTaXplID09IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3ViIHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9IChTQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3QgJiAweGZmXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlTY2hlZHVsZVtrc1JvdyAtIGtleVNpemVdIF4gdDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52IGtleSBzY2hlZHVsZVxuXHQgICAgICAgICAgICB2YXIgaW52S2V5U2NoZWR1bGUgPSB0aGlzLl9pbnZLZXlTY2hlZHVsZSA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpbnZLc1JvdyA9IDA7IGludktzUm93IDwga3NSb3dzOyBpbnZLc1JvdysrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1JvdztcblxuXHQgICAgICAgICAgICAgICAgaWYgKGludktzUm93ICUgNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3ddO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2tzUm93IC0gNF07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGlmIChpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IHQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IElOVl9TVUJfTUlYXzBbU0JPWFt0ID4+PiAyNF1dIF4gSU5WX1NVQl9NSVhfMVtTQk9YWyh0ID4+PiAxNikgJiAweGZmXV0gXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOVl9TVUJfTUlYXzJbU0JPWFsodCA+Pj4gOCkgJiAweGZmXV0gXiBJTlZfU1VCX01JWF8zW1NCT1hbdCAmIDB4ZmZdXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5fa2V5U2NoZWR1bGUsIFNVQl9NSVhfMCwgU1VCX01JWF8xLCBTVUJfTUlYXzIsIFNVQl9NSVhfMywgU0JPWCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIDJuZCBhbmQgNHRoIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIHQgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAzXSA9IHQ7XG5cblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52S2V5U2NoZWR1bGUsIElOVl9TVUJfTUlYXzAsIElOVl9TVUJfTUlYXzEsIElOVl9TVUJfTUlYXzIsIElOVl9TVUJfTUlYXzMsIElOVl9TQk9YKTtcblxuXHQgICAgICAgICAgICAvLyBJbnYgc3dhcCAybmQgYW5kIDR0aCByb3dzXG5cdCAgICAgICAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IE1bb2Zmc2V0ICsgM107XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9DcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0LCBrZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kcztcblxuXHQgICAgICAgICAgICAvLyBHZXQgaW5wdXQsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHMwID0gTVtvZmZzZXRdICAgICBeIGtleVNjaGVkdWxlWzBdO1xuXHQgICAgICAgICAgICB2YXIgczEgPSBNW29mZnNldCArIDFdIF4ga2V5U2NoZWR1bGVbMV07XG5cdCAgICAgICAgICAgIHZhciBzMiA9IE1bb2Zmc2V0ICsgMl0gXiBrZXlTY2hlZHVsZVsyXTtcblx0ICAgICAgICAgICAgdmFyIHMzID0gTVtvZmZzZXQgKyAzXSBeIGtleVNjaGVkdWxlWzNdO1xuXG5cdCAgICAgICAgICAgIC8vIEtleSBzY2hlZHVsZSByb3cgY291bnRlclxuXHQgICAgICAgICAgICB2YXIga3NSb3cgPSA0O1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hpZnQgcm93cywgc3ViIGJ5dGVzLCBtaXggY29sdW1ucywgYWRkIHJvdW5kIGtleVxuXHQgICAgICAgICAgICAgICAgdmFyIHQwID0gU1VCX01JWF8wW3MwID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxID0gU1VCX01JWF8wW3MxID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczMgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gU1VCX01JWF8wW3MyID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQzID0gU1VCX01JWF8wW3MzID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc3RhdGVcblx0ICAgICAgICAgICAgICAgIHMwID0gdDA7XG5cdCAgICAgICAgICAgICAgICBzMSA9IHQxO1xuXHQgICAgICAgICAgICAgICAgczIgPSB0Mjtcblx0ICAgICAgICAgICAgICAgIHMzID0gdDM7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgIHZhciB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICB2YXIgdDIgPSAoKFNCT1hbczIgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczMgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczEgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgdmFyIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cblx0ICAgICAgICAgICAgLy8gU2V0IG91dHB1dFxuXHQgICAgICAgICAgICBNW29mZnNldF0gICAgID0gdDA7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgMV0gPSB0MTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAyXSA9IHQyO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDNdID0gdDM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDI1Ni8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuQUVTLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLkFFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQUVTKTtcblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIFBlcm11dGVkIENob2ljZSAxIGNvbnN0YW50c1xuXHQgICAgdmFyIFBDMSA9IFtcblx0ICAgICAgICA1NywgNDksIDQxLCAzMywgMjUsIDE3LCA5LCAgMSxcblx0ICAgICAgICA1OCwgNTAsIDQyLCAzNCwgMjYsIDE4LCAxMCwgMixcblx0ICAgICAgICA1OSwgNTEsIDQzLCAzNSwgMjcsIDE5LCAxMSwgMyxcblx0ICAgICAgICA2MCwgNTIsIDQ0LCAzNiwgNjMsIDU1LCA0NywgMzksXG5cdCAgICAgICAgMzEsIDIzLCAxNSwgNywgIDYyLCA1NCwgNDYsIDM4LFxuXHQgICAgICAgIDMwLCAyMiwgMTQsIDYsICA2MSwgNTMsIDQ1LCAzNyxcblx0ICAgICAgICAyOSwgMjEsIDEzLCA1LCAgMjgsIDIwLCAxMiwgNFxuXHQgICAgXTtcblxuXHQgICAgLy8gUGVybXV0ZWQgQ2hvaWNlIDIgY29uc3RhbnRzXG5cdCAgICB2YXIgUEMyID0gW1xuXHQgICAgICAgIDE0LCAxNywgMTEsIDI0LCAxLCAgNSxcblx0ICAgICAgICAzLCAgMjgsIDE1LCA2LCAgMjEsIDEwLFxuXHQgICAgICAgIDIzLCAxOSwgMTIsIDQsICAyNiwgOCxcblx0ICAgICAgICAxNiwgNywgIDI3LCAyMCwgMTMsIDIsXG5cdCAgICAgICAgNDEsIDUyLCAzMSwgMzcsIDQ3LCA1NSxcblx0ICAgICAgICAzMCwgNDAsIDUxLCA0NSwgMzMsIDQ4LFxuXHQgICAgICAgIDQ0LCA0OSwgMzksIDU2LCAzNCwgNTMsXG5cdCAgICAgICAgNDYsIDQyLCA1MCwgMzYsIDI5LCAzMlxuXHQgICAgXTtcblxuXHQgICAgLy8gQ3VtdWxhdGl2ZSBiaXQgc2hpZnQgY29uc3RhbnRzXG5cdCAgICB2YXIgQklUX1NISUZUUyA9IFsxLCAgMiwgIDQsICA2LCAgOCwgIDEwLCAxMiwgMTQsIDE1LCAxNywgMTksIDIxLCAyMywgMjUsIDI3LCAyOF07XG5cblx0ICAgIC8vIFNCT1hlcyBhbmQgcm91bmQgcGVybXV0YXRpb24gY29uc3RhbnRzXG5cdCAgICB2YXIgU0JPWF9QID0gW1xuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDAwMDogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDIwMDAwMDAwOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHgzMDAwMDAwMDogMHgyLFxuXHQgICAgICAgICAgICAweDQwMDAwMDAwOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg1MDAwMDAwMDogMHg4MDgyMDIsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwMDA6IDB4ODAwMjAyLFxuXHQgICAgICAgICAgICAweDcwMDAwMDAwOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMDogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwMDA6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweGEwMDAwMDAwOiAweDgyMDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwMDA6IDB4ODA4MDAwLFxuXHQgICAgICAgICAgICAweGMwMDAwMDAwOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwMDA6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweGUwMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwMDA6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHg4MDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwMDA6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDI4MDAwMDAwOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4MzgwMDAwMDA6IDB4ODAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDAwMDogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwMDA6IDB4MjAwLFxuXHQgICAgICAgICAgICAweDY4MDAwMDAwOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHg3ODAwMDAwMDogMHgyLFxuXHQgICAgICAgICAgICAweDg4MDAwMDAwOiAweDgwMDIwMCxcblx0ICAgICAgICAgICAgMHg5ODAwMDAwMDogMHg4MjAwLFxuXHQgICAgICAgICAgICAweGE4MDAwMDAwOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDAwMDogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwMDA6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDAwOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZTgwMDAwMDA6IDB4MjAyLFxuXHQgICAgICAgICAgICAweGY4MDAwMDAwOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHgxOiAweDgwMDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDE6IDB4Mixcblx0ICAgICAgICAgICAgMHgyMDAwMDAwMTogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwMDE6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDQwMDAwMDAxOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHg1MDAwMDAwMTogMHg4MjAwLFxuXHQgICAgICAgICAgICAweDYwMDAwMDAxOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg3MDAwMDAwMTogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDE6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDkwMDAwMDAxOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDAwMTogMHg4MDAwMDIsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwMDE6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHhjMDAwMDAwMTogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwMDE6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweGUwMDAwMDAxOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwMDE6IDB4MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxOiAweDgwODIwMixcblx0ICAgICAgICAgICAgMHgxODAwMDAwMTogMHg4MDgwMDAsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwMDE6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDM4MDAwMDAxOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDAwMTogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDU4MDAwMDAxOiAweDgwMDAwMixcblx0ICAgICAgICAgICAgMHg2ODAwMDAwMTogMHgyLFxuXHQgICAgICAgICAgICAweDc4MDAwMDAxOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwMDE6IDB4ODAwMixcblx0ICAgICAgICAgICAgMHg5ODAwMDAwMTogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwMDE6IDB4MjAyLFxuXHQgICAgICAgICAgICAweGI4MDAwMDAxOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHhjODAwMDAwMTogMHg4MDAyMDAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDAwMDE6IDB4MCxcblx0ICAgICAgICAgICAgMHhlODAwMDAwMTogMHg4MjAwLFxuXHQgICAgICAgICAgICAweGY4MDAwMDAxOiAweDgwODAwMlxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweDIwMDAwMDA6IDB4ODAwMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwMDogMHg0MDA4MDAxMCxcblx0ICAgICAgICAgICAgMHg0MDAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweDUwMDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwMDogMHg0MDAwNDAwMCxcblx0ICAgICAgICAgICAgMHg3MDAwMDAwOiAweDEwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA6IDB4ODQwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwMDogMHg0MDAwNDAxMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweGIwMDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHhkMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweGYwMDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwMDogMHgxMCxcblx0ICAgICAgICAgICAgMHgzODAwMDAwOiAweDQwMDA0MDEwLFxuXHQgICAgICAgICAgICAweDQ4MDAwMDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwMDogMHg0MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg2ODAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDc4MDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHg5ODAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweGI4MDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwMDogMHg0MDAwMDAxMCxcblx0ICAgICAgICAgICAgMHhkODAwMDAwOiAweDg0MDAwLFxuXHQgICAgICAgICAgICAweGU4MDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTEwMDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4MTIwMDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4MTMwMDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4MTQwMDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4MTYwMDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTcwMDAwMDA6IDB4NDAwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDE5MDAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwMDAwOiAweDgwMDEwLFxuXHQgICAgICAgICAgICAweDFiMDAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweDFjMDAwMDAwOiAweDg0MDAwLFxuXHQgICAgICAgICAgICAweDFkMDAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDFlMDAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFmMDAwMDAwOiAweDQwMDg0MDEwLFxuXHQgICAgICAgICAgICAweDEwODAwMDAwOiAweDg0MDEwLFxuXHQgICAgICAgICAgICAweDExODAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDEyODAwMDAwOiAweDQwMDgwMDAwLFxuXHQgICAgICAgICAgICAweDEzODAwMDAwOiAweDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDAwMDA6IDB4NDAwMDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDAwMDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTY4MDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4MTc4MDAwMDA6IDB4NDAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDAwMDA6IDB4NDAwMDAwMTAsXG5cdCAgICAgICAgICAgIDB4MWE4MDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4MWI4MDAwMDA6IDB4ODAwMTAsXG5cdCAgICAgICAgICAgIDB4MWM4MDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZDgwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDFlODAwMDAwOiAweDQwMDgwMDEwLFxuXHQgICAgICAgICAgICAweDFmODAwMDAwOiAweDg0MDAwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDAwOiAweDQwMDAxMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweDQwMDAwMDogMHgxMDAwNCxcblx0ICAgICAgICAgICAgMHg1MDAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHg2MDAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHg3MDAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg5MDAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDA6IDB4MTAxMDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwOiAweDQwMTAwMDQsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweGUwMDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweGYwMDAwMDogMHgxMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHgyODAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgzODAwMDA6IDB4NDAwMDEwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHg1ODAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDc4MDAwMDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwOiAweDQsXG5cdCAgICAgICAgICAgIDB4OTgwMDAwOiAweDEwMCxcblx0ICAgICAgICAgICAgMHhhODAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwOiAweDEwMTAwLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDogMHg0MDAwMTA0LFxuXHQgICAgICAgICAgICAweGU4MDAwMDogMHg0MDEwMTA0LFxuXHQgICAgICAgICAgICAweGY4MDAwMDogMHg0MDAwMDAwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHgxMTAwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDEyMDAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4MTMwMDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDE0MDAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweDE1MDAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHgxNjAwMDAwOiAweDQwMDAwMDQsXG5cdCAgICAgICAgICAgIDB4MTcwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDA6IDB4NDAwMDEwNCxcblx0ICAgICAgICAgICAgMHgxOTAwMDAwOiAweDQwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweDFiMDAwMDA6IDB4MTAxMDAsXG5cdCAgICAgICAgICAgIDB4MWMwMDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweDFkMDAwMDA6IDB4MTA0LFxuXHQgICAgICAgICAgICAweDFlMDAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4MWYwMDAwMDogMHg0MDEwMDA0LFxuXHQgICAgICAgICAgICAweDEwODAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMTgwMDAwOiAweDEwNCxcblx0ICAgICAgICAgICAgMHgxMjgwMDAwOiAweDQwMTAxMDAsXG5cdCAgICAgICAgICAgIDB4MTM4MDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE0ODAwMDA6IDB4MTAwMDQsXG5cdCAgICAgICAgICAgIDB4MTU4MDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDE2ODAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweDE3ODAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHgxODgwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweDE5ODAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHgxYTgwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweDFiODAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHgxYzgwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4MWQ4MDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweDFlODAwMDA6IDB4NCxcblx0ICAgICAgICAgICAgMHgxZjgwMDAwOiAweDEwMTAwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MDQwMTAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgyMDAwMDogMHg0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4NDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHg1MDAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4NjAwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4NzAwMDA6IDB4NDAwMDQwLFxuXHQgICAgICAgICAgICAweDgwMDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDkwMDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHhiMDAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHhjMDAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHhkMDAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweGUwMDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgxODAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgyODAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgzODAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHg3ODAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHg4ODAwMDogMHgxMDAwLFxuXHQgICAgICAgICAgICAweDk4MDAwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweGE4MDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweGM4MDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweGQ4MDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHhlODAwMDogMHg0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxMTAwMDA6IDB4NDAxMDAwLFxuXHQgICAgICAgICAgICAweDEyMDAwMDogMHg4MDAwMDA0MCxcblx0ICAgICAgICAgICAgMHgxMzAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxNDAwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHgxNTAwMDA6IDB4ODA0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTYwMDAwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweDE3MDAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgxODAwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MTkwMDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYjAwMDA6IDB4NDAxMDQwLFxuXHQgICAgICAgICAgICAweDFjMDAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHgxZDAwMDA6IDB4NDAwMDAwLFxuXHQgICAgICAgICAgICAweDFlMDAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgxZjAwMDA6IDB4MTAwMCxcblx0ICAgICAgICAgICAgMHgxMDgwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTE4MDAwOiAweDgwNDAxMDQwLFxuXHQgICAgICAgICAgICAweDEyODAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDEzODAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxNTgwMDA6IDB4ODAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTY4MDAwOiAweDgwMDAxMDQwLFxuXHQgICAgICAgICAgICAweDE3ODAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgxODgwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWE4MDAwOiAweDgwMDAxMDAwLFxuXHQgICAgICAgICAgICAweDFiODAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxYzgwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHgxZDgwMDA6IDB4ODA0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWU4MDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZjgwMDA6IDB4NDAxMDQwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MCxcblx0ICAgICAgICAgICAgMHgxMDAwOiAweDEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHgzMDAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDQwMDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4NTAwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDYwMDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4NzAwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHg4MDAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwOiAweDIwMDAwMDgwLFxuXHQgICAgICAgICAgICAweGIwMDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4YzAwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHhkMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDogMHgxMDQwMDgwLFxuXHQgICAgICAgICAgICAweGYwMDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTgwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgyODAwOiAweDgwLFxuXHQgICAgICAgICAgICAweDM4MDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDU4MDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4NjgwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHg3ODAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDg4MDA6IDB4MjAwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTgwMDogMHgwLFxuXHQgICAgICAgICAgICAweGE4MDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4YjgwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweGM4MDA6IDB4MjAwMDAwODAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHhlODAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHgxMDAwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHgxMTAwMDogMHg4MCxcblx0ICAgICAgICAgICAgMHgxMjAwMDogMHgyMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMzAwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxNDAwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDE1MDAwOiAweDIxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDE2MDAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE3MDAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTkwMDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxYjAwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxYzAwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHgxZDAwMDogMHgyMDAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxZTAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDFmMDAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTA4MDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4MTE4MDA6IDB4MTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMjgwMDogMHgxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDEzODAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE0ODAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDE1ODAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTY4MDA6IDB4ODAsXG5cdCAgICAgICAgICAgIDB4MTc4MDA6IDB4MjEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDA6IDB4NDAwODAsXG5cdCAgICAgICAgICAgIDB4MTk4MDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MWE4MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxYjgwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYzgwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDFkODAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDFlODAwOiAweDIwMDQwMDAwLFxuXHQgICAgICAgICAgICAweDFmODAwOiAweDIwMDAwMDgwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHgxMDA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHgyMDA6IDB4MTAyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MzAwOiAweDEwMjAyMDA4LFxuXHQgICAgICAgICAgICAweDQwMDogMHgxMDAwMjAwMCxcblx0ICAgICAgICAgICAgMHg1MDA6IDB4MjAwMDAwLFxuXHQgICAgICAgICAgICAweDYwMDogMHgyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4NzAwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDogMHgwLFxuXHQgICAgICAgICAgICAweDkwMDogMHgxMDAwMjAwOCxcblx0ICAgICAgICAgICAgMHhhMDA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweGIwMDogMHg4LFxuXHQgICAgICAgICAgICAweGMwMDogMHgxMDIwMDAwOCxcblx0ICAgICAgICAgICAgMHhkMDA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweGUwMDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweGYwMDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHg4MDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MjgwOiAweDgsXG5cdCAgICAgICAgICAgIDB4MzgwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHg0ODA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDU4MDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHg2ODA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4NzgwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4ODgwOiAweDIwMDAwOCxcblx0ICAgICAgICAgICAgMHg5ODA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHhhODA6IDB4MTAwMDIwMDgsXG5cdCAgICAgICAgICAgIDB4YjgwOiAweDEwMjAwMDA4LFxuXHQgICAgICAgICAgICAweGM4MDogMHgwLFxuXHQgICAgICAgICAgICAweGQ4MDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHhlODA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweGY4MDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwOiAweDEwMDAyMDAwLFxuXHQgICAgICAgICAgICAweDExMDA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MTIwMDogMHgxMDIwMjAwOCxcblx0ICAgICAgICAgICAgMHgxMzAwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTQwMDogMHgyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNjAwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDE3MDA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweDE4MDA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDE5MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxYTAwOiAweDgsXG5cdCAgICAgICAgICAgIDB4MWIwMDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYzAwOiAweDIwMDAsXG5cdCAgICAgICAgICAgIDB4MWQwMDogMHgxMDAwMjAwOCxcblx0ICAgICAgICAgICAgMHgxZTAwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweDFmMDA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDEwODA6IDB4OCxcblx0ICAgICAgICAgICAgMHgxMTgwOiAweDIwMjAwMCxcblx0ICAgICAgICAgICAgMHgxMjgwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMzgwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDE0ODA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweDE2ODA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTc4MDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODgwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweDE5ODA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MWE4MDogMHgyMDAwLFxuXHQgICAgICAgICAgICAweDFiODA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDFjODA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDFkODA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZTgwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFmODA6IDB4MTAwMDIwMDhcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDogMHgyMDAwNDAxLFxuXHQgICAgICAgICAgICAweDIwOiAweDQwMCxcblx0ICAgICAgICAgICAgMHgzMDogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4NDA6IDB4MjEwMDQwMSxcblx0ICAgICAgICAgICAgMHg1MDogMHgwLFxuXHQgICAgICAgICAgICAweDYwOiAweDEsXG5cdCAgICAgICAgICAgIDB4NzA6IDB4MjEwMDAwMSxcblx0ICAgICAgICAgICAgMHg4MDogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweDkwOiAweDEwMDAwMSxcblx0ICAgICAgICAgICAgMHhhMDogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweGIwOiAweDIxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4YzA6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHhkMDogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4ZTA6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweGYwOiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODogMHgyMTAwMDAxLFxuXHQgICAgICAgICAgICAweDE4OiAweDAsXG5cdCAgICAgICAgICAgIDB4Mjg6IDB4MjAwMDQwMSxcblx0ICAgICAgICAgICAgMHgzODogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweDQ4OiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHg1ODogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweDY4OiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4Nzg6IDB4NDAxLFxuXHQgICAgICAgICAgICAweDg4OiAweDEwMDQwMSxcblx0ICAgICAgICAgICAgMHg5ODogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweGE4OiAweDIxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4Yjg6IDB4MTAwMDAxLFxuXHQgICAgICAgICAgICAweGM4OiAweDQwMCxcblx0ICAgICAgICAgICAgMHhkODogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweGU4OiAweDEsXG5cdCAgICAgICAgICAgIDB4Zjg6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweDEwMDogMHgyMDAwMDAwLFxuXHQgICAgICAgICAgICAweDExMDogMHgxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTIwOiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MTMwOiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTQwOiAweDEwMDAwMSxcblx0ICAgICAgICAgICAgMHgxNTA6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHgxNjA6IDB4MjEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxNzA6IDB4MTAwNDAxLFxuXHQgICAgICAgICAgICAweDE4MDogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4MTkwOiAweDIxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MWEwOiAweDEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxYjA6IDB4MSxcblx0ICAgICAgICAgICAgMHgxYzA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZDA6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZTA6IDB4MjAwMDAwMSxcblx0ICAgICAgICAgICAgMHgxZjA6IDB4NDAwLFxuXHQgICAgICAgICAgICAweDEwODogMHgxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MTE4OiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MTI4OiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTM4OiAweDEsXG5cdCAgICAgICAgICAgIDB4MTQ4OiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4OiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNjg6IDB4NDAxLFxuXHQgICAgICAgICAgICAweDE3ODogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweDE4ODogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweDE5ODogMHgyMTAwMDAwLFxuXHQgICAgICAgICAgICAweDFhODogMHgwLFxuXHQgICAgICAgICAgICAweDFiODogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweDFjODogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MWQ4OiAweDQwMCxcblx0ICAgICAgICAgICAgMHgxZTg6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHgxZjg6IDB4MTAwMDAxXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MDAwODIwLFxuXHQgICAgICAgICAgICAweDE6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MjogMHg4MDAwMDAwLFxuXHQgICAgICAgICAgICAweDM6IDB4MjAsXG5cdCAgICAgICAgICAgIDB4NDogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHg1OiAweDgwMjA4MjAsXG5cdCAgICAgICAgICAgIDB4NjogMHg4MDIwODAwLFxuXHQgICAgICAgICAgICAweDc6IDB4ODAwLFxuXHQgICAgICAgICAgICAweDg6IDB4ODAyMDAwMCxcblx0ICAgICAgICAgICAgMHg5OiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4YTogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHhiOiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4YzogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4ZDogMHgwLFxuXHQgICAgICAgICAgICAweGU6IDB4ODAwMDAyMCxcblx0ICAgICAgICAgICAgMHhmOiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAwOiAweDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMTogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAyOiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDM6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwNDogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA1OiAweDIwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA2OiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA3OiAweDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA4OiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDk6IDB4ODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBhOiAweDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBiOiAweDgwMjA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGM6IDB4MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwZDogMHg4MDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBlOiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGY6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MTA6IDB4MjA4MjAsXG5cdCAgICAgICAgICAgIDB4MTE6IDB4ODAyMDgwMCxcblx0ICAgICAgICAgICAgMHgxMjogMHgyMCxcblx0ICAgICAgICAgICAgMHgxMzogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4MTQ6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHgxNTogMHg4MDAwMDIwLFxuXHQgICAgICAgICAgICAweDE2OiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4MTc6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg6IDB4MCxcblx0ICAgICAgICAgICAgMHgxOTogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHgxYTogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDFiOiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4MWM6IDB4ODAyMDgyMCxcblx0ICAgICAgICAgICAgMHgxZDogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHgxZTogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4MWY6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMDogMHgyMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMTogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTI6IDB4ODAyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMzogMHgyMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNDogMHgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNTogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE2OiAweDgwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTc6IDB4ODAwMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxODogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE5OiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMWE6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxYjogMHgwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFjOiAweDIwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFkOiAweDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxZTogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxZjogMHg4MDIwODAwXG5cdCAgICAgICAgfVxuXHQgICAgXTtcblxuXHQgICAgLy8gTWFza3MgdGhhdCBzZWxlY3QgdGhlIFNCT1ggaW5wdXRcblx0ICAgIHZhciBTQk9YX01BU0sgPSBbXG5cdCAgICAgICAgMHhmODAwMDAwMSwgMHgxZjgwMDAwMCwgMHgwMWY4MDAwMCwgMHgwMDFmODAwMCxcblx0ICAgICAgICAweDAwMDFmODAwLCAweDAwMDAxZjgwLCAweDAwMDAwMWY4LCAweDgwMDAwMDFmXG5cdCAgICBdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIERFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgREVTID0gQ19hbGdvLkRFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7XG5cdCAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTZWxlY3QgNTYgYml0cyBhY2NvcmRpbmcgdG8gUEMxXG5cdCAgICAgICAgICAgIHZhciBrZXlCaXRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGtleUJpdFBvcyA9IFBDMVtpXSAtIDE7XG5cdCAgICAgICAgICAgICAgICBrZXlCaXRzW2ldID0gKGtleVdvcmRzW2tleUJpdFBvcyA+Pj4gNV0gPj4+ICgzMSAtIGtleUJpdFBvcyAlIDMyKSkgJiAxO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQXNzZW1ibGUgMTYgc3Via2V5c1xuXHQgICAgICAgICAgICB2YXIgc3ViS2V5cyA9IHRoaXMuX3N1YktleXMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgblN1YktleSA9IDA7IG5TdWJLZXkgPCAxNjsgblN1YktleSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc3Via2V5XG5cdCAgICAgICAgICAgICAgICB2YXIgc3ViS2V5ID0gc3ViS2V5c1tuU3ViS2V5XSA9IFtdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIGJpdFNoaWZ0ID0gQklUX1NISUZUU1tuU3ViS2V5XTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU2VsZWN0IDQ4IGJpdHMgYWNjb3JkaW5nIHRvIFBDMlxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IGZyb20gdGhlIGxlZnQgMjgga2V5IGJpdHNcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbKGkgLyA2KSB8IDBdIHw9IGtleUJpdHNbKChQQzJbaV0gLSAxKSArIGJpdFNoaWZ0KSAlIDI4XSA8PCAoMzEgLSBpICUgNik7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3QgZnJvbSB0aGUgcmlnaHQgMjgga2V5IGJpdHNcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbNCArICgoaSAvIDYpIHwgMCldIHw9IGtleUJpdHNbMjggKyAoKChQQzJbaSArIDI0XSAtIDEpICsgYml0U2hpZnQpICUgMjgpXSA8PCAoMzEgLSBpICUgNik7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNpbmNlIGVhY2ggc3Via2V5IGlzIGFwcGxpZWQgdG8gYW4gZXhwYW5kZWQgMzItYml0IGlucHV0LFxuXHQgICAgICAgICAgICAgICAgLy8gdGhlIHN1YmtleSBjYW4gYmUgYnJva2VuIGludG8gOCB2YWx1ZXMgc2NhbGVkIHRvIDMyLWJpdHMsXG5cdCAgICAgICAgICAgICAgICAvLyB3aGljaCBhbGxvd3MgdGhlIGtleSB0byBiZSB1c2VkIHdpdGhvdXQgZXhwYW5zaW9uXG5cdCAgICAgICAgICAgICAgICBzdWJLZXlbMF0gPSAoc3ViS2V5WzBdIDw8IDEpIHwgKHN1YktleVswXSA+Pj4gMzEpO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA3OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbaV0gPSBzdWJLZXlbaV0gPj4+ICgoaSAtIDEpICogNCArIDMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgc3ViS2V5WzddID0gKHN1YktleVs3XSA8PCA1KSB8IChzdWJLZXlbN10gPj4+IDI3KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52ZXJzZSBzdWJrZXlzXG5cdCAgICAgICAgICAgIHZhciBpbnZTdWJLZXlzID0gdGhpcy5faW52U3ViS2V5cyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGludlN1YktleXNbaV0gPSBzdWJLZXlzWzE1IC0gaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZW5jcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX3N1YktleXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52U3ViS2V5cyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0NyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQsIHN1YktleXMpIHtcblx0ICAgICAgICAgICAgLy8gR2V0IGlucHV0XG5cdCAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IE1bb2Zmc2V0XTtcblx0ICAgICAgICAgICAgdGhpcy5fckJsb2NrID0gTVtvZmZzZXQgKyAxXTtcblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHBlcm11dGF0aW9uXG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCA0LCAgMHgwZjBmMGYwZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxNiwgMHgwMDAwZmZmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCAyLCAgMHgzMzMzMzMzMyk7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCA4LCAgMHgwMGZmMDBmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxLCAgMHg1NTU1NTU1NSk7XG5cblx0ICAgICAgICAgICAgLy8gUm91bmRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMDsgcm91bmQgPCAxNjsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgc3ViS2V5ID0gc3ViS2V5c1tyb3VuZF07XG5cdCAgICAgICAgICAgICAgICB2YXIgbEJsb2NrID0gdGhpcy5fbEJsb2NrO1xuXHQgICAgICAgICAgICAgICAgdmFyIHJCbG9jayA9IHRoaXMuX3JCbG9jaztcblxuXHQgICAgICAgICAgICAgICAgLy8gRmVpc3RlbCBmdW5jdGlvblxuXHQgICAgICAgICAgICAgICAgdmFyIGYgPSAwO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBmIHw9IFNCT1hfUFtpXVsoKHJCbG9jayBeIHN1YktleVtpXSkgJiBTQk9YX01BU0tbaV0pID4+PiAwXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IHJCbG9jaztcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IGxCbG9jayBeIGY7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBVbmRvIHN3YXAgZnJvbSBsYXN0IHJvdW5kXG5cdCAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fbEJsb2NrO1xuXHQgICAgICAgICAgICB0aGlzLl9sQmxvY2sgPSB0aGlzLl9yQmxvY2s7XG5cdCAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gRmluYWwgcGVybXV0YXRpb25cblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDEsICAweDU1NTU1NTU1KTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDgsICAweDAwZmYwMGZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDIsICAweDMzMzMzMzMzKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDE2LCAweDAwMDBmZmZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDQsICAweDBmMGYwZjBmKTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgb3V0cHV0XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0XSA9IHRoaXMuX2xCbG9jaztcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IHRoaXMuX3JCbG9jaztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogNjQvMzIsXG5cblx0ICAgICAgICBpdlNpemU6IDY0LzMyLFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8vIFN3YXAgYml0cyBhY3Jvc3MgdGhlIGxlZnQgYW5kIHJpZ2h0IHdvcmRzXG5cdCAgICBmdW5jdGlvbiBleGNoYW5nZUxSKG9mZnNldCwgbWFzaykge1xuXHQgICAgICAgIHZhciB0ID0gKCh0aGlzLl9sQmxvY2sgPj4+IG9mZnNldCkgXiB0aGlzLl9yQmxvY2spICYgbWFzaztcblx0ICAgICAgICB0aGlzLl9yQmxvY2sgXj0gdDtcblx0ICAgICAgICB0aGlzLl9sQmxvY2sgXj0gdCA8PCBvZmZzZXQ7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGV4Y2hhbmdlUkwob2Zmc2V0LCBtYXNrKSB7XG5cdCAgICAgICAgdmFyIHQgPSAoKHRoaXMuX3JCbG9jayA+Pj4gb2Zmc2V0KSBeIHRoaXMuX2xCbG9jaykgJiBtYXNrO1xuXHQgICAgICAgIHRoaXMuX2xCbG9jayBePSB0O1xuXHQgICAgICAgIHRoaXMuX3JCbG9jayBePSB0IDw8IG9mZnNldDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5ERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5ERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihERVMpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFRyaXBsZS1ERVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFRyaXBsZURFUyA9IENfYWxnby5UcmlwbGVERVMgPSBCbG9ja0NpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5O1xuXHQgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7XG5cdCAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUga2V5IGxlbmd0aCBpcyB2YWxpZCAoNjQsIDEyOCBvciA+PSAxOTIgYml0KVxuXHQgICAgICAgICAgICBpZiAoa2V5V29yZHMubGVuZ3RoICE9PSAyICYmIGtleVdvcmRzLmxlbmd0aCAhPT0gNCAmJiBrZXlXb3Jkcy5sZW5ndGggPCA2KSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQga2V5IGxlbmd0aCAtIDNERVMgcmVxdWlyZXMgdGhlIGtleSBsZW5ndGggdG8gYmUgNjQsIDEyOCwgMTkyIG9yID4xOTIuJyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBFeHRlbmQgdGhlIGtleSBhY2NvcmRpbmcgdG8gdGhlIGtleWluZyBvcHRpb25zIGRlZmluZWQgaW4gM0RFUyBzdGFuZGFyZFxuXHQgICAgICAgICAgICB2YXIga2V5MSA9IGtleVdvcmRzLnNsaWNlKDAsIDIpO1xuXHQgICAgICAgICAgICB2YXIga2V5MiA9IGtleVdvcmRzLmxlbmd0aCA8IDQgPyBrZXlXb3Jkcy5zbGljZSgwLCAyKSA6IGtleVdvcmRzLnNsaWNlKDIsIDQpO1xuXHQgICAgICAgICAgICB2YXIga2V5MyA9IGtleVdvcmRzLmxlbmd0aCA8IDYgPyBrZXlXb3Jkcy5zbGljZSgwLCAyKSA6IGtleVdvcmRzLnNsaWNlKDQsIDYpO1xuXG5cdCAgICAgICAgICAgIC8vIENyZWF0ZSBERVMgaW5zdGFuY2VzXG5cdCAgICAgICAgICAgIHRoaXMuX2RlczEgPSBERVMuY3JlYXRlRW5jcnlwdG9yKFdvcmRBcnJheS5jcmVhdGUoa2V5MSkpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMyID0gREVTLmNyZWF0ZUVuY3J5cHRvcihXb3JkQXJyYXkuY3JlYXRlKGtleTIpKTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMyA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXkzKSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGVuY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMxLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMyLmRlY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMzLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMy5kZWNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMi5lbmNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMS5kZWNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMTkyLzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiA2NC8zMixcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogNjQvMzJcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlRyaXBsZURFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlRyaXBsZURFUy5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5UcmlwbGVERVMgPSBCbG9ja0NpcGhlci5fY3JlYXRlSGVscGVyKFRyaXBsZURFUyk7XG5cdH0oKSk7XG5cblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBSQzQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBSQzQgPSBDX2FsZ28uUkM0ID0gU3RyZWFtQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7XG5cdCAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGtleVNpZ0J5dGVzID0ga2V5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXQgc2JveFxuXHQgICAgICAgICAgICB2YXIgUyA9IHRoaXMuX1MgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgU1tpXSA9IGk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBLZXkgc2V0dXBcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgMjU2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBrZXlCeXRlSW5kZXggPSBpICUga2V5U2lnQnl0ZXM7XG5cdCAgICAgICAgICAgICAgICB2YXIga2V5Qnl0ZSA9IChrZXlXb3Jkc1trZXlCeXRlSW5kZXggPj4+IDJdID4+PiAoMjQgLSAoa2V5Qnl0ZUluZGV4ICUgNCkgKiA4KSkgJiAweGZmO1xuXG5cdCAgICAgICAgICAgICAgICBqID0gKGogKyBTW2ldICsga2V5Qnl0ZSkgJSAyNTY7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFN3YXBcblx0ICAgICAgICAgICAgICAgIHZhciB0ID0gU1tpXTtcblx0ICAgICAgICAgICAgICAgIFNbaV0gPSBTW2pdO1xuXHQgICAgICAgICAgICAgICAgU1tqXSA9IHQ7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb3VudGVyc1xuXHQgICAgICAgICAgICB0aGlzLl9pID0gdGhpcy5faiA9IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICBNW29mZnNldF0gXj0gZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkLmNhbGwodGhpcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDI1Ni8zMixcblxuXHQgICAgICAgIGl2U2l6ZTogMFxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIGdlbmVyYXRlS2V5c3RyZWFtV29yZCgpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgUyA9IHRoaXMuX1M7XG5cdCAgICAgICAgdmFyIGkgPSB0aGlzLl9pO1xuXHQgICAgICAgIHZhciBqID0gdGhpcy5fajtcblxuXHQgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbSB3b3JkXG5cdCAgICAgICAgdmFyIGtleXN0cmVhbVdvcmQgPSAwO1xuXHQgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgNDsgbisrKSB7XG5cdCAgICAgICAgICAgIGkgPSAoaSArIDEpICUgMjU2O1xuXHQgICAgICAgICAgICBqID0gKGogKyBTW2ldKSAlIDI1NjtcblxuXHQgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgIHZhciB0ID0gU1tpXTtcblx0ICAgICAgICAgICAgU1tpXSA9IFNbal07XG5cdCAgICAgICAgICAgIFNbal0gPSB0O1xuXG5cdCAgICAgICAgICAgIGtleXN0cmVhbVdvcmQgfD0gU1soU1tpXSArIFNbal0pICUgMjU2XSA8PCAoMjQgLSBuICogOCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gVXBkYXRlIGNvdW50ZXJzXG5cdCAgICAgICAgdGhpcy5faSA9IGk7XG5cdCAgICAgICAgdGhpcy5faiA9IGo7XG5cblx0ICAgICAgICByZXR1cm4ga2V5c3RyZWFtV29yZDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5SQzQuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5SQzQuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuUkM0ID0gU3RyZWFtQ2lwaGVyLl9jcmVhdGVIZWxwZXIoUkM0KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBNb2RpZmllZCBSQzQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBSQzREcm9wID0gQ19hbGdvLlJDNERyb3AgPSBSQzQuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gZHJvcCBUaGUgbnVtYmVyIG9mIGtleXN0cmVhbSB3b3JkcyB0byBkcm9wLiBEZWZhdWx0IDE5MlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogUkM0LmNmZy5leHRlbmQoe1xuXHQgICAgICAgICAgICBkcm9wOiAxOTJcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIFJDNC5fZG9SZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIERyb3Bcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuY2ZnLmRyb3A7IGkgPiAwOyBpLS0pIHtcblx0ICAgICAgICAgICAgICAgIGdlbmVyYXRlS2V5c3RyZWFtV29yZC5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUkM0RHJvcC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJDNERyb3AuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuUkM0RHJvcCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJDNERyb3ApO1xuXHR9KCkpO1xuXG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFN0cmVhbUNpcGhlciA9IENfbGliLlN0cmVhbUNpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIFJldXNhYmxlIG9iamVjdHNcblx0ICAgIHZhciBTICA9IFtdO1xuXHQgICAgdmFyIENfID0gW107XG5cdCAgICB2YXIgRyAgPSBbXTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBSYWJiaXQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG1cblx0ICAgICAqL1xuXHQgICAgdmFyIFJhYmJpdCA9IENfYWxnby5SYWJiaXQgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIEsgPSB0aGlzLl9rZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuY2ZnLml2O1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBLW2ldID0gKCgoS1tpXSA8PCA4KSAgfCAoS1tpXSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChLW2ldIDw8IDI0KSB8IChLW2ldID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBpbml0aWFsIHN0YXRlIHZhbHVlc1xuXHQgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1ggPSBbXG5cdCAgICAgICAgICAgICAgICBLWzBdLCAoS1szXSA8PCAxNikgfCAoS1syXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1sxXSwgKEtbMF0gPDwgMTYpIHwgKEtbM10gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbMl0sIChLWzFdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzNdLCAoS1syXSA8PCAxNikgfCAoS1sxXSA+Pj4gMTYpXG5cdCAgICAgICAgICAgIF07XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgICAgICB2YXIgQyA9IHRoaXMuX0MgPSBbXG5cdCAgICAgICAgICAgICAgICAoS1syXSA8PCAxNikgfCAoS1syXSA+Pj4gMTYpLCAoS1swXSAmIDB4ZmZmZjAwMDApIHwgKEtbMV0gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzNdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksIChLWzFdICYgMHhmZmZmMDAwMCkgfCAoS1syXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbMF0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSwgKEtbMl0gJiAweGZmZmYwMDAwKSB8IChLWzNdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1sxXSA8PCAxNikgfCAoS1sxXSA+Pj4gMTYpLCAoS1szXSAmIDB4ZmZmZjAwMDApIHwgKEtbMF0gJiAweDAwMDBmZmZmKVxuXHQgICAgICAgICAgICBdO1xuXG5cdCAgICAgICAgICAgIC8vIENhcnJ5IGJpdFxuXHQgICAgICAgICAgICB0aGlzLl9iID0gMDtcblxuXHQgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBNb2RpZnkgdGhlIGNvdW50ZXJzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBDW2ldIF49IFhbKGkgKyA0KSAmIDddO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSVYgc2V0dXBcblx0ICAgICAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBJViA9IGl2LndvcmRzO1xuXHQgICAgICAgICAgICAgICAgdmFyIElWXzAgPSBJVlswXTtcblx0ICAgICAgICAgICAgICAgIHZhciBJVl8xID0gSVZbMV07XG5cblx0ICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIgc3VidmVjdG9yc1xuXHQgICAgICAgICAgICAgICAgdmFyIGkwID0gKCgoSVZfMCA8PCA4KSB8IChJVl8wID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8wIDw8IDI0KSB8IChJVl8wID4+PiA4KSkgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMiA9ICgoKElWXzEgPDwgOCkgfCAoSVZfMSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMSA8PCAyNCkgfCAoSVZfMSA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTEgPSAoaTAgPj4+IDE2KSB8IChpMiAmIDB4ZmZmZjAwMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkzID0gKGkyIDw8IDE2KSAgfCAoaTAgJiAweDAwMDBmZmZmKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gTW9kaWZ5IGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgICAgICAgICBDWzBdIF49IGkwO1xuXHQgICAgICAgICAgICAgICAgQ1sxXSBePSBpMTtcblx0ICAgICAgICAgICAgICAgIENbMl0gXj0gaTI7XG5cdCAgICAgICAgICAgICAgICBDWzNdIF49IGkzO1xuXHQgICAgICAgICAgICAgICAgQ1s0XSBePSBpMDtcblx0ICAgICAgICAgICAgICAgIENbNV0gXj0gaTE7XG5cdCAgICAgICAgICAgICAgICBDWzZdIF49IGkyO1xuXHQgICAgICAgICAgICAgICAgQ1s3XSBePSBpMztcblxuXHQgICAgICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBYID0gdGhpcy5fWDtcblxuXHQgICAgICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW1cblx0ICAgICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgZm91ciBrZXlzdHJlYW0gd29yZHNcblx0ICAgICAgICAgICAgU1swXSA9IFhbMF0gXiAoWFs1XSA+Pj4gMTYpIF4gKFhbM10gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzFdID0gWFsyXSBeIChYWzddID4+PiAxNikgXiAoWFs1XSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbMl0gPSBYWzRdIF4gKFhbMV0gPj4+IDE2KSBeIChYWzddIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1szXSA9IFhbNl0gXiAoWFszXSA+Pj4gMTYpIF4gKFhbMV0gPDwgMTYpO1xuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICAgICAgU1tpXSA9ICgoKFNbaV0gPDwgOCkgIHwgKFNbaV0gPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoU1tpXSA8PCAyNCkgfCAoU1tpXSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgICAgICBNW29mZnNldCArIGldIF49IFNbaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxMjgvMzIsXG5cblx0ICAgICAgICBpdlNpemU6IDY0LzMyXG5cdCAgICB9KTtcblxuXHQgICAgZnVuY3Rpb24gbmV4dFN0YXRlKCkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgIHZhciBYID0gdGhpcy5fWDtcblx0ICAgICAgICB2YXIgQyA9IHRoaXMuX0M7XG5cblx0ICAgICAgICAvLyBTYXZlIG9sZCBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG5cdCAgICAgICAgICAgIENfW2ldID0gQ1tpXTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IGNvdW50ZXIgdmFsdWVzXG5cdCAgICAgICAgQ1swXSA9IChDWzBdICsgMHg0ZDM0ZDM0ZCArIHRoaXMuX2IpIHwgMDtcblx0ICAgICAgICBDWzFdID0gKENbMV0gKyAweGQzNGQzNGQzICsgKChDWzBdID4+PiAwKSA8IChDX1swXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzJdID0gKENbMl0gKyAweDM0ZDM0ZDM0ICsgKChDWzFdID4+PiAwKSA8IChDX1sxXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzNdID0gKENbM10gKyAweDRkMzRkMzRkICsgKChDWzJdID4+PiAwKSA8IChDX1syXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzRdID0gKENbNF0gKyAweGQzNGQzNGQzICsgKChDWzNdID4+PiAwKSA8IChDX1szXSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzVdID0gKENbNV0gKyAweDM0ZDM0ZDM0ICsgKChDWzRdID4+PiAwKSA8IChDX1s0XSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzZdID0gKENbNl0gKyAweDRkMzRkMzRkICsgKChDWzVdID4+PiAwKSA8IChDX1s1XSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICBDWzddID0gKENbN10gKyAweGQzNGQzNGQzICsgKChDWzZdID4+PiAwKSA8IChDX1s2XSA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICB0aGlzLl9iID0gKENbN10gPj4+IDApIDwgKENfWzddID4+PiAwKSA/IDEgOiAwO1xuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBnLXZhbHVlc1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBneCA9IFhbaV0gKyBDW2ldO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnN0cnVjdCBoaWdoIGFuZCBsb3cgYXJndW1lbnQgZm9yIHNxdWFyaW5nXG5cdCAgICAgICAgICAgIHZhciBnYSA9IGd4ICYgMHhmZmZmO1xuXHQgICAgICAgICAgICB2YXIgZ2IgPSBneCA+Pj4gMTY7XG5cblx0ICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGhpZ2ggYW5kIGxvdyByZXN1bHQgb2Ygc3F1YXJpbmdcblx0ICAgICAgICAgICAgdmFyIGdoID0gKCgoKGdhICogZ2EpID4+PiAxNykgKyBnYSAqIGdiKSA+Pj4gMTUpICsgZ2IgKiBnYjtcblx0ICAgICAgICAgICAgdmFyIGdsID0gKCgoZ3ggJiAweGZmZmYwMDAwKSAqIGd4KSB8IDApICsgKCgoZ3ggJiAweDAwMDBmZmZmKSAqIGd4KSB8IDApO1xuXG5cdCAgICAgICAgICAgIC8vIEhpZ2ggWE9SIGxvd1xuXHQgICAgICAgICAgICBHW2ldID0gZ2ggXiBnbDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IHN0YXRlIHZhbHVlc1xuXHQgICAgICAgIFhbMF0gPSAoR1swXSArICgoR1s3XSA8PCAxNikgfCAoR1s3XSA+Pj4gMTYpKSArICgoR1s2XSA8PCAxNikgfCAoR1s2XSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbMV0gPSAoR1sxXSArICgoR1swXSA8PCA4KSAgfCAoR1swXSA+Pj4gMjQpKSArIEdbN10pIHwgMDtcblx0ICAgICAgICBYWzJdID0gKEdbMl0gKyAoKEdbMV0gPDwgMTYpIHwgKEdbMV0gPj4+IDE2KSkgKyAoKEdbMF0gPDwgMTYpIHwgKEdbMF0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzNdID0gKEdbM10gKyAoKEdbMl0gPDwgOCkgIHwgKEdbMl0gPj4+IDI0KSkgKyBHWzFdKSB8IDA7XG5cdCAgICAgICAgWFs0XSA9IChHWzRdICsgKChHWzNdIDw8IDE2KSB8IChHWzNdID4+PiAxNikpICsgKChHWzJdIDw8IDE2KSB8IChHWzJdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFs1XSA9IChHWzVdICsgKChHWzRdIDw8IDgpICB8IChHWzRdID4+PiAyNCkpICsgR1szXSkgfCAwO1xuXHQgICAgICAgIFhbNl0gPSAoR1s2XSArICgoR1s1XSA8PCAxNikgfCAoR1s1XSA+Pj4gMTYpKSArICgoR1s0XSA8PCAxNikgfCAoR1s0XSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbN10gPSAoR1s3XSArICgoR1s2XSA8PCA4KSAgfCAoR1s2XSA+Pj4gMjQpKSArIEdbNV0pIHwgMDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5SYWJiaXQuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5SYWJiaXQuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuUmFiYml0ID0gU3RyZWFtQ2lwaGVyLl9jcmVhdGVIZWxwZXIoUmFiYml0KTtcblx0fSgpKTtcblxuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgUyAgPSBbXTtcblx0ICAgIHZhciBDXyA9IFtdO1xuXHQgICAgdmFyIEcgID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmFiYml0IHN0cmVhbSBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICpcblx0ICAgICAqIFRoaXMgaXMgYSBsZWdhY3kgdmVyc2lvbiB0aGF0IG5lZ2xlY3RlZCB0byBjb252ZXJ0IHRoZSBrZXkgdG8gbGl0dGxlLWVuZGlhbi5cblx0ICAgICAqIFRoaXMgZXJyb3IgZG9lc24ndCBhZmZlY3QgdGhlIGNpcGhlcidzIHNlY3VyaXR5LFxuXHQgICAgICogYnV0IGl0IGRvZXMgYWZmZWN0IGl0cyBjb21wYXRpYmlsaXR5IHdpdGggb3RoZXIgaW1wbGVtZW50YXRpb25zLlxuXHQgICAgICovXG5cdCAgICB2YXIgUmFiYml0TGVnYWN5ID0gQ19hbGdvLlJhYmJpdExlZ2FjeSA9IFN0cmVhbUNpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSyA9IHRoaXMuX2tleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5jZmcuaXY7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gW1xuXHQgICAgICAgICAgICAgICAgS1swXSwgKEtbM10gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1szXSwgKEtbMl0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KVxuXHQgICAgICAgICAgICBdO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIEMgPSB0aGlzLl9DID0gW1xuXHQgICAgICAgICAgICAgICAgKEtbMl0gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSwgKEtbMF0gJiAweGZmZmYwMDAwKSB8IChLWzFdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1szXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLCAoS1sxXSAmIDB4ZmZmZjAwMDApIHwgKEtbMl0gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzBdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksIChLWzJdICYgMHhmZmZmMDAwMCkgfCAoS1szXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbMV0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KSwgKEtbM10gJiAweGZmZmYwMDAwKSB8IChLWzBdICYgMHgwMDAwZmZmZilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBDYXJyeSBiaXRcblx0ICAgICAgICAgICAgdGhpcy5fYiA9IDA7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gTW9kaWZ5IHRoZSBjb3VudGVyc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgQ1tpXSBePSBYWyhpICsgNCkgJiA3XTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIElWIHNldHVwXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgSVYgPSBpdi53b3Jkcztcblx0ICAgICAgICAgICAgICAgIHZhciBJVl8wID0gSVZbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMSA9IElWWzFdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnNcblx0ICAgICAgICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTIgPSAoKChJVl8xIDw8IDgpIHwgKElWXzEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzEgPDwgMjQpIHwgKElWXzEgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgIHwgKGkwICYgMHgwMDAwZmZmZik7XG5cblx0ICAgICAgICAgICAgICAgIC8vIE1vZGlmeSBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgQ1swXSBePSBpMDtcblx0ICAgICAgICAgICAgICAgIENbMV0gXj0gaTE7XG5cdCAgICAgICAgICAgICAgICBDWzJdIF49IGkyO1xuXHQgICAgICAgICAgICAgICAgQ1szXSBePSBpMztcblx0ICAgICAgICAgICAgICAgIENbNF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzVdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1s2XSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbN10gXj0gaTM7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtXG5cdCAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIga2V5c3RyZWFtIHdvcmRzXG5cdCAgICAgICAgICAgIFNbMF0gPSBYWzBdIF4gKFhbNV0gPj4+IDE2KSBeIChYWzNdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1sxXSA9IFhbMl0gXiAoWFs3XSA+Pj4gMTYpIF4gKFhbNV0gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzJdID0gWFs0XSBeIChYWzFdID4+PiAxNikgXiAoWFs3XSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbM10gPSBYWzZdIF4gKFhbM10gPj4+IDE2KSBeIChYWzFdIDw8IDE2KTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIFNbaV0gPSAoKChTW2ldIDw8IDgpICB8IChTW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKFNbaV0gPDwgMjQpIHwgKFNbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgTVtvZmZzZXQgKyBpXSBePSBTW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIG5leHRTdGF0ZSgpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cdCAgICAgICAgdmFyIEMgPSB0aGlzLl9DO1xuXG5cdCAgICAgICAgLy8gU2F2ZSBvbGQgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICBDX1tpXSA9IENbaV07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgIENbMF0gPSAoQ1swXSArIDB4NGQzNGQzNGQgKyB0aGlzLl9iKSB8IDA7XG5cdCAgICAgICAgQ1sxXSA9IChDWzFdICsgMHhkMzRkMzRkMyArICgoQ1swXSA+Pj4gMCkgPCAoQ19bMF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1syXSA9IChDWzJdICsgMHgzNGQzNGQzNCArICgoQ1sxXSA+Pj4gMCkgPCAoQ19bMV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1szXSA9IChDWzNdICsgMHg0ZDM0ZDM0ZCArICgoQ1syXSA+Pj4gMCkgPCAoQ19bMl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s0XSA9IChDWzRdICsgMHhkMzRkMzRkMyArICgoQ1szXSA+Pj4gMCkgPCAoQ19bM10gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s1XSA9IChDWzVdICsgMHgzNGQzNGQzNCArICgoQ1s0XSA+Pj4gMCkgPCAoQ19bNF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s2XSA9IChDWzZdICsgMHg0ZDM0ZDM0ZCArICgoQ1s1XSA+Pj4gMCkgPCAoQ19bNV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s3XSA9IChDWzddICsgMHhkMzRkMzRkMyArICgoQ1s2XSA+Pj4gMCkgPCAoQ19bNl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgdGhpcy5fYiA9IChDWzddID4+PiAwKSA8IChDX1s3XSA+Pj4gMCkgPyAxIDogMDtcblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZy12YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZ3ggPSBYW2ldICsgQ1tpXTtcblxuXHQgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgaGlnaCBhbmQgbG93IGFyZ3VtZW50IGZvciBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2EgPSBneCAmIDB4ZmZmZjtcblx0ICAgICAgICAgICAgdmFyIGdiID0gZ3ggPj4+IDE2O1xuXG5cdCAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBoaWdoIGFuZCBsb3cgcmVzdWx0IG9mIHNxdWFyaW5nXG5cdCAgICAgICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2I7XG5cdCAgICAgICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKTtcblxuXHQgICAgICAgICAgICAvLyBIaWdoIFhPUiBsb3dcblx0ICAgICAgICAgICAgR1tpXSA9IGdoIF4gZ2w7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICBYWzBdID0gKEdbMF0gKyAoKEdbN10gPDwgMTYpIHwgKEdbN10gPj4+IDE2KSkgKyAoKEdbNl0gPDwgMTYpIHwgKEdbNl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzFdID0gKEdbMV0gKyAoKEdbMF0gPDwgOCkgIHwgKEdbMF0gPj4+IDI0KSkgKyBHWzddKSB8IDA7XG5cdCAgICAgICAgWFsyXSA9IChHWzJdICsgKChHWzFdIDw8IDE2KSB8IChHWzFdID4+PiAxNikpICsgKChHWzBdIDw8IDE2KSB8IChHWzBdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFszXSA9IChHWzNdICsgKChHWzJdIDw8IDgpICB8IChHWzJdID4+PiAyNCkpICsgR1sxXSkgfCAwO1xuXHQgICAgICAgIFhbNF0gPSAoR1s0XSArICgoR1szXSA8PCAxNikgfCAoR1szXSA+Pj4gMTYpKSArICgoR1syXSA8PCAxNikgfCAoR1syXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbNV0gPSAoR1s1XSArICgoR1s0XSA8PCA4KSAgfCAoR1s0XSA+Pj4gMjQpKSArIEdbM10pIHwgMDtcblx0ICAgICAgICBYWzZdID0gKEdbNl0gKyAoKEdbNV0gPDwgMTYpIHwgKEdbNV0gPj4+IDE2KSkgKyAoKEdbNF0gPDwgMTYpIHwgKEdbNF0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzddID0gKEdbN10gKyAoKEdbNl0gPDwgOCkgIHwgKEdbNl0gPj4+IDI0KSkgKyBHWzVdKSB8IDA7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLlJhYmJpdExlZ2FjeSA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJhYmJpdExlZ2FjeSk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/*!*****************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/crypto.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var lookup = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 62, 0, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
  21, 22, 23, 24, 25, 0, 0, 0, 0, 63, 0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
  40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
]

function base64Decode (source, target) {
  var sourceLength = source.length
  var paddingLength = (source[sourceLength - 2] === '=' ? 2 : (source[sourceLength - 1] === '=' ? 1
    : 0))

  var tmp
  var byteIndex = 0
  var baseLength = (sourceLength - paddingLength) & 0xfffffffc

  for (var i = 0; i < baseLength; i += 4) {
    tmp = (lookup[source.charCodeAt(i)] << 18) |
      (lookup[source.charCodeAt(i + 1)] << 12) |
      (lookup[source.charCodeAt(i + 2)] << 6) |
      (lookup[source.charCodeAt(i + 3)])

    target[byteIndex++] = (tmp >> 16) & 0xFF
    target[byteIndex++] = (tmp >> 8) & 0xFF
    target[byteIndex++] = (tmp) & 0xFF
  }

  if (paddingLength === 1) {
    tmp = (lookup[source.charCodeAt(i)] << 10) |
      (lookup[source.charCodeAt(i + 1)] << 4) |
      (lookup[source.charCodeAt(i + 2)] >> 2)

    target[byteIndex++] = (tmp >> 8) & 0xFF
    target[byteIndex++] = tmp & 0xFF
  }

  if (paddingLength === 2) {
    tmp = (lookup[source.charCodeAt(i)] << 2) | (lookup[source.charCodeAt(i + 1)] >> 4)

    target[byteIndex++] = tmp & 0xFF
  }
}

/* harmony default export */ __webpack_exports__["default"] = ({
  getRandomValues (arr) {
    if (!(
      arr instanceof Int8Array ||
        arr instanceof Uint8Array ||
        arr instanceof Int16Array ||
        arr instanceof Uint16Array ||
        arr instanceof Int32Array ||
        arr instanceof Uint32Array ||
        arr instanceof Uint8ClampedArray
    )) {
      throw new Error('Expected an integer array')
    }
    if (arr.byteLength > 65536) {
      throw new Error('Can only request a maximum of 65536 bytes')
    }
    var crypto = uni.requireNativePlugin('DCloud-Crypto')
    base64Decode(crypto.getRandomValues(arr.byteLength), new Uint8Array(arr.buffer, arr.byteOffset,
      arr.byteLength))
    return arr
  }
});


/***/ }),
/* 53 */
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 54 */
/*!****************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/api/music/qqmusic.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\nvar _index = _interopRequireDefault(__webpack_require__(/*! @/plugins/request/index.js */ 9));\nvar _config = _interopRequireDefault(__webpack_require__(/*! @/assets/js/config.js */ 11));\nvar _util = _interopRequireDefault(__webpack_require__(/*! @/assets/js/util.js */ 15));\n\nvar _comment = _interopRequireDefault(__webpack_require__(/*! @/assets/constructor/comment.js */ 46));\nvar _song = _interopRequireDefault(__webpack_require__(/*! @/assets/constructor/song.js */ 47));\nvar _album = _interopRequireDefault(__webpack_require__(/*! @/assets/constructor/album.js */ 48));\nvar _singer = _interopRequireDefault(__webpack_require__(/*! @/assets/constructor/singer.js */ 49));\n\nvar _qqSign = _interopRequireDefault(__webpack_require__(/*! @/assets/other/qqSign.js */ 55));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // QQ音乐\nvar\n\nMUSICURL =\n\n\n_config.default.MUSICURL,ERR_OK = _config.default.ERR_OK,ERR_FALSE = _config.default.ERR_FALSE;var\n\ntime2seconds =\n\n_util.default.time2seconds,dateFormat = _util.default.dateFormat;\n\nvar source = 'qqmusic';\nvar href = MUSICURL[source].href;\n\n//QQ音乐请求常量\nvar commonParams = {\n  g_tk: 5381,\n  loginUin: 0,\n  hostUin: 0,\n  format: 'json',\n  inCharset: 'utf8',\n  outCharset: 'utf-8',\n  notice: 0,\n  platform: 'yqq.json',\n  needNewCode: 0 };\n\n\n\n//转义html特殊字符\nvar htmlDecodeByRegExp = function htmlDecodeByRegExp(str) {\n  var s = \"\";\n  if (str.length == 0) return \"\";\n  s = str.replace(/&#58;/g, \":\");\n  s = s.replace(/&#32;/g, \" \");\n  s = s.replace(/&#33;/g, \"!\");\n  s = s.replace(/&#34;/g, '\"');\n  s = s.replace(/&#35;/g, \"#\");\n  s = s.replace(/&#36;/g, \"$\");\n  s = s.replace(/&#37;/g, \"%\");\n  s = s.replace(/&#38;/g, \"&\");\n  s = s.replace(/&#39;/g, \"'\");\n  s = s.replace(/&#40;/g, \"(\");\n  s = s.replace(/&#41;/g, \")\");\n  s = s.replace(/&#42;/g, \"*\");\n  s = s.replace(/&#43;/g, \"+\");\n  s = s.replace(/&#44;/g, \",\");\n  s = s.replace(/&#45;/g, \"-\");\n  s = s.replace(/&#46;/g, \".\");\n  s = s.replace(/&#47;/g, \"/\");\n  s = s.replace(/&#13;/g, \"\\n\");\n  return s;\n};var _default =\n\n{\n  /**\r\n   * 搜索音乐列表\r\n   * @param {Object} data = {keyword: '搜索关键词', page: '搜索页数'} \r\n   **/\n  search: function search(data) {\n    var dataSync = Object.assign({\n      _: '15778592' + Math.floor(Math.random() * Math.pow(10, 5)) },\n    commonParams, {\n      w: data.keyword,\n      zhidaqu: 1,\n      catZhida: 1,\n      t: 0,\n      flag: 1,\n      ie: 'utf-8',\n      sem: 1,\n      aggr: 0,\n      perpage: 20,\n      n: 20,\n      p: data.page[source],\n      remoteplace: 'txt.mqq.all' });\n\n    return new Promise(function (resolve) {\n      _index.default.get('https://c.y.qq.com/soso/fcgi-bin/client_search_cp', {\n        params: dataSync,\n        headers: {\n          referer: 'https://c.y.qq.com',\n          host: 'c.y.qq.com' } }).\n\n      then(function (res) {\n        if (res.data.code == 0) {\n          var songs = res.data.data.song.list;\n          var list = [];\n          var zhidaqu = res.data.data.zhida;\n          var zhida = zhidaqu.zhida_singer ? new _singer.default({\n            singerId: zhidaqu.zhida_singer.singerMID,\n            title: zhidaqu.zhida_singer.singerName,\n            cover: \"https://y.gtimg.cn/music/photo_new/T001R68x68M000\".concat(zhidaqu.zhida_singer.singerMID, \".jpg?max_age=2592000\"),\n            albumSize: zhidaqu.zhida_singer.albumNum,\n            source: source }) :\n          null;\n          songs.forEach(function (song) {\n            var singer = '';\n            song.singer.forEach(function (sin, k) {\n              singer += sin.name + (k < song.singer.length ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.songmid,\n              lyricId: song.songid,\n              commentId: song.songid,\n              title: song.songname,\n              cover: \"https://y.gtimg.cn/music/photo_new/T002R300x300M000\".concat(song.albummid, \".jpg?max_age=2592000\"),\n              singer: singer,\n              payplay: song.pay.payplay == 1,\n              extra: {\n                bizType: 1 },\n\n              source: source });\n\n            list.push(item);\n          });\n          zhida ? list.unshift(zhida) : null;\n          resolve({\n            code: ERR_OK,\n            data: {\n              list: list,\n              zhida: zhida,\n              isLastPage: list.length < 20,\n              currentPage: data.page[source],\n              source: source } });\n\n\n        }\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            zhida: null,\n            isLastPage: false,\n            currentPage: data.page[source] - 1,\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取热门搜索关键词\r\n      *\r\n      **/\n  getHotKeyword: function getHotKeyword() {\n    var dataValue = Object.assign({}, {\n      \"comm\": commonParams },\n    { \"hotkey\": { \"module\": \"tencent_musicsoso_hotkey.HotkeyService\", \"method\": \"GetHotkeyForQQMusicMobile\", \"param\": { \"remoteplace\": \"txt.miniapp.wxada7aab80ba27074\", \"searchid\": \"1559616839293\" } } });\n    var dataSync = {\n      cgiKey: 'GetHomePage',\n      '_': 1577857656236,\n      data: JSON.stringify(dataValue) };\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.hotkey.data.vec_hotkey;\n          group.forEach(function (top) {\n            list.push(top.title);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取热门推荐\r\n      *\r\n      **/\n  getRecom: function getRecom() {var _this = this;\n    return new Promise(function (resolve) {\n      var newArr = [];\n      var recome = {\n        title: MUSICURL[source].title,\n        source: source,\n        banners: [],\n        hotSinger: [],\n        topList: [],\n        hotDisc: [],\n        newSong: [] };\n\n      if (MUSICURL[source].banner) {\n        newArr.push(_this.getBannerList());\n      }\n      if (MUSICURL[source].singer) {\n        newArr.push(_this.getHotSinger());\n      }\n      if (MUSICURL[source].top) {\n        newArr.push(_this.getToplist());\n      }\n      if (MUSICURL[source].album) {\n        newArr.push(_this.getHotDiscList());\n      }\n      Promise.all(newArr).then(function (ress) {\n        ress.forEach(function (res, key) {\n          if (res.code == ERR_OK) {\n            switch (key) {\n              case 0:\n                recome.banners = res.data.list;\n                break;\n              case 1:\n                recome.hotSinger = res.data.list;\n                break;\n              case 2:\n                recome.topList = res.data.list;\n                break;\n              default:\n                recome.hotDisc = res.data.list;}\n\n          }\n        });\n        resolve({\n          code: ERR_OK,\n          data: {\n            data: recome,\n            source: source } });\n\n\n      }).catch(function () {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            data: recome,\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取轮播图列表\r\n      *\r\n      **/\n  getBannerList: function getBannerList() {\n    var dataSync = Object.assign({\n      '-': 'recom61961704538089270' },\n    commonParams, {\n      data: JSON.stringify({\n        \"comm\": {\n          \"ct\": 24 },\n\n        \"focus\": {\n          \"module\": \"QQMusic.MusichallServer\",\n          \"method\": \"GetFocus\",\n          \"param\": {} } }) });\n\n\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.focus.data.content;\n          group.forEach(function (top) {\n            var item = new _album.default({\n              albumId: top.jump_info.url,\n              commentId: top.id,\n              title: top.title,\n              cover: top.pic_info.url,\n              type: 'banner',\n              extra: {\n                bizType: 2 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取轮播详情\r\n      * @param {Object} data = {id: 轮播ID} \r\n      **/\n  getBannerDetail: function getBannerDetail(data) {\n    var dataSync = Object.assign({\n      '-': 'albumSonglist' + Math.random() * Math.pow(10, 17) },\n    commonParams, {\n      data: JSON.stringify({\n        \"comm\": {\n          \"ct\": 24,\n          \"cv\": 10000 },\n\n        \"albumSonglist\": {\n          \"method\": \"GetAlbumSongList\",\n          \"module\": \"music.musichallAlbum.AlbumSongList\",\n          \"param\": {\n            \"albumMid\": data.id,\n            \"albumID\": 0,\n            \"begin\": 0,\n            \"num\": 100,\n            \"order\": 2 } } }) });\n\n\n\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.albumSonglist.data.songList;\n          group.forEach(function (song) {\n            var singer = '';\n            song.songInfo.singer.forEach(function (sin, k) {\n              singer += sin.name + (k < song.songInfo.singer.length ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.songInfo.mid,\n              lyricId: song.songInfo.id,\n              commentId: song.songInfo.id,\n              title: song.songInfo.title,\n              cover: \"https://y.qq.com/music/photo_new/T002R300x300M000\".concat(song.songInfo.album.pmid, \".jpg?max_age=2592000\"),\n              singer: singer,\n              payplay: song.songInfo.pay.pay_play == 1,\n              extra: {\n                bizType: 1 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取排行榜\r\n      *\r\n      **/\n  getToplist: function getToplist() {\n    var dataSync = {\n      '-': '1577850668501',\n      data: JSON.stringify({\n        \"comm\": Object.assign({}, commonParams, {\n          \"ct\": 23,\n          \"cv\": 0 }),\n\n        \"topList\": {\n          \"module\": \"musicToplist.ToplistInfoServer\",\n          \"method\": \"GetAll\",\n          \"param\": {} } }) };\n\n\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.topList.data.group;\n          group.forEach(function (item) {\n            item.toplist.forEach(function (top) {var _top$intro;\n              var item = new _album.default({\n                albumId: top.topId,\n                commentId: top.topId,\n                title: top.musichallTitle,\n                cover: top.frontPicUrl,\n                desc: ((_top$intro = top.intro) === null || _top$intro === void 0 ? void 0 : _top$intro.replace(/<br>/g, '\\n')) || '',\n                extra: {\n                  period: top.period,\n                  recType: top.recType,\n                  bizType: 4 },\n\n                type: 'top',\n                source: source });\n\n              if (item.extra.recType === 10005) {\n                list.push(item);\n              }\n            });\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取排行榜详情\r\n      * @param {String} id = {id: 排行榜ID} \r\n      * @param {String} extra = {period: 时间段} \r\n      **/\n  getTopDetail: function getTopDetail(data) {\n    var dataValue = {\n      \"comm\": {\n        \"cv\": 4747474,\n        \"ct\": 24 },\n\n      \"topListDetail\": {\n        \"module\": \"musicToplist.ToplistInfoServer\",\n        \"method\": \"GetDetail\",\n        \"param\": { \"topid\": data.id, \"offset\": 0, \"num\": 1000, \"period\": data.extra.period } } };\n\n\n    var sign = (0, _qqSign.default)(dataValue);\n    var dataSync = Object.assign({\n      '_': Math.random() * Math.pow(10, 17),\n      sign: sign },\n    commonParams, {\n      data: dataValue });\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        var desc = '';\n        if (res.data.code == 0) {\n          var group = res.data.topListDetail.data.songInfoList;\n          group.forEach(function (song) {\n            var singer = '';\n            song.singer.forEach(function (sin, k) {\n              singer += sin.name + (k < song.singer.length ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.mid,\n              lyricId: song.id,\n              commentId: song.id,\n              title: song.title,\n              cover: \"https://y.qq.com/music/photo_new/T002R300x300M000\".concat(song.album.pmid, \".jpg?max_age=2592000\"),\n              singer: singer,\n              payplay: song.pay.pay_play == 1,\n              extra: {\n                bizType: 1 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            desc: desc,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取最新歌曲\r\n      *\r\n      **/\n  getNewSongList: function getNewSongList() {\n    var dataValue = {\n      'comm': {\n        'ct': 24 },\n\n      'new_song': {\n        'module': 'newsong.NewSongServer',\n        'method': 'get_new_song_info',\n        'param': {\n          'type': 5 } } };\n\n\n\n    var sign = (0, _qqSign.default)(dataValue);\n    var dataSync = Object.assign({\n      '-': 'recom' + (Math.random() + '').replace('0.', ''),\n      sign: sign },\n    commonParams, {\n      data: dataValue });\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musics.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.new_song.data.songlist;\n          group.forEach(function (song) {\n            var singer = '';\n            song.singer.forEach(function (sin, k) {\n              singer += sin.name + (k < song.singer.length - 1 ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.mid,\n              lyricId: song.id,\n              commentId: song.id,\n              title: song.title,\n              cover: \"https://y.gtimg.cn/music/photo_new/T002R300x300M000\".concat(song.album.mid, \".jpg?max_age=2592000\"),\n              desc: song.desc,\n              singer: singer,\n              payplay: song.pay.pay_play == 1,\n              extra: {\n                bizType: 1 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取新碟类型\r\n      *\r\n      **/\n  getNewAlbumType: function getNewAlbumType() {\n    return new Promise(function (resolve) {\n      var list = [{\n        title: '内地',\n        typeId: 1,\n        source: source },\n      {\n        title: '港台',\n        typeId: 2,\n        source: source },\n      {\n        title: '欧美',\n        typeId: 3,\n        source: source },\n      {\n        title: '韩国',\n        typeId: 4,\n        source: source },\n      {\n        title: '日本',\n        typeId: 5,\n        source: source },\n      {\n        title: '其他',\n        typeId: 6,\n        source: source }];\n\n      resolve({\n        code: ERR_OK,\n        data: {\n          list: list,\n          source: source } });\n\n\n    });\n  },\n\n  /**\r\n      * 获取最新上架专辑\r\n      * @param {String} typeId = 类型 \r\n      * @param {String} page = 请求页数 \r\n      **/\n  getNewAlbumList: function getNewAlbumList(data) {\n    var dataValue = {\n      'comm': {\n        'ct': 24 },\n\n      'new_album': {\n        'module': 'newalbum.NewAlbumServer',\n        'method': 'get_new_album_info',\n        'param': {\n          \"area\": data.typeId,\n          \"start\": (data.page - 1) * 40,\n          \"sin\": 0,\n          \"num\": 40 } } };\n\n\n\n    var sign = (0, _qqSign.default)(dataValue);\n    var dataSync = Object.assign({\n      '_': '1636341064564',\n      sign: sign },\n    commonParams, {\n      data: dataValue });\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.new_album.data.albums;\n          group.forEach(function (album) {\n            var singer = '';\n            album.singers.forEach(function (sin, k) {\n              singer += sin.name + (k < album.singers.length - 1 ? ' / ' : '');\n            });\n            var item = new _album.default({\n              albumId: album.mid,\n              commentId: album.id,\n              title: album.name,\n              cover: \"https://y.qq.com/music/photo_new/T002R300x300M000\".concat(album.photo.pic_mid, \".jpg?max_age=2592000\"),\n              creator: singer,\n              type: 'newAlbum',\n              extra: {\n                bizType: 2 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            isLastPage: list.length < 40,\n            currentPage: data.page,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            isLastPage: false,\n            currentPage: data.page - 1,\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取专辑详情\r\n      * @param {String} id = 专辑ID \r\n      **/\n  getAlbumDetail: function getAlbumDetail(data) {\n    var dataValue = {\n      'comm': {\n        'ct': 24 },\n\n      'songList': {\n        \"module\": \"music.musichallAlbum.AlbumSongList\",\n        \"method\": \"GetAlbumSongList\",\n        \"param\": {\n          \"albumMid\": data.id,\n          \"albumID\": 0,\n          \"begin\": 0,\n          \"num\": 100,\n          \"order\": 2 } } };\n\n\n\n    var sign = (0, _qqSign.default)(dataValue);\n    var dataSync = Object.assign({\n      '_': '1636341064564',\n      sign: sign },\n    commonParams, {\n      data: dataValue });\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.songList.data.songList;\n          group.forEach(function (songInfo) {\n            var song = songInfo.songInfo;\n            var singer = '';\n            song.singer.forEach(function (sin, k) {\n              singer += sin.name + (k < song.singer.length - 1 ? ' / ' : '');\n            });\n            var item = new _song.default({\n              songId: song.mid,\n              lyricId: song.id,\n              commentId: song.id,\n              title: song.title,\n              cover: \"https://y.qq.com/music/photo_new/T002R300x300M000\".concat(song.album.pmid, \".jpg?max_age=2592000\"),\n              singer: singer,\n              payplay: song.pay.pay_play == 1,\n              extra: {\n                bizType: 1 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌手类型\r\n      *\r\n      **/\n  getSingerType: function getSingerType() {\n    return new Promise(function (resolve) {\n      var list = [{\n        title: '内地',\n        typeId: '200',\n        source: source },\n      {\n        title: '港台',\n        typeId: '2',\n        source: source },\n      {\n        title: '欧美',\n        typeId: '5',\n        source: source },\n      {\n        title: '韩国',\n        typeId: '3',\n        source: source },\n      {\n        title: '日本',\n        typeId: '4',\n        source: source }];\n\n      resolve({\n        code: ERR_OK,\n        data: {\n          list: list,\n          source: source } });\n\n\n    });\n  },\n\n  /**\r\n      * 获取热门歌手\r\n      *\r\n      **/\n  getHotSinger: function getHotSinger() {var _this2 = this;\n    return new Promise(function (resolve) {\n      _this2.getSinger({\n        area: -100 }).\n      then(function (res) {\n        resolve({\n          code: res.code,\n          data: {\n            list: res.data.list.slice(0, 10),\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌手\r\n      * @param {Object} data = {area: 地区} \r\n      **/\n  getSinger: function getSinger(data) {\n    var dataSync = Object.assign({\n      '-': 'getUCGI' + Math.random() * Math.pow(10, 17) },\n    commonParams, {\n      data: JSON.stringify({ \"comm\": { \"ct\": 24, \"cv\": 0 }, \"singerList\": { \"module\": \"Music.SingerListServer\", \"method\": \"get_singer_list\", \"param\": { \"area\": parseInt(data.area), \"sex\": -100, \"genre\": -100, \"index\": -100, \"sin\": 0, \"cur_page\": 1 } } }) });\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.singerList.data.singerlist;\n          group.forEach(function (singer) {\n            var item = new _singer.default({\n              singerId: singer.singer_mid,\n              title: singer.singer_name,\n              cover: singer.singer_pic,\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌手专辑列表\r\n      * @param {Object} data = {id: 歌手ID} \r\n      **/\n  getSingerDetail: function getSingerDetail(data) {\n    var dataSync = Object.assign({\n      '-': 'getSingerSong' + Math.random() * Math.pow(10, 17) },\n    commonParams, {\n      data: JSON.stringify({\n        \"comm\": {\n          \"ct\": 24,\n          \"cv\": 0 },\n\n        \"singerInfo\": {\n          \"method\": \"GetSingerDetail\",\n          \"module\": \"musichall.singer_info_server\",\n          \"param\": {\n            \"singer_mids\": [data.id],\n            \"ex_singer\": 1,\n            \"wiki_singer\": 0,\n            \"group_singer\": 0,\n            \"pic\": 0,\n            \"photos\": 0 } },\n\n\n        \"singerSongList\": {\n          \"module\": \"musichall.song_list_server\",\n          \"method\": \"GetSingerSongList\",\n          \"param\": {\n            \"order\": 1,\n            \"singerMid\": data.id,\n            \"begin\": 0,\n            \"num\": 100 } } }) });\n\n\n\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        var desc = '';\n        if (res.data.code == 0) {\n          desc = res.data.singerInfo.data.singer_list[0].ex_info.desc;\n          var group = res.data.singerSongList.data.songList;\n          group.forEach(function (song) {\n            var singer = '';\n            song.songInfo.singer.forEach(function (sin, k) {\n              singer += sin.name + (k < song.songInfo.singer.length ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.songInfo.mid,\n              lyricId: song.songInfo.id,\n              commentId: song.songInfo.id,\n              title: song.songInfo.title,\n              cover: \"https://y.qq.com/music/photo_new/T002R300x300M000\".concat(song.songInfo.album.pmid, \".jpg?max_age=2592000\"),\n              singer: singer,\n              payplay: song.songInfo.pay.pay_play == 1,\n              extra: {\n                bizType: 1 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            desc: desc,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌单类型\r\n      *\r\n      **/\n  getDiscType: function getDiscType(data) {\n    var dataValue = {\n      \"comm\": {\n        \"ct\": 24 },\n\n      \"discType\": {\n        \"method\": \"GetAllTag\",\n        \"module\": \"music.playlist.PlaylistSquare\",\n        \"param\": {} } };\n\n\n    var sign = (0, _qqSign.default)(dataValue);\n    var dataSync = Object.assign({\n      _: '1635937136254',\n      sign: sign },\n    commonParams, {\n      data: dataValue });\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musics.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.discType.data.v_group;\n          group.forEach(function (cat) {\n            list.push({\n              label: cat.group_name,\n              child: cat.v_item.map(function (sub) {\n                return {\n                  label: sub.name,\n                  value: sub.id };\n\n              }) });\n\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取热门歌单\r\n      *\r\n      **/\n  getHotDiscList: function getHotDiscList() {\n    var dataSync = Object.assign({}, commonParams, {\n      picmid: 1,\n      rnd: 0.660100644751829,\n      categoryId: 10000000,\n      sortId: 5,\n      sin: 0,\n      ein: 19 });\n\n    return new Promise(function (resolve) {\n      _index.default.get('https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg', {\n        params: dataSync,\n        headers: {\n          referer: 'https://c.y.qq.com',\n          host: 'c.y.qq.com' } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.data.list;\n          group.forEach(function (top) {\n            var item = new _album.default({\n              albumId: top.dissid,\n              commentId: top.dissid,\n              title: top.dissname,\n              cover: top.imgurl,\n              playnum: top.listennum,\n              creator: top.creator.name,\n              type: 'album',\n              extra: {\n                bizType: 3 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌单\r\n      * @param {Object} data = {参数} \r\n      * @param {String} order = {new or hot} \r\n      * @param {Number} limit = {请求数量} \r\n      * @param {String} cat = {分类} \r\n      **/\n  getDiscList: function getDiscList(data) {\n    var dataValue = {\n      \"comm\": {\n        \"ct\": 24 },\n\n      \"playlist\": {\n        \"param\": {\n          \"caller\": \"0\",\n          \"category_id\": data.typeId,\n          \"size\": 100,\n          \"page\": data.page - 1,\n          \"use_page\": 1 },\n\n        \"method\": \"get_category_content\",\n        \"module\": \"music.playlist.PlayListCategory\" } };\n\n\n    var sign = (0, _qqSign.default)(dataValue);\n    var dataSync = Object.assign({\n      '-': 'recom' + (Math.random() + '').replace('0.', ''),\n      sign: sign },\n    commonParams, {\n      data: dataValue });\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musics.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.playlist.data.content.v_item;\n          group.forEach(function (top) {\n            var item = new _album.default({\n              albumId: top.basic.tid,\n              commentId: top.basic.tid,\n              title: top.basic.title,\n              cover: top.basic.cover.small_url,\n              desc: top.basic.desc,\n              playnum: top.basic.play_cnt,\n              creator: top.basic.creator.nick,\n              type: 'album',\n              extra: {\n                bizType: 3 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            isLastPage: true,\n            currentPage: data.page,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            isLastPage: false,\n            currentPage: data.page - 1,\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌单详情\r\n      * @param {String} id = {id: 排行榜ID} \r\n      * @param {String} extra = {period: 时间段} \r\n      **/\n  getDiscDetail: function getDiscDetail(data) {\n    var dataSync = Object.assign({}, commonParams, {\n      type: 1,\n      json: 1,\n      utf8: 1,\n      onlysong: 0,\n      new_format: 1,\n      disstid: data.id });\n\n    return new Promise(function (resolve) {\n      _index.default.get('https://c.y.qq.com/qzone/fcg-bin/fcg_ucc_getcdinfo_byids_cp.fcg', {\n        params: dataSync,\n        headers: {\n          referer: 'https://c.y.qq.com/',\n          host: 'c.y.qq.com' } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.cdlist[0].songlist;\n          group.forEach(function (song) {\n            var singer = '';\n            song.singer.forEach(function (sin, k) {\n              singer += sin.name + (k < song.singer.length - 1 ? ' ' : '');\n            });\n            var item = new _song.default({\n              songId: song.mid,\n              lyricId: song.id,\n              commentId: song.id,\n              title: song.title,\n              cover: \"https://y.qq.com/music/photo_new/T002R300x300M000\".concat(song.album.pmid, \".jpg?max_age=2592000\"),\n              singer: singer,\n              payplay: song.pay.pay_play == 1,\n              extra: {\n                bizType: 1 },\n\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            source: source } });\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取播放链接\r\n      * @param {Object} data = {id: '歌曲Id'} \r\n      **/\n  getPlayUrl: function getPlayUrl(data) {\n    var dataSync = Object.assign({\n      '-': 'getplaysongvkey700897959535075' },\n    commonParams, {\n      data: JSON.stringify({\n        \"req\": {\n          \"module\": \"CDN.SrfCdnDispatchServer\",\n          \"method\": \"GetCdnDispatch\",\n          \"param\": {\n            \"guid\": \"7764863790\",\n            \"calltype\": 0,\n            \"userip\": \"\" } },\n\n\n        \"req_0\": {\n          \"module\": \"vkey.GetVkeyServer\",\n          \"method\": \"CgiGetVkey\",\n          \"param\": {\n            \"guid\": \"7764863790\",\n            \"songmid\": [data.id],\n            \"songtype\": [0],\n            \"uin\": \"0\",\n            \"loginflag\": 1,\n            \"platform\": \"20\" } },\n\n\n        \"comm\": {\n          \"uin\": 0,\n          \"format\": \"json\",\n          \"ct\": 24,\n          \"cv\": 0 } }) });\n\n\n\n    return new Promise(function (resolve, reject) {\n      _index.default.get(href + '/cgi-bin/musicu.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var playUrl = '';\n        if (res.data.code == 0) {\n          if (res.data.req_0.data.midurlinfo['0'].purl) {\n            playUrl = res.data.req_0.data.midurlinfo['0'].purl ? res.data.req_0.data.sip[\n            1] + res.data.req_0.data.midurlinfo['0'].purl : '';\n          }\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            src: playUrl,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        reject({\n          code: ERR_FALSE,\n          data: {\n            src: '',\n            source: source } });\n\n\n      });\n    });\n  },\n\n  /**\r\n      * 获取歌词\r\n      * @param {Object} data = {id: '歌词id'} \r\n      **/\n  getLyric: function getLyric(data) {\n    var dataSync = Object.assign({}, commonParams, {\n      '-': 'jsonp1',\n      nobase64: 1,\n      musicid: data.id });\n\n    return new Promise(function (resolve, reject) {\n      _index.default.get('https://c.y.qq.com/lyric/fcgi-bin/fcg_query_lyric_yqq.fcg', {\n        params: dataSync,\n        headers: {\n          referer: 'https://c.y.qq.com',\n          host: 'c.y.qq.com' } }).\n\n      then(function (res) {\n        var lyrics = [];\n        if (res.data.code == 0) {\n          var arr = htmlDecodeByRegExp(res.data.lyric).split('&#10;');\n          for (var i in arr) {\n            if (i >= 5) {\n              var time = arr[i].match(/\\[(\\S*)\\]/) ? arr[i].match(/\\[(\\S*)\\]/)[0] : '';\n              var title = arr[i].split(']')[1];\n              if (title && time) {\n                lyrics.push({\n                  time: time2seconds(time.substring(1, time.length - 1)),\n                  title: title });\n\n              }\n            }\n          }\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            lyric: lyrics,\n            source: source } });\n\n\n      }).catch(function (err) {\n        reject({\n          code: ERR_FALSE,\n          data: {\n            lyric: [],\n            source: source } });\n\n\n      });\n    });\n  },\n  /**\r\n      * 获取歌单\r\n      * @param {Object} data = {参数} \r\n      * @param {String} id = {new or hot} \r\n      * @param {Number} limit = {请求数量} \r\n      * @param {String} cat = {分类} \r\n      **/\n  getComment: function getComment(data) {\n    var dataValue = {\n      \"comm\": {\n        \"ct\": 24 },\n\n      \"comments\": {\n        \"module\": \"music.globalComment.CommentReadServer\",\n        \"method\": \"GetNewCommentList\",\n        \"param\": {\n          \"BizType\": data.extra.bizType,\n          \"BizId\": data.id.toString(),\n          \"LastCommentSeqNo\": data.extra.seqNo || '',\n          \"PageSize\": 25,\n          \"PageNum\": data.page - 1,\n          \"FromCommentId\": \"\",\n          \"WithHot\": 0 } } };\n\n\n\n    var sign = (0, _qqSign.default)(dataValue);\n    var dataSync = Object.assign({\n      '_': Math.random() * Math.pow(10, 17),\n      sign: sign },\n    commonParams, {\n      data: dataValue });\n\n    return new Promise(function (resolve) {\n      _index.default.get(href + '/cgi-bin/musics.fcg', {\n        params: dataSync,\n        headers: {\n          referer: href,\n          host: href.replace('https://', '') } }).\n\n      then(function (res) {\n        var list = [];\n        if (res.data.code == 0) {\n          var group = res.data.comments.data.CommentList.Comments;\n          group.forEach(function (comment) {\n            var subComments = comment.SubComments || [];\n            var subComment = [];\n            subComments.forEach(function (sub) {\n              subComment.push(\n              new _comment.default({\n                id: sub.SeqNo,\n                avatar: sub.Avatar,\n                title: sub.Nick,\n                subtitle: dateFormat(sub.PubTime * 1000),\n                content: sub.Content }));\n\n\n            });\n            var item = new _comment.default({\n              id: comment.SeqNo,\n              avatar: comment.Avatar,\n              title: comment.Nick,\n              subtitle: dateFormat(comment.PubTime * 1000),\n              subComment: subComment,\n              content: comment.Content,\n              source: source });\n\n            list.push(item);\n          });\n        }\n        resolve({\n          code: ERR_OK,\n          data: {\n            list: list,\n            isLastPage: list.length < 25,\n            currentPage: data.page,\n            source: source } });\n\n\n\n      }).catch(function (err) {\n        resolve({\n          code: ERR_FALSE,\n          data: {\n            list: [],\n            isLastPage: false,\n            currentPage: data.page - 1,\n            source: source } });\n\n\n      });\n    });\n  },\n  source: source };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/*!***********************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/other/qqSign.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = getSecuritySign;var __sign_hash_20200305 = function __sign_hash_20200305(n) {\n  function l(n, t) {\n    var o = (65535 & n) + (65535 & t);\n    return (n >> 16) + (t >> 16) + (o >> 16) << 16 | 65535 & o;\n  }\n  function r(n, t, o, e, u, p) {\n    return l((i = l(l(t, n), l(e, p))) << (r = u) | i >>> 32 - r, o);\n    var i, r;\n  }\n  function g(n, t, o, e, u, p, i) {\n    return r(t & o | ~t & e, n, t, u, p, i);\n  }\n  function a(n, t, o, e, u, p, i) {\n    return r(t & e | o & ~e, n, t, u, p, i);\n  }\n  function s(n, t, o, e, u, p, i) {\n    return r(t ^ o ^ e, n, t, u, p, i);\n  }\n  function v(n, t, o, e, u, p, i) {\n    return r(o ^ (t | ~e), n, t, u, p, i);\n  }\n  function t(n) {\n    return function (n) {\n      var t,o = \"\";\n      for (t = 0; t < 32 * n.length; t += 8) {o += String.fromCharCode(n[t >> 5] >>> t % 32 & 255);}\n      return o;\n    }(function (n, t) {\n      n[t >> 5] |= 128 << t % 32, n[14 + (t + 64 >>> 9 << 4)] = t;\n      var o,e,u,p,i,r = 1732584193,\n      f = -271733879,\n      h = -1732584194,\n      c = 271733878;\n      for (o = 0; o < n.length; o += 16) {r = g(e = r, u = f, p = h, i = c, n[o], 7, -\n        680876936), c = g(c, r, f, h, n[o + 1], 12, -389564586), h = g(h, c, r, f, n[o +\n        2], 17, 606105819), f = g(f, h, c, r, n[o + 3], 22, -1044525330), r = g(r, f, h,\n        c, n[o + 4], 7, -176418897), c = g(c, r, f, h, n[o + 5], 12, 1200080426), h = g(\n        h, c, r, f, n[o + 6], 17, -1473231341), f = g(f, h, c, r, n[o + 7], 22, -\n        45705983), r = g(r, f, h, c, n[o + 8], 7, 1770035416), c = g(c, r, f, h, n[o +\n        9], 12, -1958414417), h = g(h, c, r, f, n[o + 10], 17, -42063), f = g(f, h, c,\n        r, n[o + 11], 22, -1990404162), r = g(r, f, h, c, n[o + 12], 7, 1804603682), c =\n        g(c, r, f, h, n[o + 13], 12, -40341101), h = g(h, c, r, f, n[o + 14], 17, -\n        1502002290), r = a(r, f = g(f, h, c, r, n[o + 15], 22, 1236535329), h, c, n[o +\n        1], 5, -165796510), c = a(c, r, f, h, n[o + 6], 9, -1069501632), h = a(h, c, r,\n        f, n[o + 11], 14, 643717713), f = a(f, h, c, r, n[o], 20, -373897302), r = a(r,\n        f, h, c, n[o + 5], 5, -701558691), c = a(c, r, f, h, n[o + 10], 9, 38016083),\n        h = a(h, c, r, f, n[o + 15], 14, -660478335), f = a(f, h, c, r, n[o + 4], 20, -\n        405537848), r = a(r, f, h, c, n[o + 9], 5, 568446438), c = a(c, r, f, h, n[o +\n        14], 9, -1019803690), h = a(h, c, r, f, n[o + 3], 14, -187363961), f = a(f, h,\n        c, r, n[o + 8], 20, 1163531501), r = a(r, f, h, c, n[o + 13], 5, -1444681467),\n        c = a(c, r, f, h, n[o + 2], 9, -51403784), h = a(h, c, r, f, n[o + 7], 14,\n        1735328473), r = s(r, f = a(f, h, c, r, n[o + 12], 20, -1926607734), h, c, n[o +\n        5], 4, -378558), c = s(c, r, f, h, n[o + 8], 11, -2022574463), h = s(h, c, r, f,\n        n[o + 11], 16, 1839030562), f = s(f, h, c, r, n[o + 14], 23, -35309556), r = s(\n        r, f, h, c, n[o + 1], 4, -1530992060), c = s(c, r, f, h, n[o + 4], 11,\n        1272893353), h = s(h, c, r, f, n[o + 7], 16, -155497632), f = s(f, h, c, r, n[\n        o + 10], 23, -1094730640), r = s(r, f, h, c, n[o + 13], 4, 681279174), c = s(c,\n        r, f, h, n[o], 11, -358537222), h = s(h, c, r, f, n[o + 3], 16, -722521979), f =\n        s(f, h, c, r, n[o + 6], 23, 76029189), r = s(r, f, h, c, n[o + 9], 4, -640364487),\n        c = s(c, r, f, h, n[o + 12], 11, -421815835), h = s(h, c, r, f, n[o + 15], 16,\n        530742520), r = v(r, f = s(f, h, c, r, n[o + 2], 23, -995338651), h, c, n[o], 6,\n        -198630844), c = v(c, r, f, h, n[o + 7], 10, 1126891415), h = v(h, c, r, f, n[\n        o + 14], 15, -1416354905), f = v(f, h, c, r, n[o + 5], 21, -57434055), r = v(r,\n        f, h, c, n[o + 12], 6, 1700485571), c = v(c, r, f, h, n[o + 3], 10, -\n        1894986606), h = v(h, c, r, f, n[o + 10], 15, -1051523), f = v(f, h, c, r, n[o + 1],\n        21, -2054922799), r = v(r, f, h, c, n[o + 8], 6, 1873313359), c = v(c, r, f, h,\n        n[o + 15], 10, -30611744), h = v(h, c, r, f, n[o + 6], 15, -1560198380), f = v(\n        f, h, c, r, n[o + 13], 21, 1309151649), r = v(r, f, h, c, n[o + 4], 6, -\n        145523070), c = v(c, r, f, h, n[o + 11], 10, -1120210379), h = v(h, c, r, f, n[\n        o + 2], 15, 718787259), f = v(f, h, c, r, n[o + 9], 21, -343485551), r = l(r,\n        e), f = l(f, u), h = l(h, p), c = l(c, i);}\n      return [r, f, h, c];\n    }(function (n) {\n      var t,o = [];\n      for (o[(n.length >> 2) - 1] = void 0, t = 0; t < o.length; t += 1) {o[t] = 0;}\n      for (t = 0; t < 8 * n.length; t += 8) {o[t >> 5] |= (255 & n.charCodeAt(t / 8)) <<\n        t % 32;}\n      return o;\n    }(n), 8 * n.length));\n  }\n  function o(n) {\n    return t(unescape(encodeURIComponent(n)));\n  }\n  return function (n) {\n    var t,o,e = \"0123456789abcdef\",\n    u = \"\";\n    for (o = 0; o < n.length; o += 1) {t = n.charCodeAt(o), u += e.charAt(t >>> 4 & 15) + e.charAt(\n      15 & t);}\n    return u;\n  }(o(n));\n};\nfunction getSecuritySign(data) {\n  var str = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  var count = Math.floor(Math.random() * 7 + 10);\n  var sign = 'zza';\n  for (var i = 0; i < count; i++) {\n    sign += str[Math.floor(Math.random() * 36)];\n  }\n  sign += __sign_hash_20200305('CJBPACrRuNy7' + JSON.stringify(data));\n  return sign;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/*!********************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/api/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _index = _interopRequireDefault(__webpack_require__(/*! ./music/index.js */ 57));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nvar api = {\n  music: _index.default };var _default =\n\n\napi;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2FwaS9pbmRleC5qcyJdLCJuYW1lcyI6WyJhcGkiLCJtdXNpYyJdLCJtYXBwaW5ncyI6InVGQUFBLHFGOztBQUVBLElBQU1BLEdBQUcsR0FBRztBQUNYQyxPQUFLLEVBQUVBLGNBREksRUFBWixDOzs7QUFJZUQsRyIsImZpbGUiOiI1Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtdXNpYyBmcm9tICcuL211c2ljL2luZGV4LmpzJ1xyXG5cclxuY29uc3QgYXBpID0ge1xyXG5cdG11c2ljOiBtdXNpY1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhcGkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n");

/***/ }),
/* 57 */
/*!**************************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/api/music/index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _store = _interopRequireDefault(__webpack_require__(/*! @/store */ 17));\nvar _config = _interopRequireDefault(__webpack_require__(/*! @/assets/js/config.js */ 11));\nvar _api = _interopRequireDefault(__webpack_require__(/*! ./api.js */ 44));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // 获取 Vuex Store 实例，注意是**实例**，而不是 vuex 这个库\nvar\ngetters = _store.default.getters;var\nMUSICURL = _config.default.MUSICURL;var _default =\n\n{\n  //搜索音乐列表\n  search: function search(data) {\n    //判断一下哪些来源被关闭了\n    var sources = getters['source/getClose'];\n    var adult = getters['app/getAdult'];\n    var newArr = [];\n    Object.keys(_api.default).forEach(function (key) {\n      if (sources.indexOf(key) == -1 && !data.isLastPage[key] && (!MUSICURL[key].isAdult || adult) && MUSICURL[key].search) {\n        newArr.push(_api.default[key].search(data));\n      }\n    });\n    return Promise.all(newArr.map(function (promise) {return promise.catch(function (e) {promise.resolve(e);});}));\n  },\n\n  //获取热门搜索关键词\n  getHotKeyword: function getHotKeyword() {\n    var sources = getters['source/getClose'];\n    var adult = getters['app/getAdult'];\n    var newArr = [];\n    Object.keys(_api.default).forEach(function (key) {\n      if (sources.indexOf(key) == -1 && (!MUSICURL[key].isAdult || adult) && MUSICURL[key].hotKey) {\n        newArr.push(_api.default[key].getHotKeyword());\n      }\n    });\n    return Promise.all(newArr.map(function (promise) {return promise.catch(function (e) {promise.resolve(e);});}));\n  },\n\n  //获取热门推荐\n  getRecom: function getRecom() {\n    var sources = getters['source/getClose'];\n    var adult = getters['app/getAdult'];\n    var newArr = [];\n    Object.keys(_api.default).forEach(function (key) {\n      if (sources.indexOf(key) == -1 && (!MUSICURL[key].isAdult || adult) && MUSICURL[key].recome) {\n        newArr.push(_api.default[key].getRecom());\n      }\n    });\n    return Promise.all(newArr.map(function (promise) {return promise.catch(function (e) {promise.resolve(e);});}));\n  },\n\n  //获取轮播图列表\n  getBannerList: function getBannerList() {\n    return _api.default[data.source].getBannerList();\n  },\n  //获取轮播图详情\n  getBannerDetail: function getBannerDetail(data) {\n    return _api.default[data.source].getBannerDetail(data);\n  },\n\n  //获取排行榜列表\n  getToplist: function getToplist(data) {\n    return _api.default[data.source].getToplist();\n  },\n  //获取排行榜详情\n  getTopDetail: function getTopDetail(data) {\n    return _api.default[data.source].getTopDetail(data);\n  },\n\n  //获取歌单类型\n  getDiscType: function getDiscType(data) {\n    return _api.default[data.source].getDiscType();\n  },\n\n  //获取热门歌单\n  getHotDiscList: function getHotDiscList(data) {\n    return _api.default[data.source].getHotDiscList();\n  },\n  //获取歌单\n  getDiscList: function getDiscList(data) {\n    return _api.default[data.source].getDiscList(data);\n  },\n  //获取歌单详情\n  getDiscDetail: function getDiscDetail(data) {\n    return _api.default[data.source].getDiscDetail(data);\n  },\n  //获取新发单曲\n  getNewSongList: function getNewSongList(data) {\n    return _api.default[data.source].getNewSongList();\n  },\n  //获取专辑类型\n  getNewAlbumType: function getNewAlbumType(data) {\n    return _api.default[data.source].getNewAlbumType();\n  },\n  //获取最新上架专辑\n  getNewAlbumList: function getNewAlbumList(data) {\n    return _api.default[data.source].getNewAlbumList(data);\n  },\n  //获取专辑详情\n  getAlbumDetail: function getAlbumDetail(data) {\n    return _api.default[data.source].getAlbumDetail(data);\n  },\n  //获取热门歌手\n  getHotSinger: function getHotSinger(data) {\n    return _api.default[data.source].getHotSinger();\n  },\n\n  //获取歌手类型\n  getSingerType: function getSingerType(data) {\n    return _api.default[data.source].getSingerType();\n  },\n\n  //获取分类歌手\n  getSinger: function getSinger(data) {\n    return _api.default[data.source].getSinger(data);\n  },\n\n  //获取歌手详情\n  getSingerDetail: function getSingerDetail(data) {\n    return _api.default[data.source].getSingerDetail(data);\n  },\n\n  //获取音乐播放链接列表\n  getPlayUrl: function getPlayUrl(data) {\n    return _api.default[data.source].getPlayUrl();\n  },\n\n  //获取音乐歌词\n  getLyric: function getLyric(data) {\n    return _api.default[data.source].getLyric();\n  },\n  //获取评论\n  getComment: function getComment(data) {\n    return _api.default[data.source].getComment(data);\n  } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57\n");

/***/ }),
/* 58 */
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 59 */
/*!*****************************************************!*\
  !*** G:/my-project/uni-polymerize/plugins/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 2));\nvar _router = __webpack_require__(/*! @/plugins/router/router.js */ 7);\nvar _router2 = _interopRequireDefault(__webpack_require__(/*! @/plugins/router */ 8));\nvar _request = _interopRequireDefault(__webpack_require__(/*! @/plugins/request */ 9));\nvar _xhr = _interopRequireDefault(__webpack_require__(/*! @/plugins/xhr */ 12));\nvar _dom = _interopRequireDefault(__webpack_require__(/*! @/plugins/dom */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n_vue.default.prototype.$http = _request.default;\n_vue.default.prototype.$xhr = _xhr.default;\n_vue.default.prototype.$dom = _dom.default;\n_vue.default.prototype.$Router = _router2.default;\n_vue.default.prototype.$Route = new _router.Route();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGx1Z2lucy9pbmRleC5qcyJdLCJuYW1lcyI6WyJWdWUiLCJwcm90b3R5cGUiLCIkaHR0cCIsIkh0dHAiLCIkeGhyIiwiWGhyIiwiJGRvbSIsIkRvbSIsIiRSb3V0ZXIiLCJSb3V0ZXIiLCIkUm91dGUiLCJSb3V0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGO0FBQ0FBLGFBQUlDLFNBQUosQ0FBY0MsS0FBZCxHQUFzQkMsZ0JBQXRCO0FBQ0FILGFBQUlDLFNBQUosQ0FBY0csSUFBZCxHQUFxQkMsWUFBckI7QUFDQUwsYUFBSUMsU0FBSixDQUFjSyxJQUFkLEdBQXFCQyxZQUFyQjtBQUNBUCxhQUFJQyxTQUFKLENBQWNPLE9BQWQsR0FBd0JDLGdCQUF4QjtBQUNBVCxhQUFJQyxTQUFKLENBQWNTLE1BQWQsR0FBdUIsSUFBSUMsYUFBSixFQUF2QiIsImZpbGUiOiI1OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ0AvcGx1Z2lucy9yb3V0ZXIvcm91dGVyLmpzJztcclxuaW1wb3J0IFJvdXRlciBmcm9tICdAL3BsdWdpbnMvcm91dGVyJztcclxuaW1wb3J0IEh0dHAgZnJvbSAnQC9wbHVnaW5zL3JlcXVlc3QnXHJcbmltcG9ydCBYaHIgZnJvbSAnQC9wbHVnaW5zL3hocidcclxuaW1wb3J0IERvbSBmcm9tICdAL3BsdWdpbnMvZG9tJ1xyXG5WdWUucHJvdG90eXBlLiRodHRwID0gSHR0cDtcclxuVnVlLnByb3RvdHlwZS4keGhyID0gWGhyO1xyXG5WdWUucHJvdG90eXBlLiRkb20gPSBEb207XHJcblZ1ZS5wcm90b3R5cGUuJFJvdXRlciA9IFJvdXRlcjtcclxuVnVlLnByb3RvdHlwZS4kUm91dGUgPSBuZXcgUm91dGUoKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///59\n");

/***/ }),
/* 60 */
/*!*******************************************************!*\
  !*** G:/my-project/uni-polymerize/assets/js/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 2));\nvar _util = _interopRequireDefault(__webpack_require__(/*! ./util.js */ 15));\nvar _config = _interopRequireDefault(__webpack_require__(/*! ./config.js */ 11));\nvar _business = _interopRequireDefault(__webpack_require__(/*! ./business.js */ 16));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n_vue.default.prototype.$utils = _util.default;\n_vue.default.prototype.$config = _config.default;\n_vue.default.prototype.$business = _business.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vYXNzZXRzL2pzL2luZGV4LmpzIl0sIm5hbWVzIjpbIlZ1ZSIsInByb3RvdHlwZSIsIiR1dGlscyIsIlV0aWxzIiwiJGNvbmZpZyIsIkNvbmZpZyIsIiRidXNpbmVzcyIsIkJ1c2luZXNzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxxRjs7QUFFQUEsYUFBSUMsU0FBSixDQUFjQyxNQUFkLEdBQXVCQyxhQUF2QjtBQUNBSCxhQUFJQyxTQUFKLENBQWNHLE9BQWQsR0FBd0JDLGVBQXhCO0FBQ0FMLGFBQUlDLFNBQUosQ0FBY0ssU0FBZCxHQUEwQkMsaUJBQTFCIiwiZmlsZSI6IjYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tIFwidnVlXCI7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuL3V0aWwuanMnO1xyXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4vY29uZmlnLmpzJztcclxuaW1wb3J0IEJ1c2luZXNzIGZyb20gJy4vYnVzaW5lc3MuanMnO1xyXG5cclxuVnVlLnByb3RvdHlwZS4kdXRpbHMgPSBVdGlscztcclxuVnVlLnByb3RvdHlwZS4kY29uZmlnID0gQ29uZmlnO1xyXG5WdWUucHJvdG90eXBlLiRidXNpbmVzcyA9IEJ1c2luZXNzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60\n");

/***/ })
],[[0,"app-config"]]]);